<?xml version="1.0" encoding="UTF-8"?>
<project name="sej" default="build" basedir="." xmlns:cs="antlib:com.puppycrawl.tools.checkstyle">
	<description>Builds, tests, and runs the project SEJ.</description>

	<property name="Name" value="SEJ" />
	<property name="name" value="sej" />
	<property name="dist.version" value="0.8.0" />

	<property name="src.dir" location="${basedir}/src" />
	<property name="lib.dir" location="${basedir}/lib" />
	<property name="conf.dir" location="${basedir}/conf" />
	<property name="doc.dir" location="${basedir}/doc" />
	<property name="src.classes.dir" location="${src.dir}/classes" />
	<property name="src.classes-gen.dir" location="${src.dir}/classes-gen" />
	<property name="src.classes-bootstrap.dir" location="${src.dir}/classes-bootstrap-dummies" />
	<property name="src.classes-build-tools.dir" location="${src.dir}/build-tools" />
	<property name="src.classes-unverified.dir" location="${src.dir}/classes-unverified-for-jre14" />
	<property name="src.test-accessors.dir" location="${src.dir}/test-accessors" />
	<property name="src.test-unit.dir" location="${src.dir}/test-unit" />
	<property name="src.test-system.dir" location="${src.dir}/test-system" />
	<property name="src.examples.dir" location="${src.dir}/examples" />
	<property name="src.doc.dir" location="${src.dir}/doc" />

	<!-- Targets -->

	<property name="javac.source" value="1.5" />
	<property name="javac.target" value="1.5" />

	<property name="build.dir" location="${basedir}/build" />
	<property name="build.classes.dir" location="${build.dir}/classes" />
	<property name="build.classes-unverified.dir" location="${build.dir}/classes-unverified-for-jre14" />
	<property name="build.classes-bootstrap.dir" location="${build.dir}/classes-bootstrap" />
	<property name="build.classes14.dir" location="${build.dir}/classes14" />
	<property name="build.test-unit.dir" location="${build.dir}/test-unit" />
	<property name="build.test-unit14.dir" location="${build.dir}/test-unit14" />
	<property name="build.test-system.dir" location="${build.dir}/test-system" />
	<property name="build.test-system14.dir" location="${build.dir}/test-system14" />
	<property name="build.examples.dir" location="${build.dir}/examples" />
	<property name="dist.dir" location="${basedir}/dist" />

	<property name="jar.file" location="${build.dir}/${name}.jar" />
	<property name="jar14.file" location="${build.dir}/${name}-jre1.4.jar" />
	<property name="jar.runtime.file" location="${build.dir}/${name}-runtime.jar" />
	<property name="jar14.runtime.file" location="${build.dir}/${name}-runtime-jre1.4.jar" />
	<property name="jar.src.file" location="${build.dir}/${name}-src.jar" />
	<property name="jar.doc.file" location="${build.dir}/${name}-doc.jar" />
	<!-- <property name="jar.manifest" location="${src.classes.dir}/manifest.mf" /> -->

	<property name="javadoc.dir" location="${doc.dir}/javadoc" />

	<path id="build.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>
	<property name="build.classpath" refid="build.classpath" />
	
	<path id="cite.path">
		<dirset dir="${src.classes.dir}"/>
		<dirset dir="${src.test-system.dir}"/>
		<dirset dir="${src.examples.dir}"/>
	</path>
	<property name="src.cite.path" refid="cite.path" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/incompatible/*" />
	</path>
	<property name="lib.classpath" refid="lib.classpath" />
	<property name="tools.classpath" refid="lib.classpath" />

	<property file="build.conf" />

	<!-- prepare -->

	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes.dir}" />
		<mkdir dir="${build.classes-unverified.dir}" />
		<mkdir dir="${build.classes-bootstrap.dir}" />
		<mkdir dir="${build.classes14.dir}" />

		<path id="run.classpath">
			<pathelement location="${conf.dir}" />
			<pathelement location="${build.classes.dir}" />
			<fileset dir="${lib.dir}" includes="**/*.jar" />
		</path>
		<property name="run.classpath" refid="run.classpath" />

		<path id="test.classpath">
			<pathelement location="${build.test-unit.dir}" />
			<pathelement location="${build.test-system.dir}" />
			<path refid="run.classpath" />
		</path>
		<property name="test.classpath" refid="test.classpath" />

		<path id="examples.classpath">
			<pathelement location="${build.examples.dir}" />
			<path refid="run.classpath" />
		</path>
		<property name="examples.classpath" refid="examples.classpath" />

		<tstamp>
			<format property="timestamp" pattern="yyyy/MM/dd HH:mm:ss z" locale="en" />
		</tstamp>
		<property name="dist.version.long" value="${dist.version} [${timestamp}]" />
	</target>

	<!-- generate scanners/parsers -->

	<taskdef classname="JFlex.anttask.JFlexTask" name="jflex" classpath="${lib.dir}/build-only/incompatible/JFlex.jar" />
	<taskdef classname="java_cup.anttask.CUPTask" name="cup" classpath="${lib.dir}/build-only/incompatible/java-cup-11a.jar" />
	
	<target name="lexgen">
		<loadfile property="lex.regexps" srcfile="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner${style}_RegExps.lex"></loadfile>
		<loadfile property="lex.scan" srcfile="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner${style}_Scan.lex"></loadfile>
		<copy 
			file="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner.lex"
			tofile="${src.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner${style}.lex"
			overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="cellstyle" value="${style}" />
					<token key="cellregexp" value="${lex.regexps}" />
					<token key="cellscan" value="${lex.scan}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>
	
	<target name="lexinput" depends="prepare">
		<antcall target="lexgen">
			<param name="style" value="A1"/>
		</antcall>
		<antcall target="lexgen">
			<param name="style" value="R1C1"/>
		</antcall>
		<antcall target="lexgen">
			<param name="style" value="Internal"/>
		</antcall>
	</target>

	<target name="lex" depends="prepare, lexinput">
		<jflex file="${src.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScannerA1.lex" destdir="${src.classes-gen.dir}" />
		<jflex file="${src.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScannerR1C1.lex" destdir="${src.classes-gen.dir}" />
		<jflex file="${src.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScannerInternal.lex" destdir="${src.classes-gen.dir}" />
	</target>

	<target name="cup" depends="prepare, lex">
		<cup srcfile="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionParser.cup" destdir="${src.classes-gen.dir}" 
			parser="GeneratedParser" 
			symbols="GeneratedSymbols"
			nopositions="true"
			nosummary="true"
			nowarn="true"
		/>
	</target>

	<!-- compile -->

	<target name="compile-unverified" depends="prepare" description="Compiles the source code unverified for JRE 1.4">
		<javac srcdir="${src.classes-unverified.dir}" destdir="${build.classes-unverified.dir}" classpath="${build.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
	</target>

	<target name="compile-bootstrap" depends="prepare, lex, cup, compile-unverified" description="Compiles the bootstrap source code">
		<delete failonerror="no">
			<fileset dir="${src.classes-gen.dir}/sej/internal/model/rewriting" includes="*.java" />
			<fileset dir="${src.classes-gen.dir}/sej/internal/bytecode/compiler" includes="*.java" />
		</delete>
		<javac srcdir="${src.classes.dir}:${src.classes-gen.dir}:${src.classes-bootstrap.dir}:${src.classes-build-tools.dir}" destdir="${build.classes-bootstrap.dir}" classpath="${tools.classpath}:${build.classes-unverified.dir}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
	</target>

	<target name="generate" depends="prepare, compile-bootstrap" description="Generates source code">
		<property name="tools-path" value="${tools.classpath}:${build.classes-bootstrap.dir}:${build.classes-unverified.dir}" />
		<java classpath="${tools-path}" classname="sej.internal.build.rewriting.RewriteRulesCompiler" />
		<java classpath="${tools-path}" classname="sej.internal.build.bytecode.PatternCompiler" fork="true" />
	</target>

	<target name="compile" depends="prepare, generate" description="Compiles the source code">
		<javac srcdir="${src.classes.dir}:${src.classes-gen.dir}" destdir="${build.classes.dir}" classpath="${build.classpath}:${build.classes-unverified.dir}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
	</target>

	<!-- compile14 -->

	<target name="compile14" depends="prepare, compile" description="Compiles the source code for JRE 1.4">

		<delete dir="${build.classes14.dir}" />
		<mkdir dir="${build.classes14.dir}"/>
		
		<java classname="net.sf.retrotranslator.transformer.Retrotranslator" classpath="${lib.classpath}" failonerror="yes">
			<arg value="-srcdir" />
			<arg file="${build.classes-unverified.dir}" />
			<arg value="-srcjar" />
			<arg file="${lib.dir}/build-only/retrotranslator-runtime-1.0.7.jar" />
			<arg value="-destdir" />
			<arg file="${build.classes14.dir}" />
			<arg value="-stripsign" />
			<arg value="-lazy" />
			<arg value="-advanced" />  <!-- support BigDecimal.setScale with negative scale -->
		</java>
	
		<java classname="net.sf.retrotranslator.transformer.Retrotranslator" classpath="${lib.classpath}" failonerror="yes">
			<arg value="-srcdir" />
			<arg file="${build.classes.dir}" />
			<arg value="-srcjar" />
			<arg file="${lib.dir}/build-only/retrotranslator-runtime-1.0.7.jar" />
			<arg value="-destdir" />
			<arg file="${build.classes14.dir}" />
			<arg value="-stripsign" />
			<arg value="-lazy" />
			<arg value="-verify" />
			<arg value="-classpath" />
			<arg value="${build.classes14.dir}" />
			<arg value="-classpath" />
			<arg value="${lib.classpath}" />
			<arg value="-classpath" />
			<arg value="${lib.dir}/build-only/backport-util-concurrent.jar" />
			<arg value="-classpath" />
			<arg value="${java14.home.dir}/lib/rt.jar" />
			<arg value="-advanced" />  <!-- support BigDecimal.setScale with negative scale -->
		</java>

	</target>

	<!-- jars -->

	<target name="jar" depends="compile" description="Creates the jar files">

		<delete file="${jar.file}" />
		<jar jarfile="${jar.file}" compress="true">
			<fileset dir="${build.classes.dir}" >
			</fileset>
			<fileset dir="${build.classes-unverified.dir}" >
			</fileset>
		</jar>

		<delete file="${jar.runtime.file}" />
		<jar jarfile="${jar.runtime.file}" compress="true">
			<fileset dir="${build.classes.dir}">
				<include name="sej/runtime/*.class" />
				<include name="sej/internal/runtime/*.class" />
				<include name="sej/internal/bytecode/runtime/*.class" />
			</fileset>
		</jar>

	</target>

	<target name="jar14" depends="compile14" description="Creates the jar files for Java 1.4">

		<delete file="${jar14.file}" />
		<jar jarfile="${jar14.file}" compress="true">
			<fileset dir="${build.classes14.dir}" >
				<exclude name="META-INF/**" />
			</fileset>
		</jar>

		<delete file="${jar14.runtime.file}" />
		<jar jarfile="${jar14.runtime.file}" compress="true">
			<fileset dir="${build.classes14.dir}">
				<include name="sej/runtime/*.class" />
				<include name="sej/internal/runtime/*.class" />
				<include name="sej/internal/bytecode/runtime/*.class" />
				<include name="net/sf/**" />
				<include name="*.txt" />
			</fileset>
		</jar>

	</target>

	<target name="srcjar" depends="prepare, validate, javadoc" description="Creates a jar file with the product source code in it">

		<delete file="${jar.src.file}" />
		<jar jarfile="${jar.src.file}" compress="true">
			<fileset dir="${src.classes.dir}" >
				<include name="**/*.java"/>
				<exclude name="net/sf/retrotranslator/**"/>
			</fileset>
			<fileset dir="${src.classes-gen.dir}" >
				<include name="**/*.java"/>
			</fileset>
		</jar>

		<delete file="${jar.doc.file}" />
		<jar jarfile="${jar.doc.file}" compress="true">
			<fileset dir="${javadoc.dir}" >
			</fileset>
		</jar>

	</target>

	<!-- test -->

	<target name="compile-tests" depends="prepare, compile">

		<mkdir dir="${build.test-unit.dir}" />
		<mkdir dir="${build.test-system.dir}" />

		<javac srcdir="${src.test-accessors.dir}" destdir="${build.test-unit.dir}" classpath="${test.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
		<javac srcdir="${src.test-unit.dir}" destdir="${build.test-unit.dir}" classpath="${test.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
		<javac srcdir="${src.test-system.dir}" destdir="${build.test-system.dir}" classpath="${test.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
	</target>

	<target name="test" depends="prepare, jar, compile-tests" description="Runs JUnit test suites">

		<delete dir="${build.dir}/temp/testresults" />
		<mkdir dir="${build.dir}/temp/testresults"/>
		
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpath="${lib.classpath}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="."
			tempdir="${build.dir}/temp" >
			
			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />
			
			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${build.test-unit.dir}" />
				<pathelement path="${build.test-system.dir}" />
				<pathelement location="${jar.file}" />
			</classpath>

			<batchtest todir="${build.dir}/temp/testresults">
				<fileset dir="${build.test-unit.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${build.test-system.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
			</batchtest>

		</junit>

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="."
			tempdir="${build.dir}/temp" >

			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />
			
			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${build.test-system.dir}" />
				<pathelement location="${jar.runtime.file}" />
			</classpath>

			<batchtest todir="${build.dir}/temp/testresults">
				<fileset dir="${build.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>

		</junit>

	</target>

	<!-- test14 -->

	<target name="compile-tests14" depends="compile-tests">

		<mkdir dir="${build.test-unit14.dir}" />
		<mkdir dir="${build.test-system14.dir}" />

		<java classname="net.sf.retrotranslator.transformer.Retrotranslator" classpath="${lib.classpath}:${build.classes14.dir}" failonerror="yes">
			<arg value="-srcdir" />
			<arg path="${build.test-unit.dir}" />
			<arg value="-destdir" />
			<arg path="${build.test-unit14.dir}" />
			<arg value="-stripsign" />
			<arg value="-lazy" />
		</java>

		<java classname="net.sf.retrotranslator.transformer.Retrotranslator" classpath="${lib.classpath}:${build.classes14.dir}" failonerror="yes">
			<arg value="-srcdir" />
			<arg path="${build.test-system.dir}" />
			<arg value="-destdir" />
			<arg path="${build.test-system14.dir}" />
			<arg value="-stripsign" />
			<arg value="-lazy" />
		</java>
	</target>

	<target name="test14" depends="prepare, jar14, compile-tests14" description="Runs JUnit test suites with JRE 1.4">
		
		<delete dir="${build.dir}/temp/testresults14" />
		<mkdir dir="${build.dir}/temp/testresults14"/>

		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpath="${test.classpath14}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" jvm="${java14.home.dir}\bin\java" dir="."
			tempdir="${build.dir}/temp" >
		
			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${build.test-unit14.dir}" />
				<pathelement path="${build.test-system14.dir}" />
				<pathelement location="${jar14.file}" />
				<pathelement location="${lib.dir}/build-only/backport-util-concurrent.jar" />
			</classpath>

			<batchtest todir="${build.dir}/temp/testresults14">
				<fileset dir="${build.test-unit14.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${build.test-system14.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
			</batchtest>

		</junit>

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" jvm="${java14.home.dir}\bin\java" dir="."
			tempdir="${build.dir}/temp" >
	
			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />
			
			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${build.test-system14.dir}" />
				<pathelement location="${jar14.runtime.file}" />
				<pathelement location="${lib.dir}/build-only/backport-util-concurrent.jar" />
			</classpath>

			<batchtest todir="${build.dir}/temp/testresults14">
				<fileset dir="${build.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>

		</junit>

	</target>

	<target name="dbg14" depends="prepare, jar14, compile-tests14" description="Debugs a single JRE 1.4 test case">

		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpath="${test.classpath14}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" jvm="${java14.home.dir}\bin\java" dir=".">

			<formatter type="plain" usefile="no" />
			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${build.test-unit14.dir}" />
				<pathelement path="${build.test-system14.dir}" />
				<pathelement location="${jar14.file}" />
				<pathelement location="${lib.dir}/build-only/backport-util-concurrent.jar" />
			</classpath>

			<batchtest>
				<fileset dir="${build.test-system14.dir}">
					<include name="sej/tutorials/Caching.class" />
				</fileset>
			</batchtest>

		</junit>

	</target>

	<!-- examples -->

	<target name="compile-examples" depends="prepare, compile">

		<mkdir dir="${build.examples.dir}" />

		<javac srcdir="${src.examples.dir}" destdir="${build.examples.dir}" classpath="${examples.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="**" />
		</javac>
	</target>

	<target name="examples" depends="compile-examples" description="Compiles examples">
	</target>

	<!-- build -->

	<target name="build" depends="jar,compile-tests,compile-examples" description="Builds the library target (default)">
	</target>

	<!-- validate -->

	<target name="validate" depends="prepare, dependencies, style" description="Validates source">
	</target>

	<!-- dependencies -->

	<path id="macker.classpath">
		<fileset dir="J:/macker-0.4.2/lib" />
		<fileset dir="J:/macker-0.4.2/build" />
	</path>

	<taskdef name="macker" classname="net.innig.macker.ant.MackerAntTask" classpathref="macker.classpath" />

	<target name="dependencies" depends="prepare, compile, compile-tests, compile-examples">
		<macker>
			<rules dir="${src.dir}" includes="macker-rules.xml" />
			<classes dir="${build.classes.dir}">
				<include name="**/*.class" />
				<exclude name="**/CUP*.class" />
			</classes>
			<classes dir="${build.test-system.dir}">
				<include name="**/*.class" />
			</classes>
			<classes dir="${build.examples.dir}">
				<include name="**/*.class" />
			</classes>
		</macker>
	</target>

	<!-- style -->

	<target name="style" depends="prepare" description="Runs checkstyle">
		<cs:checkstyle config="${src.dir}\checkstyle-config-apionly.xml">
			<fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
				<exclude name="sej/internal/**/*.java" />
			</fileset>
		</cs:checkstyle>
		<cs:checkstyle config="${src.dir}\checkstyle-config.xml">
			<property key="checkstyle.header.file" file="${src.dir}\copyright-header.txt" />
			<fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.test-unit.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.test-system.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.examples.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.classes-bootstrap.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.classes-build-tools.dir}">
				<include name="**/*.java" />
				<!--  the following two files have differing licences  -->
				<exclude name="sej/internal/build/Util.java" />
				<exclude name="sej/internal/build/bytecode/ASMHelpers.java" />
			</fileset>
		</cs:checkstyle>
	</target>

	<!-- redoc -->

	<target name="redoc" description="Rebuilds documentation - use with care!" depends="prepare">

		<delete dir="${doc.dir}" />
		<mkdir dir="${doc.dir}" />
		<copy todir="${doc.dir}">
			<fileset dir="${src.doc.dir}">
				<include name="**/*.gif" />
				<include name="**/*.jpeg" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.pdf" />
				<include name="**/*.svg" />
				<include name="**/*.html" />
				<include name="**/*.htm" />
				<include name="**/*.css" />
				<include name="**/*.js" />
			</fileset>
		</copy>

		<java classname="ch.arrenbrecht.jcite.JCite" classpath="${lib.classpath}" failonerror="yes">
			<arg value="-sp" />
			<arg path="${src.classes.dir}" />
			<arg value="-sp" />
			<arg path="${src.examples.dir}" />
			<arg value="-sp" />
			<arg path="${src.test-system.dir}" />
			<arg value="-sp" />
			<arg path="${build.dir}/temp/reference" />
			<arg value="-sp" />
			<arg path="${build.dir}/temp" />
			<arg value="-r" />
			<arg value="-i" />
			<arg file="${src.doc.dir}/*.htm" />
			<arg value="-o" />
			<arg file="${doc.dir}" />
		</java>

		<replace dir="${doc.dir}">
			<include name="**/*.htm" />
			<replacetoken><![CDATA[<a href="dist/]]></replacetoken>
			<replacevalue><![CDATA[<a href="../dist/]]></replacevalue>
		</replace>
	</target>

	<!-- javadoc -->

	<target name="javadoc" description="Builds javadoc" depends="prepare, redoc">

		<property name="javadoc.title" value="${Name} API ${dist.version.long}" />
		<delete dir="${javadoc.dir}" />
		<mkdir dir="${javadoc.dir}" />

		<javadoc 
			sourcepath="${src.classes.dir}" 
			destdir="${javadoc.dir}" 
			public="true" 
			windowtitle="${javadoc.title}" 
			use="true"
			packagenames="sej,sej.runtime,sej.describable,sej.expressions"
			additionalParam="-tagletPath ${lib.dir}/build-only/java2html.jar;${lib.dir}/build-only/jcite.jar;${lib.dir}/jxl.jar -taglet ch.arrenbrecht.jcite.JCiteTaglet -J-Djcitesourcepath=${src.cite.path}"
			stylesheetfile="${src.doc.dir}/plainstyle/style.css"
			overview="${src.classes.dir}/overview.html"
		>
			<classpath refid="build.classpath" />
			<link href="http://java.sun.com/j2se/1.5/docs/api/" />
		</javadoc>
		
		<copy todir="${javadoc.dir}">
			<fileset dir="${src.classes.dir}">
				<include name="**/*.gif" />
				<include name="**/*.jpeg" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.pdf" />
				<include name="**/*.svg" />
			</fileset>
		</copy>

	</target>

	<!-- doc -->

	<target name="doc" description="Builds documentation" depends="prepare, examples, test, redoc">
	</target>

	<!-- clean -->

	<target name="clean" description="Removes all build files">
		<delete dir="${doc.dir}" />
		<delete dir="${build.classes.dir}" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${src.classes-gen.dir}" />
		<mkdir dir="${src.classes-gen.dir}" />
		<mkdir dir="${build.dir}/dev" />  <!-- make Eclipse happy -->
	</target>

	<!-- pack -->

	<target name="pack" depends="prepare,redoc,javadoc" description="Packs existing distribution - use with care!!">
		<echo>Bundling dist: ${dist.version.long}</echo>
		<property name="dist.name" value="${name}-${dist.version}" />
		<property name="dist.file" value="${dist.dir}/${dist.name}" />

		<property name="dist.tmp.dir" value="${dist.dir}/tmp" />
		<property name="dist.staging.dir" value="${dist.tmp.dir}/${dist.name}" />

		<!-- binary -->
		<delete dir="${dist.tmp.dir}" />
		<mkdir dir="${dist.staging.dir}" />
		<copy todir="${dist.staging.dir}">
			<fileset dir="${basedir}">
				<include name="lib/*" />
				<include name="build/*.jar" />
				<exclude name="build/sej-src.jar" />
				<exclude name="build/sej-doc.jar" />
				<include name="*.html" />
				<include name="*.css" />
				<include name="doc/**" />
				<exclude name="**/.DS_Store" />
			</fileset>
		</copy>
		<copy todir="${dist.staging.dir}" overwrite="yes">
			<filterset>
				<filter token="dist.version" value="${dist.version}" />
				<filter token="dist.version.long" value="${dist.version.long}" />
			</filterset>
			<fileset dir="${basedir}" includes="README.html" />
		</copy>
		<!-- tar basedir="${dist.tmp.dir}" destfile="${dist.file}-bin.tar.gz" compression="gzip" longfile="gnu" / -->
		<zip basedir="${dist.tmp.dir}" destfile="${dist.file}-bin.zip" filesonly="no" />

		<!-- source -->
		<delete dir="${dist.tmp.dir}" />
		<mkdir dir="${dist.staging.dir}" />
		<copy todir="${dist.staging.dir}">
			<fileset dir="${basedir}">
				<include name="lib/*" />
				<include name="lib/build-only/*" />
				<include name="*.html" />
				<include name="*.css" />
				<include name="src/**" />
				<include name="build.xml" />
				<include name="build.conf" />
				<exclude name="**/.DS_Store" />
			</fileset>
		</copy>
		<copy todir="${dist.staging.dir}" overwrite="yes">
			<filterset>
				<filter token="dist.version" value="${dist.version}" />
				<filter token="dist.version.long" value="${dist.version.long}" />
			</filterset>
			<fileset dir="${basedir}" includes="README.html" />
		</copy>
		<!-- tar basedir="${dist.tmp.dir}" destfile="${dist.file}-src.tar.gz" compression="gzip" longfile="gnu" / -->
		<zip basedir="${dist.tmp.dir}" destfile="${dist.file}-src.zip" filesonly="no" />

		<delete dir="${dist.tmp.dir}" />

		<!-- zipped source -->
		<delete dir="${dist.tmp.dir}" />
		<mkdir dir="${dist.staging.dir}" />
		<copy todir="${dist.staging.dir}">
			<fileset dir="${basedir}">
				<include name="build/sej-src.jar" />
				<include name="build/sej-doc.jar" />
			</fileset>
		</copy>
		<copy todir="${dist.staging.dir}" overwrite="yes">
			<fileset dir="${basedir}" includes="LICENSE.html" />
		</copy>
		<!-- tar basedir="${dist.tmp.dir}" destfile="${dist.file}-srcjar.tar.gz" compression="gzip" longfile="gnu" / -->
		<zip basedir="${dist.tmp.dir}" destfile="${dist.file}-srcjar.zip" filesonly="no" />

		<delete dir="${dist.tmp.dir}" />
		
		<copy todir="${dist.dir}">
			<fileset dir="${src.test-system.dir}/testdata/sej" includes="Tests.xls" />
		</copy>
		
	</target>

	<!-- dist -->

	<target name="dist" depends="clean,compile,validate,jar,doc,javadoc,test,jar14,test14,examples,srcjar,pack" description="Builds distribution">
	</target>

	<!-- cover -->

	<target name="cover" depends="prepare, compile, compile-tests" description="Runs code coverage analysis">

		<property name="build.instr.dir" value="${build.dir}/temp/instrumented" />
		<property name="build.cover.dir" value="${build.dir}/coverage" />
		<property name="cober.file" value="${build.dir}/temp/cobertura.ser" />
		
		<taskdef classpath="${lib.dir}/build-only/cobertura.jar:${lib.classpath}" resource="tasks.properties"/>
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpath="${lib.classpath}" />

		<delete dir="${cober.file}" />
		<delete dir="${build.instr.dir}" />
		<delete dir="${build.cover.dir}" />

		<mkdir dir="${build.instr.dir}"/>
		<mkdir dir="${build.cover.dir}"/>
		
		<cobertura-instrument todir="${build.instr.dir}" datafile="${cober.file}" >
		    <fileset dir="${build.classes.dir}">
		        <include name="**/*.class"/>
		    </fileset>
		    <fileset dir="${build.classes-unverified.dir}">
		        <include name="**/*.class"/>
		    </fileset>
			<!--
		    <fileset dir="${build.test-unit.dir}">
		        <include name="**/*.class"/>
		    </fileset>
		    <fileset dir="${build.test-system.dir}">
		        <include name="**/*.class"/>
		    </fileset>
		    -->
		</cobertura-instrument>

		<delete dir="${build.dir}/temp/testresults" />
		<mkdir dir="${build.dir}/temp/testresults"/>
		
		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="."
			tempdir="${build.dir}/temp" >
			
			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cober.file}" />
			
			<classpath>
				<path refid="lib.classpath" />
				<pathelement path="${build.instr.dir}" />
				<pathelement path="${build.classes.dir}" />
				<pathelement path="${build.classes-unverified.dir}" />
				<pathelement path="${build.test-unit.dir}" />
				<pathelement path="${build.test-system.dir}" />
			</classpath>
			
			<sysproperty key="sej.tutorials.Caching.testSpeed.disabled" value="true" />

			<batchtest todir="${build.dir}/temp/testresults">
				<fileset dir="${build.test-unit.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${build.test-system.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
				<fileset dir="${build.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>

		</junit>

		<cobertura-report destdir="${build.cover.dir}" datafile="${cober.file}">
		    <fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
		    </fileset>
		    <fileset dir="${src.classes-unverified.dir}">
				<include name="**/*.java" />
		    </fileset>
			<!--
		    <fileset dir="${src.test-unit.dir}">
				<include name="**/*.java" />
		    </fileset>
		    <fileset dir="${src.test-system.dir}">
				<include name="**/*.java" />
		    </fileset>
		    -->
		</cobertura-report>
		
	</target>

	<!-- emma -->

	<target name="emma" depends="prepare, compile, compile-tests" description="Runs code coverage analysis">

		<property name="build.instr.dir" value="${build.dir}/temp/instrumented" />
		<property name="build.cover.dir" value="${build.dir}/coverage" />
		<property name="emma.meta.file" value="${build.dir}/temp/metadata.emma" />
		<property name="emma.run.file" value="${build.dir}/temp/rundata.emma" />
		
		<taskdef classpath="${lib.dir}/build-only/emma_ant.jar:${lib.classpath}" resource="emma_ant.properties"/>
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpath="${lib.classpath}" />

		<delete dir="${build.instr.dir}" />
		<delete dir="${build.cover.dir}" />
		<delete dir="${emma.meta.file}" />
		<delete dir="${emma.run.file}" />

		<mkdir dir="${build.instr.dir}"/>
		<mkdir dir="${build.cover.dir}"/>

	    <emma>
	      <instr destdir="${build.instr.dir}" metadatafile="${emma.meta.file}" merge="true" instrpath="${build.classes.dir}" />
	      <instr destdir="${build.instr.dir}" metadatafile="${emma.meta.file}" merge="true" instrpath="${build.classes-unverified.dir}" />
	    </emma>

		<delete dir="${build.dir}/temp/testresults" />
		<mkdir dir="${build.dir}/temp/testresults"/>
		
		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="."
			tempdir="${build.dir}/temp" >
			
			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<classpath>
				<path refid="lib.classpath" />
				<pathelement path="${build.instr.dir}" />
				<pathelement path="${build.classes.dir}" />
				<pathelement path="${build.classes-unverified.dir}" />
				<pathelement path="${build.test-unit.dir}" />
				<pathelement path="${build.test-system.dir}" />
			</classpath>
			
			<sysproperty key="sej.tutorials.Caching.testSpeed.disabled" value="true" />

			<batchtest todir="${build.dir}/temp/testresults">
				<fileset dir="${build.test-unit.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${build.test-system.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
				<fileset dir="${build.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>
			
			<jvmarg value="-Demma.coverage.out.file=${emma.run.file}" />
			<jvmarg value="-Demma.coverage.out.merge=false" />
		</junit>

	    <emma>
	      <report sourcepath="${src.classes.dir},${src.classes-unverified.dir}" >
	        <fileset file="${emma.meta.file}" />
	        <fileset file="${emma.run.file}" />
	        <html outfile="${build.cover.dir}/coverage.html" />
	      </report>
	    </emma>

		
	</target>


</project>
