<?xml version="1.0" encoding="UTF-8"?>
<project name="sej" default="build" basedir=".">
	<description>Builds, tests, and packages SEJ.</description>

	<property file="build.properties" />
	<property file="build.default.properties" />

	<property name="Name" value="SEJ" />
	<property name="name" value="sej" />
	<property name="dist.version" value="0.9.0" />

	<property name="src.dir" location="${basedir}/src" />
	<property name="lib.dir" location="${basedir}/lib" />
	<property name="doc.dir" location="${basedir}/doc" />
	<property name="src.classes.dir" location="${src.dir}/classes" />
	<property name="src.classes-bootstrap.dir" location="${src.dir}/classes-bootstrap-dummies" />
	<property name="src.classes-build-tools.dir" location="${src.dir}/build-tools" />
	<property name="src.test-accessors.dir" location="${src.dir}/test-accessors" />
	<property name="src.test-unit.dir" location="${src.dir}/test-unit" />
	<property name="src.test-system.dir" location="${src.dir}/test-system" />
	<property name="src.examples.dir" location="${src.dir}/examples" />
	<property name="src.doc.dir" location="${src.dir}/doc" />

	<property name="javac.source" value="1.5" />
	<property name="javac.target" value="1.5" />

	<property name="build.dir" location="${basedir}/build" />

	<property name="temp.dir" location="${basedir}/temp" />
	<property name="temp.classes.dir" location="${temp.dir}/classes/main" />
	<property name="temp.classes-bootstrap.dir" location="${temp.dir}/classes/bootstrap" />
	<property name="temp.test-unit.dir" location="${temp.dir}/classes/test-unit" />
	<property name="temp.test-system.dir" location="${temp.dir}/classes/test-system" />
	<property name="temp.examples.dir" location="${temp.dir}/classes/examples" />
	<property name="temp.classes-gen.dir" location="${temp.dir}/gen-src/classes" />
	<property name="temp.classes-gen-jre.dir" location="${temp.dir}/gen-src/classes-jre${ant.java.version}" />
	<property name="temp.testresults.dir" location="${temp.dir}/testresults" />
	<property name="temp.reference.dir" location="${temp.dir}/reference" />
	<property name="temp.doc.dir" location="${temp.dir}/doc" />

	<property name="dist.dir" location="${basedir}/dist" />

	<property name="jar.file" location="${build.dir}/${name}.jar" />
	<property name="jar.runtime.file" location="${build.dir}/${name}-runtime.jar" />
	<property name="jar.src.file" location="${build.dir}/${name}-src.jar" />
	<property name="jar.doc.file" location="${build.dir}/${name}-doc.jar" />
	<property name="javadoc.dir" location="${doc.dir}/javadoc" />

	<path id="build.classpath">
		<fileset dir="${lib.dir}" includes="*.jar" />
	</path>
	<property name="build.classpath" refid="build.classpath" />

	<path id="cite.path">
		<dirset dir="${src.classes.dir}" />
		<dirset dir="${src.test-system.dir}" />
		<dirset dir="${src.examples.dir}" />
	</path>
	<property name="src.cite.path" refid="cite.path" />

	<path id="lib.classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/incompatible/*" />
	</path>
	<property name="lib.classpath" refid="lib.classpath" />
	<property name="tools.classpath" refid="lib.classpath" />
	
	<!-- global taskdefs -->
	
	<taskdef name="jflex" classname="JFlex.anttask.JFlexTask" classpath="${lib.dir}/build-only/incompatible/JFlex.jar" />
	<taskdef name="cup" classname="java_cup.anttask.CUPTask" classpath="${lib.dir}/build-only/incompatible/java-cup-11a.jar" />

	<!-- prepare -->

	<target name="-prepare">
		<echo>Running on ${java.version}.</echo>
		
		<mkdir dir="${build.dir}" />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${temp.classes.dir}" />
		<mkdir dir="${temp.classes-bootstrap.dir}" />
		<mkdir dir="${temp.classes-gen.dir}" />
		<mkdir dir="${temp.classes-gen-jre.dir}" />

		<path id="run.classpath">
			<pathelement location="${temp.classes.dir}" />
			<fileset dir="${lib.dir}" includes="**/*.jar" />
		</path>
		<property name="run.classpath" refid="run.classpath" />

		<path id="test.classpath">
			<pathelement location="${temp.test-unit.dir}" />
			<pathelement location="${temp.test-system.dir}" />
			<path refid="run.classpath" />
		</path>
		<property name="test.classpath" refid="test.classpath" />

		<path id="examples.classpath">
			<pathelement location="${temp.examples.dir}" />
			<path refid="run.classpath" />
		</path>
		<property name="examples.classpath" refid="examples.classpath" />

		<tstamp>
			<format property="timestamp" pattern="yyyy/MM/dd HH:mm:ss z" locale="en" />
		</tstamp>
		<property name="dist.version.long" value="${dist.version} [${timestamp}]" />
	</target>

	<!-- generate scanners/parsers -->

	<target name="-lexgen">
		<loadfile property="lex.regexps" srcfile="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner${style}_RegExps.lex">
		</loadfile>
		<loadfile property="lex.scan" srcfile="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner${style}_Scan.lex">
		</loadfile>
		<copy file="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner.lex" tofile="${temp.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScanner${style}.lex" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="cellstyle" value="${style}" />
					<token key="cellregexp" value="${lex.regexps}" />
					<token key="cellscan" value="${lex.scan}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="-lexinput" depends="-prepare">
		<antcall target="-lexgen">
			<param name="style" value="A1" />
		</antcall>
		<antcall target="-lexgen">
			<param name="style" value="R1C1" />
		</antcall>
		<antcall target="-lexgen">
			<param name="style" value="Internal" />
		</antcall>
	</target>

	<target name="-lex" depends="-prepare, -lexinput">
		<jflex file="${temp.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScannerA1.lex" destdir="${temp.classes-gen.dir}" />
		<jflex file="${temp.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScannerR1C1.lex" destdir="${temp.classes-gen.dir}" />
		<jflex file="${temp.classes-gen.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionScannerInternal.lex" destdir="${temp.classes-gen.dir}" />
	</target>

	<target name="-cup" depends="-prepare">
		<cup srcfile="${src.classes.dir}/sej/internal/spreadsheet/loader/excel/ExcelExpressionParser.cup" destdir="${temp.classes-gen.dir}" parser="GeneratedParser" symbols="GeneratedSymbols" nopositions="true" nosummary="true" nowarn="true" />
	</target>
	
	<target name="generate-parsers" depends="-lex, -cup" description="Generates Java source for the expression parsers.">
	</target>

	<!-- compile -->

	<target name="-compile-bootstrap" depends="-prepare, generate-parsers">
		<delete failonerror="no">
			<fileset dir="${temp.classes-gen.dir}/sej/internal/model/util" includes="*.java" />
			<fileset dir="${temp.classes-gen.dir}/sej/internal/model/rewriting" includes="*.java" />
			<fileset dir="${temp.classes-gen-jre.dir}/sej/internal/bytecode/compiler" includes="*.java" />
		</delete>
		<javac srcdir="${src.classes.dir}:${temp.classes-gen.dir}:${src.classes-bootstrap.dir}:${src.classes-build-tools.dir}" destdir="${temp.classes-bootstrap.dir}" classpath="${tools.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
	</target>

	<target name="generate" depends="generate-parsers, -compile-bootstrap" description="Generates all non-hand written Java source code.">
		<property name="tools-path" value="${tools.classpath}:${temp.classes-bootstrap.dir}" />
		<java classpath="${tools-path}" classname="sej.internal.build.rewriting.RewriteRulesCompiler" />
		<java classpath="${tools-path}" classname="sej.internal.build.bytecode.PatternCompiler" fork="true" />
	</target>

	<target name="compile" depends="generate" description="Compiles the Java source code for sej.jar.">
		<javac srcdir="${src.classes.dir}:${temp.classes-gen-jre.dir}:${temp.classes-gen.dir}" destdir="${temp.classes.dir}" classpath="${build.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
			<!-- Not needed at runtime so far: -->
			<exclude name="sej/internal/spreadsheet/loader/excel/RewriteLanguageParser*" />
			<exclude name="sej/internal/spreadsheet/loader/excel/Generated*Internal*" />
		</javac>
	</target>

	<!-- jars -->

	<target name="jar" depends="compile" description="Creates sej.jar and sej-runtime.jar.">

		<delete file="${jar.file}" />
		<jar jarfile="${jar.file}" compress="true">
			<fileset dir="${temp.classes.dir}">
			</fileset>
		</jar>

		<delete file="${jar.runtime.file}" />
		<jar jarfile="${jar.runtime.file}" compress="true">
			<fileset dir="${temp.classes.dir}">
				<include name="sej/runtime/*.class" />
				<include name="sej/internal/runtime/*.class" />
				<include name="sej/internal/bytecode/runtime/*.class" />
			</fileset>
		</jar>

	</target>

	<target name="srcjar" depends="-prepare, validate, javadoc" description="Creates the source and documenation .jar files.">

		<delete file="${jar.src.file}" />
		<jar jarfile="${jar.src.file}" compress="true">
			<fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
				<exclude name="net/sf/retrotranslator/**" />
			</fileset>
			<fileset dir="${temp.classes-gen.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${temp.classes-gen-jre.dir}">
				<include name="**/*.java" />
			</fileset>
		</jar>

		<delete file="${jar.doc.file}" />
		<jar jarfile="${jar.doc.file}" compress="true">
			<fileset dir="${javadoc.dir}">
			</fileset>
		</jar>

	</target>

	<!-- test -->

	<target name="compile-tests" depends="compile" description="Compiles the Java source code for the automated tests.">

		<mkdir dir="${temp.test-unit.dir}" />
		<mkdir dir="${temp.test-system.dir}" />

		<javac srcdir="${src.test-accessors.dir}" destdir="${temp.test-unit.dir}" classpath="${test.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
		<javac srcdir="${src.test-unit.dir}" destdir="${temp.test-unit.dir}" classpath="${test.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
		<javac srcdir="${src.test-system.dir}" destdir="${temp.test-system.dir}" classpath="${test.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="sej/**" />
		</javac>
	</target>

	<target name="test" depends="jar, compile-tests" description="Compiles and runs all automated tests using sej.jar.">

		<delete dir="${temp.testresults.dir}" />
		<mkdir dir="${temp.testresults.dir}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="." tempdir="${temp.dir}">
			<jvmarg value="-Demit_tests"/>

			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${temp.test-unit.dir}" />
				<pathelement path="${temp.test-system.dir}" />
				<pathelement location="${jar.file}" />
			</classpath>

			<batchtest todir="${temp.testresults.dir}">
				<fileset dir="${temp.test-unit.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${temp.test-system.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/examples/*Demo.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
			</batchtest>

		</junit>

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="." tempdir="${temp.dir}">
			<jvmarg value="-Demit_tests"/>

			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${temp.test-system.dir}" />
				<pathelement location="${jar.runtime.file}" />
			</classpath>

			<batchtest todir="${temp.testresults.dir}">
				<fileset dir="${temp.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>

		</junit>

	</target>

	<target name="dbg" depends="jar, compile-tests" description="Runs a single automated test suite (for debugging purposes).">

		<delete dir="${temp.testresults.dir}" />
		<mkdir dir="${temp.testresults.dir}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="." tempdir="${temp.dir}">
			<jvmarg value="-Demit_tests"/>
			
			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<classpath>
				<path refid="build.classpath" />
				<pathelement path="${temp.test-unit.dir}" />
				<pathelement path="${temp.test-system.dir}" />
				<pathelement location="${jar.file}" />
			</classpath>

			<batchtest todir="${temp.testresults.dir}">
				<fileset dir="${temp.test-system.dir}">

					<!-- CHANGE HERE -->
					<include name="sej/tests/reference/FunctionIFTest.class" />

				</fileset>
			</batchtest>

		</junit>

	</target>

	<!-- examples -->

	<target name="compile-examples" depends="compile" description="Compiles the Java source code for the examples.">

		<mkdir dir="${temp.examples.dir}" />

		<javac srcdir="${src.examples.dir}" destdir="${temp.examples.dir}" classpath="${examples.classpath}" debug="true" deprecation="on" source="${javac.source}" target="${javac.target}">
			<include name="**" />
		</javac>
	</target>

	<!-- build -->

	<target name="build" depends="jar" description="Builds the default library target (jar).">
	</target>

	<!-- validate -->

	<target name="validate" depends="compile, compile-tests, compile-examples, dependencies, style" description="Validates the Java source code (compilation and static analysis).">
	</target>

	<!-- dependencies -->

	<target name="dependencies-only" depends="-prepare" description="Validates Java package dependencies of existing compiled source against src/macker-rules.xml.">

		<path id="macker.classpath">
			<pathelement path="${macker.jar}" />
			<fileset dir="${macker.lib.dir}" includes="*.jar" />
		</path>
		<taskdef name="macker" classname="net.innig.macker.ant.MackerAntTask" classpathref="macker.classpath" />

		<macker>
			<rules dir="${src.dir}" includes="macker-rules.xml" />
			<classes dir="${temp.classes.dir}">
				<include name="**/*.class" />
				<exclude name="**/CUP*.class" />
			</classes>
			<classes dir="${temp.test-system.dir}">
				<include name="**/*.class" />
			</classes>
			<classes dir="${temp.examples.dir}">
				<include name="**/*.class" />
			</classes>
		</macker>
	</target>

	<target name="dependencies" depends="compile, compile-tests, compile-examples, dependencies-only" description="Validates Java package dependencies against src/macker-rules.xml.">
	</target>

	<!-- style -->

	<target name="style" depends="-prepare" description="Validates Java source code style against src/checkstyle-config.xml.">

		<taskdef resource="checkstyletask.properties" classpath="${checkstyle-all.jar}" />
		
		<checkstyle config="${src.dir}\checkstyle-config-apionly.xml">
			<fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
				<exclude name="sej/internal/**/*.java" />
			</fileset>
		</checkstyle>
		<checkstyle config="${src.dir}\checkstyle-config.xml">
			<property key="checkstyle.header.file" file="${src.dir}\copyright-header.txt" />
			<fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.test-unit.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.test-system.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.examples.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.classes-bootstrap.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.classes-build-tools.dir}">
				<include name="**/*.java" />
				<!--  the following two files have differing licences  -->
				<exclude name="sej/internal/build/Util.java" />
				<exclude name="sej/internal/build/bytecode/ASMHelpers.java" />
			</fileset>
		</checkstyle>
	</target>

	<!-- rextile -->

	<target name="rextile" depends="-prepare" description="Rebuilds documentation in doc/ from Rextile sources (does not cite).">

		<delete dir="${temp.doc.dir}" />
		<mkdir dir="${temp.doc.dir}" />
		<copy todir="${temp.doc.dir}">
			<fileset dir="${src.doc.dir}">
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${temp.doc.dir}/reference">
			<fileset dir="${temp.reference.dir}">
				<include name="**/*.rextile" />
			</fileset>
		</copy>
		
		<delete dir="${doc.dir}" />
		<mkdir dir="${doc.dir}" />
		<copy todir="${doc.dir}">
			<fileset dir="${temp.doc.dir}">
				<include name="**/*.gif" />
				<include name="**/*.jpeg" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.pdf" />
				<include name="**/*.svg" />
				<include name="**/*.html" />
				<include name="**/*.css" />
				<include name="**/*.js" />
			</fileset>
			<fileset file="${basedir}\LICENSE.html" />
		</copy>

		<exec dir="${temp.doc.dir}" executable="${rextile.launch}" vmlauncher="false" failonerror="true" >
		</exec>

	</target>

	<!-- cite -->

	<target name="cite" depends="-prepare" description="Cites code fragments into documentation in doc/ (needs successful test run).">

		<path id="jcite.classpath">
			<fileset dir="${jcite.build.dir}"  includes="*.jar" />
			<fileset dir="${jcite.lib.dir}" includes="*.jar" />
		</path>
		
		<java classname="ch.arrenbrecht.jcite.JCite" classpathref="jcite.classpath" failonerror="yes">
			<arg value="-sp" />
			<arg path="${src.classes.dir}" />
			<arg value="-sp" />
			<arg path="${src.examples.dir}" />
			<arg value="-sp" />
			<arg path="${src.test-system.dir}" />
			<arg value="-sp" />
			<arg path="${src.classes-build-tools.dir}" />
			<arg value="-sp" />
			<arg path="${src.dir}/debug" />
			<arg value="-sp" />
			<arg path="${src.dir}/scratchpad" />
			<arg value="-sp" />
			<arg path="${temp.reference.dir}" />
			<arg value="-sp" />
			<arg path="${temp.dir}/decompiled" />
			<arg value="-sp" />
			<arg path="${temp.dir}" />
			<arg value="-r" />
			<arg value="-i" />
			<arg file="${doc.dir}/*.htm" />
			<arg value="-o" />
			<arg file="${doc.dir}" />
		</java>

		<java classname="ch.arrenbrecht.jcite.JCite" classpathref="jcite.classpath" failonerror="yes">
			<arg value="-sp" />
			<arg path="${src.classes.dir}" />
			<arg value="-sp" />
			<arg path="${src.examples.dir}" />
			<arg value="-sp" />
			<arg path="${src.test-system.dir}" />
			<arg value="-sp" />
			<arg path="${src.classes-build-tools.dir}" />
			<arg value="-sp" />
			<arg path="${src.dir}/debug" />
			<arg value="-sp" />
			<arg path="${src.dir}/scratchpad" />
			<arg value="-sp" />
			<arg path="${temp.reference.dir}" />
			<arg value="-sp" />
			<arg path="${temp.dir}" />
			<arg value="-r" />
			<arg value="-i" />
			<arg file="${doc.dir}/*.xhtml" />
			<arg value="-o" />
			<arg file="${doc.dir}" />
		</java>

	</target>

	<!-- javadoc -->

	<target name="javadoc" depends="-prepare" description="Rebuilds API documentation in doc/javadoc/.">

		<property name="javadoc.title" value="${Name} API ${dist.version.long}" />
		<delete dir="${javadoc.dir}" />
		<mkdir dir="${javadoc.dir}" />

		<javadoc sourcepath="${src.classes.dir}" destdir="${javadoc.dir}" public="true" windowtitle="${javadoc.title}" use="true" 
			packagenames="sej,sej.runtime,sej.describable,sej.expressions" 
			additionalParam="-tagletPath ${jcite.build.dir}/jcite.jar;${jcite.lib.dir}/java2html.jar -taglet ch.arrenbrecht.jcite.JCiteTaglet -J-Djcitesourcepath=${src.cite.path}" 
			stylesheetfile="${src.doc.dir}/javadoc/style.css" 
			overview="${src.classes.dir}/overview.html">
			<classpath refid="build.classpath" />
			<link href="http://java.sun.com/j2se/1.5/docs/api/" />
		</javadoc>

		<copy todir="${javadoc.dir}">
			<fileset dir="${src.classes.dir}">
				<include name="**/*.gif" />
				<include name="**/*.jpeg" />
				<include name="**/*.jpg" />
				<include name="**/*.png" />
				<include name="**/*.pdf" />
				<include name="**/*.svg" />
			</fileset>
		</copy>

	</target>

	<!-- doc -->

	<target name="doc" depends="compile-examples, test, rextile, cite, javadoc" description="Rebuilds entire documentation in doc/ (runs tests first).">
	</target>

	<!-- clean -->

	<target name="clean" description="Removes all temporary files (temp/).">
		<delete dir="${temp.dir}" />
	</target>

	<!-- clobber -->

	<target name="clobber" depends="clean" description="Removes all temporary and built files (temp/, doc/, build/, dist/).">
		<delete dir="${doc.dir}" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- pack -->

	<target name="pack" depends="-prepare" description="Rebuilds distribution packages from built files (needs build/, doc/).">
		<echo>Bundling dist: ${dist.version}</echo>
		<mkdir dir="${dist.dir}" />
		<property name="dist.name" value="${name}-${dist.version}" />
		<property name="dist.file" value="${dist.dir}/${dist.name}" />

		<property name="dist.tmp.dir" value="${temp.dir}/dist" />
		<property name="dist.staging.dir" value="${dist.tmp.dir}/${dist.name}" />

		<!-- binary -->
		<delete dir="${dist.tmp.dir}" />
		<mkdir dir="${dist.staging.dir}" />
		<copy todir="${dist.staging.dir}">
			<fileset dir="${basedir}">
				<include name="lib/*" />
				<include name="build/*.jar" />
				<exclude name="build/sej-src.jar" />
				<exclude name="build/sej-doc.jar" />
				<include name="*.html" />
				<include name="*.css" />
				<include name="doc/**" />
				<exclude name="**/.DS_Store" />
			</fileset>
		</copy>
		<copy todir="${dist.staging.dir}" overwrite="yes">
			<filterset>
				<filter token="dist.version" value="${dist.version}" />
				<filter token="dist.version.long" value="${dist.version.long}" />
			</filterset>
			<fileset dir="${basedir}" includes="README.html" />
		</copy>
		<!-- tar basedir="${dist.tmp.dir}" destfile="${dist.file}-bin.tar.gz" compression="gzip" longfile="gnu" / -->
		<zip basedir="${dist.tmp.dir}" destfile="${dist.file}-bin.zip" filesonly="no" />

		<!-- source -->
		<delete dir="${dist.tmp.dir}" />
		<mkdir dir="${dist.staging.dir}" />
		<copy todir="${dist.staging.dir}">
			<fileset dir="${basedir}">
				<include name="lib/*" />
				<include name="lib/build-only/*" />
				<include name="*.html" />
				<include name="*.css" />
				<include name="src/**" />
				<include name="build.xml" />
				<include name="build.default.properties" />
				<include name=".project" />
				<include name=".classpath" />
				<include name=".settings/**" />
				<exclude name="**/.DS_Store" />
			</fileset>
		</copy>
		<copy todir="${dist.staging.dir}" overwrite="yes">
			<filterset>
				<filter token="dist.version" value="${dist.version}" />
				<filter token="dist.version.long" value="${dist.version.long}" />
			</filterset>
			<fileset dir="${basedir}" includes="README.html" />
		</copy>
		<!-- tar basedir="${dist.tmp.dir}" destfile="${dist.file}-src.tar.gz" compression="gzip" longfile="gnu" / -->
		<zip basedir="${dist.tmp.dir}" destfile="${dist.file}-src.zip" filesonly="no" />

		<delete dir="${dist.tmp.dir}" />

		<!-- zipped source -->
		<delete dir="${dist.tmp.dir}" />
		<mkdir dir="${dist.staging.dir}" />
		<copy todir="${dist.staging.dir}">
			<fileset dir="${basedir}">
				<include name="build/sej-src.jar" />
				<include name="build/sej-doc.jar" />
			</fileset>
		</copy>
		<copy todir="${dist.staging.dir}" overwrite="yes">
			<fileset dir="${basedir}" includes="LICENSE.html" />
		</copy>
		<!-- tar basedir="${dist.tmp.dir}" destfile="${dist.file}-srcjar.tar.gz" compression="gzip" longfile="gnu" / -->
		<zip basedir="${dist.tmp.dir}" destfile="${dist.file}-srcjar.zip" filesonly="no" />

		<delete dir="${dist.tmp.dir}" />
	</target>

	<!-- dist -->

	<target name="dist" depends="clobber,test,validate,doc,jar,srcjar,pack" description="Rebuilds distribution packages from scratch. Run this for a clean package build.">
	</target>

	<!-- cover -->

	<target name="cover" depends="compile, compile-tests" description="Runs code coverage analysis using Cobertura (output in temp/coverage/).">

		<path id="cobertura.classpath">
			<pathelement path="${cobertura.jar}" />
			<fileset dir="${cobertura.lib.dir}" includes="*.jar" />
		</path>
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

		<property name="temp.instr.dir" value="${temp.dir}/classes/instrumented" />
		<property name="temp.cover.dir" value="${temp.dir}/coverage" />
		<property name="cober.file" value="${temp.dir}/cobertura.ser" />

		<delete dir="${cober.file}" />
		<delete dir="${temp.instr.dir}" />
		<delete dir="${temp.cover.dir}" />

		<mkdir dir="${temp.instr.dir}" />
		<mkdir dir="${temp.cover.dir}" />

		<cobertura-instrument todir="${temp.instr.dir}" datafile="${cober.file}">
			<fileset dir="${temp.classes.dir}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>

		<delete dir="${temp.testresults.dir}" />
		<mkdir dir="${temp.testresults.dir}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="." tempdir="${temp.dir}">

			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<sysproperty key="net.sourceforge.cobertura.datafile" file="${cober.file}" />

			<classpath>
				<path refid="lib.classpath" />
				<path refid="cobertura.classpath" />
				<pathelement path="${temp.instr.dir}" />
				<pathelement path="${temp.classes.dir}" />
				<pathelement path="${temp.test-unit.dir}" />
				<pathelement path="${temp.test-system.dir}" />
			</classpath>

			<sysproperty key="sej.tutorials.Caching.testSpeed.disabled" value="true" />

			<batchtest todir="${temp.testresults.dir}">
				<fileset dir="${temp.test-unit.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${temp.test-system.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
				<fileset dir="${temp.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>

		</junit>

		<cobertura-report destdir="${temp.cover.dir}" datafile="${cober.file}">
			<fileset dir="${src.classes.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>

	</target>

	<!-- emma -->

	<target name="emma" depends="compile, compile-tests" description="Runs code coverage analysis using Emma (output in temp/coverage/).">

		<path id="emma.classpath">
			<fileset dir="${emma.lib.dir}" includes="*.jar" />
		</path>
		<taskdef classpathref="emma.classpath" resource="emma_ant.properties" />

		<property name="temp.instr.dir" value="${temp.dir}/instrumented" />
		<property name="temp.cover.dir" value="${temp.dir}/coverage" />
		<property name="emma.meta.file" value="${temp.dir}/metadata.emma" />
		<property name="emma.run.file" value="${temp.dir}/rundata.emma" />

		<delete dir="${temp.instr.dir}" />
		<delete dir="${temp.cover.dir}" />
		<delete dir="${emma.meta.file}" />
		<delete dir="${emma.run.file}" />

		<mkdir dir="${temp.instr.dir}" />
		<mkdir dir="${temp.cover.dir}" />

		<emma>
			<instr destdir="${temp.instr.dir}" metadatafile="${emma.meta.file}" merge="true" instrpath="${temp.classes.dir}">
			</instr>
		</emma>

		<delete dir="${temp.testresults.dir}" />
		<mkdir dir="${temp.testresults.dir}" />

		<junit printsummary="no" showoutput="no" haltonerror="yes" haltonfailure="yes" fork="yes" forkmode="once" dir="." tempdir="${temp.dir}">

			<assertions enablesystemassertions="yes" />

			<formatter type="plain" usefile="yes" />

			<classpath>
				<path refid="lib.classpath" />
				<path refid="emma.classpath" />
				<pathelement path="${temp.instr.dir}" />
				<pathelement path="${temp.classes.dir}" />
				<pathelement path="${temp.test-unit.dir}" />
				<pathelement path="${temp.test-system.dir}" />
			</classpath>

			<sysproperty key="sej.tutorials.Caching.testSpeed.disabled" value="true" />

			<batchtest todir="${temp.testresults.dir}">
				<fileset dir="${temp.test-unit.dir}">
					<include name="**/*Test.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
				<fileset dir="${temp.test-system.dir}">
					<include name="**/*Test*.class" />
					<include name="sej/tutorials/*.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
					<exclude name="**/*DeserializationTest.class" />
				</fileset>
				<fileset dir="${temp.test-system.dir}">
					<include name="**/*DeserializationTest.class" />
					<exclude name="**/Abstract*" />
					<exclude name="**/*$*" />
				</fileset>
			</batchtest>

			<jvmarg value="-Demma.coverage.out.file=${emma.run.file}" />
			<jvmarg value="-Demma.coverage.out.merge=false" />
		</junit>

		<emma>
			<report sourcepath="${src.classes.dir}">
				<fileset file="${emma.meta.file}" />
				<fileset file="${emma.run.file}" />
				<html outfile="${temp.cover.dir}/coverage.html" />
			</report>
		</emma>


	</target>


</project>
