
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 04 16:21:05 CEST 2006
//----------------------------------------------------

package sej.loader.excel;

import java.util.Collection;
import java.util.ArrayList;
import java_cup.runtime.*;
import sej.engine.*;
import sej.engine.expressions.*;
import sej.model.*;

/** CUP v0.10k generated parser.
  * @version Tue Apr 04 16:21:05 CEST 2006
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\012\000" +
    "\002\004\006\000\002\004\006\000\002\004\011\000\002" +
    "\004\010\000\002\004\010\000\002\005\002\000\002\005" +
    "\003\000\002\006\004\000\002\007\002\000\002\007\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\004\000" +
    "\002\012\005\000\002\012\006\000\002\012\004\000\002" +
    "\012\006\000\002\012\005\000\002\013\005\000\002\014" +
    "\005\000\002\014\006\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\015\003\000\002" +
    "\015\005\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\050\005\027\015\014\016\021\030\020\031" +
    "\004\032\010\033\016\034\015\035\013\036\012\037\030" +
    "\040\031\041\033\042\032\043\023\044\011\045\022\046" +
    "\024\047\006\001\002\000\004\016\uffd1\001\002\000\042" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\017\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\001\002\000\050\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\147\017\uffe1\020\146\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\001\002\000\036" +
    "\002\001\004\044\005\036\006\051\007\045\010\052\011" +
    "\040\012\043\022\042\023\037\024\041\025\046\026\050" +
    "\027\053\001\002\000\004\016\uffd0\001\002\000\042\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\017\uffff\022\uffff\023\uffff\024\uffff\025" +
    "\uffff\026\uffff\027\uffff\001\002\000\004\016\uffd4\001\002" +
    "\000\004\016\uffd5\001\002\000\004\047\142\001\002\000" +
    "\004\016\uffd6\001\002\000\004\016\137\001\002\000\044" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\001\002\000\004\016" +
    "\130\001\002\000\050\005\027\015\014\016\021\030\020" +
    "\031\004\032\010\033\016\034\015\035\013\036\012\037" +
    "\030\040\031\041\033\042\032\043\023\044\011\045\022" +
    "\046\024\047\006\001\002\000\042\002\ufffe\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe" +
    "\017\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027" +
    "\ufffe\001\002\000\004\016\121\001\002\000\042\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\013\ufffd\017\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd" +
    "\026\ufffd\027\ufffd\001\002\000\004\016\113\001\002\000" +
    "\004\002\112\001\002\000\050\005\027\015\014\016\021" +
    "\030\020\031\004\032\010\033\016\034\015\035\013\036" +
    "\012\037\030\040\031\041\033\042\032\043\023\044\011" +
    "\045\022\046\024\047\006\001\002\000\004\016\uffd3\001" +
    "\002\000\004\016\uffd2\001\002\000\004\016\104\001\002" +
    "\000\004\016\034\001\002\000\050\005\027\015\014\016" +
    "\021\030\020\031\004\032\010\033\016\034\015\035\013" +
    "\036\012\037\030\040\031\041\033\042\032\043\023\044" +
    "\011\045\022\046\024\047\006\001\002\000\036\004\044" +
    "\005\036\006\051\007\045\010\052\011\040\012\043\013" +
    "\047\022\042\023\037\024\041\025\046\026\050\027\053" +
    "\001\002\000\050\005\027\015\014\016\021\030\020\031" +
    "\004\032\010\033\016\034\015\035\013\036\012\037\030" +
    "\040\031\041\033\042\032\043\023\044\011\045\022\046" +
    "\024\047\006\001\002\000\050\005\027\015\014\016\021" +
    "\030\020\031\004\032\010\033\016\034\015\035\013\036" +
    "\012\037\030\040\031\041\033\042\032\043\023\044\011" +
    "\045\022\046\024\047\006\001\002\000\042\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\017\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\001\002\000\050\005\027\015\014\016\021" +
    "\030\020\031\004\032\010\033\016\034\015\035\013\036" +
    "\012\037\030\040\031\041\033\042\032\043\023\044\011" +
    "\045\022\046\024\047\006\001\002\000\050\005\027\015" +
    "\014\016\021\030\020\031\004\032\010\033\016\034\015" +
    "\035\013\036\012\037\030\040\031\041\033\042\032\043" +
    "\023\044\011\045\022\046\024\047\006\001\002\000\050" +
    "\005\027\015\014\016\021\030\020\031\004\032\010\033" +
    "\016\034\015\035\013\036\012\037\030\040\031\041\033" +
    "\042\032\043\023\044\011\045\022\046\024\047\006\001" +
    "\002\000\050\005\027\015\014\016\021\030\020\031\004" +
    "\032\010\033\016\034\015\035\013\036\012\037\030\040" +
    "\031\041\033\042\032\043\023\044\011\045\022\046\024" +
    "\047\006\001\002\000\050\005\027\015\014\016\021\030" +
    "\020\031\004\032\010\033\016\034\015\035\013\036\012" +
    "\037\030\040\031\041\033\042\032\043\023\044\011\045" +
    "\022\046\024\047\006\001\002\000\050\005\027\015\014" +
    "\016\021\030\020\031\004\032\010\033\016\034\015\035" +
    "\013\036\012\037\030\040\031\041\033\042\032\043\023" +
    "\044\011\045\022\046\024\047\006\001\002\000\050\005" +
    "\027\015\014\016\021\030\020\031\004\032\010\033\016" +
    "\034\015\035\013\036\012\037\030\040\031\041\033\042" +
    "\032\043\023\044\011\045\022\046\024\047\006\001\002" +
    "\000\050\005\027\015\014\016\021\030\020\031\004\032" +
    "\010\033\016\034\015\035\013\036\012\037\030\040\031" +
    "\041\033\042\032\043\023\044\011\045\022\046\024\047" +
    "\006\001\002\000\050\005\027\015\014\016\021\030\020" +
    "\031\004\032\010\033\016\034\015\035\013\036\012\037" +
    "\030\040\031\041\033\042\032\043\023\044\011\045\022" +
    "\046\024\047\006\001\002\000\050\005\027\015\014\016" +
    "\021\030\020\031\004\032\010\033\016\034\015\035\013" +
    "\036\012\037\030\040\031\041\033\042\032\043\023\044" +
    "\011\045\022\046\024\047\006\001\002\000\050\005\027" +
    "\015\014\016\021\030\020\031\004\032\010\033\016\034" +
    "\015\035\013\036\012\037\030\040\031\041\033\042\032" +
    "\043\023\044\011\045\022\046\024\047\006\001\002\000" +
    "\042\002\ufff0\004\044\005\036\006\051\007\045\010\052" +
    "\011\040\012\043\013\ufff0\017\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\001\002\000\042\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\040\012" +
    "\ufff5\013\ufff5\017\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\027\ufff5\001\002\000\042\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\052\011\040\012\ufff7\013\ufff7" +
    "\017\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\001\002\000\042\002\ufff1\004\044\005\036\006\051" +
    "\007\045\010\052\011\040\012\043\013\ufff1\017\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\001\002" +
    "\000\042\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\072\017\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\001\002\000\040\004" +
    "\044\005\036\006\051\007\045\010\052\011\040\012\043" +
    "\013\uffcc\017\uffcc\022\042\023\037\024\041\025\046\026" +
    "\050\027\053\001\002\000\006\013\uffcd\017\uffcd\001\002" +
    "\000\006\013\065\017\uffe3\001\002\000\004\017\uffe2\001" +
    "\002\000\054\005\027\013\uffe6\015\014\016\021\017\uffe6" +
    "\030\020\031\004\032\010\033\016\034\015\035\013\036" +
    "\012\037\030\040\031\041\033\042\032\043\023\044\011" +
    "\045\022\046\024\047\006\001\002\000\004\017\067\001" +
    "\002\000\042\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\017\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\001\002\000\040" +
    "\004\044\005\036\006\051\007\045\010\052\011\040\012" +
    "\043\013\uffe5\017\uffe5\022\042\023\037\024\041\025\046" +
    "\026\050\027\053\001\002\000\006\013\uffe4\017\uffe4\001" +
    "\002\000\006\015\014\047\006\001\002\000\006\013\uffd9" +
    "\017\uffd9\001\002\000\042\002\uffee\004\044\005\036\006" +
    "\051\007\045\010\052\011\040\012\043\013\uffee\017\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\001" +
    "\002\000\042\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\052\011\040\012\ufff6\013\ufff6\017\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\001\002\000\042" +
    "\002\ufff9\004\ufff9\005\ufff9\006\051\007\045\010\052\011" +
    "\040\012\ufff9\013\ufff9\017\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\001\002\000\042\002\ufffa\004" +
    "\044\005\036\006\051\007\045\010\052\011\040\012\ufffa" +
    "\013\ufffa\017\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\001\002\000\042\002\ufff3\004\044\005\036" +
    "\006\051\007\045\010\052\011\040\012\043\013\ufff3\017" +
    "\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3" +
    "\001\002\000\042\002\uffef\004\044\005\036\006\051\007" +
    "\045\010\052\011\040\012\043\013\uffef\017\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\001\002\000" +
    "\042\002\ufff2\004\044\005\036\006\051\007\045\010\052" +
    "\011\040\012\043\013\ufff2\017\ufff2\022\ufff2\023\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\027\ufff2\001\002\000\042\002\ufff8" +
    "\004\ufff8\005\ufff8\006\051\007\045\010\052\011\040\012" +
    "\ufff8\013\ufff8\017\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\001\002\000\050\005\027\015\014\016" +
    "\021\030\020\031\004\032\010\033\016\034\015\035\013" +
    "\036\012\037\030\040\031\041\033\042\032\043\023\044" +
    "\011\045\022\046\024\047\006\001\002\000\004\013\065" +
    "\001\002\000\006\013\065\017\uffe3\001\002\000\004\017" +
    "\110\001\002\000\042\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\017\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\001\002" +
    "\000\042\002\ufffb\004\ufffb\005\ufffb\006\051\007\045\010" +
    "\052\011\040\012\ufffb\013\ufffb\017\ufffb\022\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\001\002\000\004\002" +
    "\000\001\002\000\050\005\027\015\014\016\021\030\020" +
    "\031\004\032\010\033\016\034\015\035\013\036\012\037" +
    "\030\040\031\041\033\042\032\043\023\044\011\045\022" +
    "\046\024\047\006\001\002\000\006\013\116\017\117\001" +
    "\002\000\006\013\uffcf\017\uffcf\001\002\000\050\005\027" +
    "\015\014\016\021\030\020\031\004\032\010\033\016\034" +
    "\015\035\013\036\012\037\030\040\031\041\033\042\032" +
    "\043\023\044\011\045\022\046\024\047\006\001\002\000" +
    "\042\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\017\uffea\022\uffea\023\uffea\024" +
    "\uffea\025\uffea\026\uffea\027\uffea\001\002\000\006\013\uffce" +
    "\017\uffce\001\002\000\050\005\027\015\014\016\021\030" +
    "\020\031\004\032\010\033\016\034\015\035\013\036\012" +
    "\037\030\040\031\041\033\042\032\043\023\044\011\045" +
    "\022\046\024\047\006\001\002\000\036\004\044\005\036" +
    "\006\051\007\045\010\052\011\040\012\043\013\123\022" +
    "\042\023\037\024\041\025\046\026\050\027\053\001\002" +
    "\000\050\005\027\015\014\016\021\030\020\031\004\032" +
    "\010\033\016\034\015\035\013\036\012\037\030\040\031" +
    "\041\033\042\032\043\023\044\011\045\022\046\024\047" +
    "\006\001\002\000\036\004\044\005\036\006\051\007\045" +
    "\010\052\011\040\012\043\017\125\022\042\023\037\024" +
    "\041\025\046\026\050\027\053\001\002\000\042\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\017\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\001\002\000\036\004\044\005\036\006" +
    "\051\007\045\010\052\011\040\012\043\017\127\022\042" +
    "\023\037\024\041\025\046\026\050\027\053\001\002\000" +
    "\042\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\011\uffed\012\uffed\013\uffed\017\uffed\022\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\001\002\000\050\005\027" +
    "\015\014\016\021\030\020\031\004\032\010\033\016\034" +
    "\015\035\013\036\012\037\030\040\031\041\033\042\032" +
    "\043\023\044\011\045\022\046\024\047\006\001\002\000" +
    "\036\004\044\005\036\006\051\007\045\010\052\011\040" +
    "\012\043\013\132\022\042\023\037\024\041\025\046\026" +
    "\050\027\053\001\002\000\050\005\027\015\014\016\021" +
    "\030\020\031\004\032\010\033\016\034\015\035\013\036" +
    "\012\037\030\040\031\041\033\042\032\043\023\044\011" +
    "\045\022\046\024\047\006\001\002\000\036\004\044\005" +
    "\036\006\051\007\045\010\052\011\040\012\043\013\134" +
    "\022\042\023\037\024\041\025\046\026\050\027\053\001" +
    "\002\000\050\005\027\015\014\016\021\030\020\031\004" +
    "\032\010\033\016\034\015\035\013\036\012\037\030\040" +
    "\031\041\033\042\032\043\023\044\011\045\022\046\024" +
    "\047\006\001\002\000\036\004\044\005\036\006\051\007" +
    "\045\010\052\011\040\012\043\017\136\022\042\023\037" +
    "\024\041\025\046\026\050\027\053\001\002\000\042\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\013\uffec\017\uffec\022\uffec\023\uffec\024\uffec\025" +
    "\uffec\026\uffec\027\uffec\001\002\000\050\005\027\015\014" +
    "\016\021\030\020\031\004\032\010\033\016\034\015\035" +
    "\013\036\012\037\030\040\031\041\033\042\032\043\023" +
    "\044\011\045\022\046\024\047\006\001\002\000\036\004" +
    "\044\005\036\006\051\007\045\010\052\011\040\012\043" +
    "\017\141\022\042\023\037\024\041\025\046\026\050\027" +
    "\053\001\002\000\042\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\017\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\001\002" +
    "\000\046\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\143\017\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\001" +
    "\002\000\004\044\144\001\002\000\044\002\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\014\uffdb\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\001\002\000\046\002\uffdf\004\uffdf\005" +
    "\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf" +
    "\014\uffdf\017\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\047\156\001\002\000\006\005\151\044\152" +
    "\001\002\000\004\044\150\001\002\000\044\002\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\017\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\026\uffda\027\uffda\001\002\000\004\044\154\001\002" +
    "\000\004\021\153\001\002\000\046\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\017\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\047\uffd8\001\002\000\004\021\155\001\002" +
    "\000\046\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\017\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\047\uffd7\001" +
    "\002\000\046\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\017\uffde\020" +
    "\146\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\001\002\000\044\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\017\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\014\003\025\004\006\011\004\012\016\016" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\125\011\004\012\016" +
    "\016\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\110\011\004\012\016\016\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\034\011\004\012\016\016\024\001\001\000" +
    "\002\001\001\000\012\004\102\011\004\012\016\016\024" +
    "\001\001\000\012\004\101\011\004\012\016\016\024\001" +
    "\001\000\002\001\001\000\012\004\100\011\004\012\016" +
    "\016\024\001\001\000\012\004\077\011\004\012\016\016" +
    "\024\001\001\000\012\004\076\011\004\012\016\016\024" +
    "\001\001\000\012\004\075\011\004\012\016\016\024\001" +
    "\001\000\012\004\074\011\004\012\016\016\024\001\001" +
    "\000\012\004\073\011\004\012\016\016\024\001\001\000" +
    "\016\004\060\010\062\011\057\012\016\013\061\016\024" +
    "\001\001\000\012\004\056\011\004\012\016\016\024\001" +
    "\001\000\012\004\055\011\004\012\016\016\024\001\001" +
    "\000\012\004\054\011\004\012\016\016\024\001\001\000" +
    "\012\004\053\011\004\012\016\016\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\063\007\065\001\001\000\002\001\001\000" +
    "\014\004\067\005\070\011\004\012\016\016\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\072\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\060\010" +
    "\104\011\057\012\016\013\061\016\024\001\001\000\004" +
    "\006\105\001\001\000\006\006\063\007\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\060\010\114\011\057\012\016\013" +
    "\061\015\113\016\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\004\060\010\117\011\057\012\016\013" +
    "\061\016\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\121\011\004\012\016\016\024\001\001\000" +
    "\002\001\001\000\012\004\123\011\004\012\016\016\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\130\011\004\012\016" +
    "\016\024\001\001\000\002\001\001\000\012\004\132\011" +
    "\004\012\016\016\024\001\001\000\002\001\001\000\012" +
    "\004\134\011\004\012\016\016\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\137\011\004\012\016" +
    "\016\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\156\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ExcelExpressionParser excelParser;
	ExpressionNode rootNode;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rangeexpr ::= expr 
            {
              ExpressionNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*rangeexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // rangeexpr ::= range 
            {
              ExpressionNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CellRange r = (CellRange)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.newNodeForReference( r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*rangeexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // rangeexprlist ::= rangeexprlist COMMA rangeexpr 
            {
              Collection RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Collection l = (Collection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; l.add( r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*rangeexprlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // rangeexprlist ::= rangeexpr 
            {
              Collection RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (new ArrayList<ExpressionNode>()); RESULT.add( r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*rangeexprlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // agg ::= OR 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.OR; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // agg ::= AND 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.AND; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // agg ::= MAX 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.MAX; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // agg ::= MIN 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.MIN; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // agg ::= AVERAGE 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.AVERAGE; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // agg ::= PRODUCT 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.PRODUCT; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // agg ::= SUM 
            {
              Aggregator RESULT = null;
		 RESULT = Aggregator.SUM; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*agg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // rel ::= LBRACK MINUS INT RBRACK 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = -i; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // rel ::= LBRACK INT RBRACK 
            {
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*rel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // range ::= cell COLON cell 
            {
              CellRange RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CellIndex a = (CellIndex)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CellIndex b = (CellIndex)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CellRange( (CellIndex)a, (CellIndex)b ); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cellcoords ::= IDENT DOLLAR INT 
            {
              CellIndex RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer row = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellIndexColRow( col, row ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*cellcoords*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cellcoords ::= DOLLAR IDENT DOLLAR INT 
            {
              CellIndex RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rowright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer row = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellIndexColRow( col, row ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*cellcoords*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cellcoords ::= DOLLAR IDENT 
            {
              CellIndex RESULT = null;
		int cellleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cellright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String cell = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellIndex( cell ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*cellcoords*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cellcoords ::= IDENT rel IDENT rel 
            {
              CellIndex RESULT = null;
		int irleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellIndex( ir, r, ic, c ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*cellcoords*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cellcoords ::= IDENT rel IDENT 
            {
              CellIndex RESULT = null;
		int irleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int icleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int icright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String ic = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellIndex( ir, r, ic, null ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*cellcoords*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cellcoords ::= IDENT rel 
            {
              CellIndex RESULT = null;
		int irleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int irright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ir = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellIndex( ir, null, null, c ); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*cellcoords*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cell ::= cellcoords 
            {
              CellIndex RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CellIndex c = (CellIndex)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cell*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cell ::= IDENT 
            {
              CellIndex RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.parseIdentIntoCellRef( i ); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*cell*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optarg ::= arg 
            {
              ExpressionNode RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode a = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*optarg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // optarg ::= 
            {
              ExpressionNode RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*optarg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arg ::= COMMA optexpr 
            {
              ExpressionNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // optexpr ::= expr 
            {
              ExpressionNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*optexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optexpr ::= 
            {
              ExpressionNode RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*optexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= ROUND LPAREN expr COMMA expr RPAREN 
            {
              ExpressionNode RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionNode val = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int precleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int precright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode prec = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForFunction( Function.ROUND, val, prec ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= INDEX LPAREN rangeexpr arg optarg RPAREN 
            {
              ExpressionNode RESULT = null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionNode array = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rownumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rownumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode rownum = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colnumleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colnumright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode colnum = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForFunction( Function.INDEX, array, rownum, colnum ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= MATCH LPAREN expr COMMA rangeexpr optarg RPAREN 
            {
              ExpressionNode RESULT = null;
		int lookupvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lookupvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExpressionNode lookupvalue = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode array = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int matchtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int matchtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode matchtype = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForFunction( Function.MATCH, lookupvalue, array, matchtype ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= agg LPAREN rangeexprlist RPAREN 
            {
              ExpressionNode RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Aggregator a = (Aggregator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Collection l = (Collection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForAggregator( a, l ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NOT LPAREN expr RPAREN 
            {
              ExpressionNode RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode arg = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForFunction( Function.NOT, arg ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= IF LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              ExpressionNode RESULT = null;
		int testleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int testright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpressionNode test = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExpressionNode t = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode f = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForIf( test, t, f ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= LPAREN expr RPAREN 
            {
              ExpressionNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr GREATEROREQUAL expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.GREATEROREQUAL, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr GREATER expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.GREATER, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr LESSOREQUAL expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.LESSOREQUAL, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr LESS expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.LESS, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr NOTEQUAL expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.NOTEQUAL, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr EQUAL expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.EQUAL, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr PERCENT 
            {
              ExpressionNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.PERCENT, e ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr EXP expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.EXP, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr DIV expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.DIV, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= expr TIMES expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.TIMES, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr MINUS expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.MINUS, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= expr PLUS expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.PLUS, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr CONCAT expr 
            {
              ExpressionNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressionNode l = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode r = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.CONCAT, l, r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= MINUS expr 
            {
              ExpressionNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForOperator( Operator.MINUS, e ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= cell 
            {
              ExpressionNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CellIndex r = (CellIndex)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = this.parser.excelParser.newNodeForReference( r ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= STRING 
            {
              ExpressionNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForConstantValue( this.parser.excelParser.stripFirstAndLastCharOf( s )); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= DBL 
            {
              ExpressionNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForConstantValue( n ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= INT 
            {
              ExpressionNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExpressionNodeForConstantValue( new Double(n) ); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_root EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_root ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpressionNode e = (ExpressionNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 this.parser.rootNode = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*expr_root*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

