jc:basics/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeDouble_v2;
import org.formulacompiler.tutorials.Basics;

final class $Root extends Basics.RebateComputation implements Computation
{
    private final Basics.RebateInputs $inputs;
    final Environment $environment;
    
    $Root(Basics.RebateInputs rebateinputs, Environment environment) {
        super(rebateinputs);
        $environment = environment;
        $inputs = rebateinputs;
    }
    
    final double get$0() {
        return (get$1() == 1.0 ? get$2() + get$3()
                : RuntimeDouble_v2.max(get$2(), get$3()));
    }
    
    public final double getRebate() {
        return RuntimeDouble_v2.round(get$0(), 2);
    }
    
    final double get$1() {
        return (double) $inputs.getCustomerCategory();
    }
    
    final double get$2() {
        return $inputs.getCustomerRebate();
    }
    
    final double get$3() {
        return $inputs.getArticleRebate();
    }
}
___@_@___
jc:basicusage.org.formulacompiler.gen.$Factory
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.examples.Inputs;
import org.formulacompiler.examples.OutputFactory;
import org.formulacompiler.examples.Outputs;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.ComputationFactory;
import org.formulacompiler.runtime.internal.Environment;

public final class $Factory implements ComputationFactory, OutputFactory
{
    private final Environment $environment;
    
    public $Factory(Environment environment) {
        $environment = environment;
    }
    
    public final Computation newComputation(Object object) {
        return new $Root((Inputs) object, $environment);
    }
    
    public final Outputs newInstance(Inputs inputs) {
        return new $Root(inputs, $environment);
    }
}
___@_@___
jc:basicusage.org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.examples.Inputs;
import org.formulacompiler.examples.Outputs;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeDouble_v2;

final class $Root implements Computation, Outputs
{
    private final Inputs $inputs;
    final Environment $environment;
    
    $Root(Inputs inputs, Environment environment) {
        $environment = environment;
        $inputs = inputs;
    }
    
    final double get$0() {
        return get$1() * get$2();
    }
    
    public final double getResult() {
        return RuntimeDouble_v2.round(get$0(), 2);
    }
    
    final double get$1() {
        return $inputs.getA();
    }
    
    final double get$2() {
        return $inputs.getB();
    }
}
___@_@___
jc:binding/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.tutorials.BindingCells;

final class $Root implements Computation, BindingCells.Output
{
    private final BindingCells.Input $inputs;
    final Environment $environment;
    
    $Root(BindingCells.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final double get$0() {
        return get$1() + get$2() + get$3();
    }
    
    public final double getResult() {
        return get$0();
    }
    
    final double get$1() {
        return $inputs.getValueForYear(1994);
    }
    
    final double get$2() {
        return $inputs.getValueForYear((int) get$7());
    }
    
    final double get$3() {
        return (double) $inputs.getName().length();
    }
    
    final double get$4() {
        return get$5() + get$6();
    }
    
    public final double getCoefficient() {
        return get$4();
    }
    
    final double get$5() {
        return $inputs.getSomeValue();
    }
    
    final double get$6() {
        return $inputs.getAnotherValue();
    }
    
    final double get$7() {
        return get$8() * 10.0 + 1900.0;
    }
    
    final double get$8() {
        return (double) $inputs.getDecade();
    }
}
___@_@___
jc:bonusPerEmployee/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeLong_v2;
import org.formulacompiler.tutorials.BonusPerEmployee;

final class $Root extends BonusPerEmployee.BonusComputationDefaults
    implements Computation
{
    private final BonusPerEmployee.BonusData $inputs;
    final Environment $environment;
    private $Sect0[] get$Sect0;
    static final RuntimeLong_v2.Context runtimeContext
        = new RuntimeLong_v2.Context(4);
    
    $Root(BonusPerEmployee.BonusData bonusdata, Environment environment) {
        $environment = environment;
        $inputs = bonusdata;
    }
    
    public void reset() {
        get$Sect0 = null;
    }
    
    final long get$0() {
        return $inputs.bonusTotal();
    }
    
    final long get$1() {
        return $inputs.overtimeSalaryPerHour();
    }
    
    final long get$2() {
        return get$3();
    }
    
    final long get$3() {
        long l = 0L;
        $Sect0[] sect0s = get$Sect0();
        int i = sect0s.length;
        for (int i_0_ = 0; i_0_ < i; i_0_++) {
            $Sect0 sect0 = sect0s[i_0_];
            l += sect0.get$1();
        }
        return l;
    }
    
    final $Sect0[] get$Sect0() {
        if (get$Sect0 == null) {
            BonusPerEmployee.EmployeeBonusData[] employeebonusdatas
                = $inputs.employees();
            if (employeebonusdatas != null) {
                int i = employeebonusdatas.length;
                $Sect0[] sect0s = new $Sect0[i];
                for (int i_1_ = 0; i_1_ < i; i_1_++)
                    sect0s[i_1_] = new $Sect0(employeebonusdatas[i_1_], this);
                get$Sect0 = sect0s;
            } else
                get$Sect0 = new $Sect0[0];
        }
        return get$Sect0;
    }
    
    public final BonusPerEmployee.EmployeeBonusComputation[] employees() {
        return get$Sect0();
    }
}
___@_@___
jc:bonusPerEmployee/org.formulacompiler.gen.$Sect0
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.RuntimeLong_v2;
import org.formulacompiler.tutorials.BonusPerEmployee;

final class $Sect0
    implements Computation, BonusPerEmployee.EmployeeBonusComputation
{
    private final BonusPerEmployee.EmployeeBonusData $inputs;
    final $Root $parent;
    final $Root $root;
    
    $Sect0(BonusPerEmployee.EmployeeBonusData employeebonusdata, $Root root) {
        $parent = root;
        $root = root;
        $inputs = employeebonusdata;
    }
    
    public void reset() {
        /* empty */
    }
    
    final long get$0() {
        $Root root = $parent;
        long l = root.get$0();
        long l_0_ = get$1() * 10000L;
        $Root root_1_ = $parent;
        return l * (l_0_ / root_1_.get$2()) / 10000L;
    }
    
    public final long bonusAmount() {
        return RuntimeLong_v2.round(get$0(), 2, $Root.runtimeContext);
    }
    
    final long get$1() {
        long l = get$2();
        long l_2_ = get$3();
        $Root root = $parent;
        return l + l_2_ * root.get$1() / 10000L;
    }
    
    final long get$2() {
        return $inputs.baseSalary();
    }
    
    final long get$3() {
        return (long) $inputs.hoursOvertime() * 10000L;
    }
}
___@_@___
jc:caching/caching/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import java.math.BigDecimal;

import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeBigDecimal_v2;
import org.formulacompiler.tutorials.Caching;

final class $Root implements Computation, Caching.Output
{
    private final Caching.Input $inputs;
    final Environment $environment;
    private boolean h$get$0;
    private BigDecimal c$get$0;
    private boolean h$get$1;
    private BigDecimal c$get$1;
    private boolean h$get$2;
    private BigDecimal c$get$2;
    
    $Root(Caching.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    public void reset() {
        h$get$0 = false;
        h$get$1 = false;
        h$get$2 = false;
    }
    
    final BigDecimal get$0() {
        if (!h$get$0) {
            c$get$0 = get$1().multiply(get$1()).setScale(0, 4);
            h$get$0 = true;
        }
        return c$get$0;
    }
    
    public final BigDecimal getArea() {
        return get$0();
    }
    
    final BigDecimal get$1() {
        if (!h$get$1) {
            c$get$1
                = RuntimeBigDecimal_v2.toNum($inputs.getSide()).setScale(0, 4);
            h$get$1 = true;
        }
        return c$get$1;
    }
    
    final BigDecimal get$2() {
        if (!h$get$2) {
            c$get$2 = get$0().multiply(get$1()).setScale(0, 4);
            h$get$2 = true;
        }
        return c$get$2;
    }
    
    public final BigDecimal getVolume() {
        return get$2();
    }
}
___@_@___
jc:caching/plain/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import java.math.BigDecimal;

import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeBigDecimal_v2;
import org.formulacompiler.tutorials.Caching;

final class $Root implements Computation, Caching.Output
{
    private final Caching.Input $inputs;
    final Environment $environment;
    
    $Root(Caching.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    public void reset() {
        /* empty */
    }
    
    final BigDecimal get$0() {
        return get$1().multiply(get$1()).setScale(0, 4);
    }
    
    public final BigDecimal getArea() {
        return get$0();
    }
    
    final BigDecimal get$1() {
        return RuntimeBigDecimal_v2.toNum($inputs.getSide()).setScale(0, 4);
    }
    
    final BigDecimal get$2() {
        return get$0().multiply(get$1()).setScale(0, 4);
    }
    
    public final BigDecimal getVolume() {
        return get$2();
    }
}
___@_@___
jc:customerRatingWithOrders/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.Runtime_v2;
import org.formulacompiler.tutorials.CustomerRatingWithOrders;

final class $Root
    implements Computation, CustomerRatingWithOrders.CustomerRating
{
    private final CustomerRatingWithOrders.CustomerData $inputs;
    final Environment $environment;
    private static final String[] get$1_Consts
        = { "Abysmal", "Poor", "Average", "Good", "Excellent" };
    private $Sect0[] get$Sect0;
    
    $Root(CustomerRatingWithOrders.CustomerData customerdata,
          Environment environment) {
        $environment = environment;
        $inputs = customerdata;
    }
    
    final String get$0() {
        return get$1();
    }
    
    public final String rating() {
        return get$0();
    }
    
    final String get$1() {
        int i = (int) get$2() - 1;
        if (i >= 0 && i < get$1_Consts.length)
            return get$1_Consts[i];
        return Runtime_v2.emptyString();
    }
    
    final double get$2() {
        double d = get$3();
        int i = 0;
        if (!(d < 0.0)) {
            i++;
            if (!(d < 2000.0)) {
                i++;
                if (!(d < 5000.0)) {
                    i++;
                    if (!(d < 7500.0)) {
                        i++;
                        if (!(d < 10000.0))
                            i++;
                    }
                }
            }
        }
        return (double) i;
    }
    
    final double get$3() {
        double d = 0.0;
        $Sect0[] sect0s = get$Sect0();
        int i = sect0s.length;
        for (int i_0_ = 0; i_0_ < i; i_0_++) {
            $Sect0 sect0 = sect0s[i_0_];
            d += sect0.get$0();
        }
        return d;
    }
    
    final $Sect0[] get$Sect0() {
        if (get$Sect0 == null) {
            CustomerRatingWithOrders.OrderData[] orderdatas
                = $inputs.ordersForLastNDays(90);
            if (orderdatas != null) {
                int i = orderdatas.length;
                $Sect0[] sect0s = new $Sect0[i];
                for (int i_1_ = 0; i_1_ < i; i_1_++)
                    sect0s[i_1_] = new $Sect0(orderdatas[i_1_], this);
                get$Sect0 = sect0s;
            } else
                get$Sect0 = new $Sect0[0];
        }
        return get$Sect0;
    }
}
___@_@___
jc:customerRatingWithOrders/org.formulacompiler.gen.$Sect0
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.tutorials.CustomerRatingWithOrders;

final class $Sect0 implements Computation
{
    private final CustomerRatingWithOrders.OrderData $inputs;
    final $Root $parent;
    final $Root $root;
    
    $Sect0(CustomerRatingWithOrders.OrderData orderdata, $Root root) {
        $parent = root;
        $root = root;
        $inputs = orderdata;
    }
    
    final double get$0() {
        return $inputs.total();
    }
}
___@_@___
jc:numeric_type/bigdecimal0/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import java.math.BigDecimal;

import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeBigDecimal_v2;
import org.formulacompiler.tutorials.AbstractUsingBigDecimalTest;

final class $Root implements Computation, AbstractUsingBigDecimalTest.Output
{
    private final AbstractUsingBigDecimalTest.Input $inputs;
    final Environment $environment;
    
    $Root(AbstractUsingBigDecimalTest.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final BigDecimal get$0() {
        return get$1().divide(get$2()).add(get$1());
    }
    
    public final BigDecimal getResult() {
        return get$0();
    }
    
    final BigDecimal get$1() {
        return RuntimeBigDecimal_v2.toNum($inputs.getA());
    }
    
    final BigDecimal get$2() {
        return RuntimeBigDecimal_v2.toNum($inputs.getB());
    }
    
    final BigDecimal get$3() {
        return get$1().negate();
    }
    
    public final BigDecimal getNegated() {
        return get$3();
    }
}
___@_@___
jc:numeric_type/bigdecimal_prec34/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import java.math.BigDecimal;
import java.math.MathContext;

import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeBigDecimal_v2;
import org.formulacompiler.tutorials.AbstractUsingBigDecimalTest;

final class $Root implements Computation, AbstractUsingBigDecimalTest.Output
{
    private final AbstractUsingBigDecimalTest.Input $inputs;
    final Environment $environment;
    static final MathContext mathContext = MathContext.DECIMAL128;
    
    $Root(AbstractUsingBigDecimalTest.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final BigDecimal get$0() {
        return get$1().divide(get$2(), mathContext).add(get$1(), mathContext);
    }
    
    public final BigDecimal getResult() {
        return get$0();
    }
    
    final BigDecimal get$1() {
        return RuntimeBigDecimal_v2.toNum($inputs.getA());
    }
    
    final BigDecimal get$2() {
        return RuntimeBigDecimal_v2.toNum($inputs.getB());
    }
    
    final BigDecimal get$3() {
        return get$1().negate();
    }
    
    public final BigDecimal getNegated() {
        return get$3();
    }
}
___@_@___
jc:numeric_type/bigdecimal_scale4/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import java.math.BigDecimal;

import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeBigDecimal_v2;
import org.formulacompiler.tutorials.AbstractUsingBigDecimalTest;

final class $Root implements Computation, AbstractUsingBigDecimalTest.Output
{
    private final AbstractUsingBigDecimalTest.Input $inputs;
    final Environment $environment;
    
    $Root(AbstractUsingBigDecimalTest.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final BigDecimal get$0() {
        return get$1().divide(get$2(), 4, 0).add(get$1());
    }
    
    public final BigDecimal getResult() {
        return get$0();
    }
    
    final BigDecimal get$1() {
        return RuntimeBigDecimal_v2.toNum($inputs.getA()).setScale(4, 0);
    }
    
    final BigDecimal get$2() {
        return RuntimeBigDecimal_v2.toNum($inputs.getB()).setScale(4, 0);
    }
    
    final BigDecimal get$3() {
        return get$1().negate();
    }
    
    public final BigDecimal getNegated() {
        return get$3();
    }
}
___@_@___
jc:numeric_type/double/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.tutorials.UsingDouble;

final class $Root implements Computation, UsingDouble.Output
{
    private final UsingDouble.Input $inputs;
    final Environment $environment;
    
    $Root(UsingDouble.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final double get$0() {
        return get$1() / get$2() + get$1();
    }
    
    public final double getResult() {
        return get$0();
    }
    
    final double get$1() {
        return $inputs.getA();
    }
    
    final double get$2() {
        return $inputs.getB();
    }
    
    final double get$3() {
        return -get$1();
    }
    
    public final double getNegated() {
        return get$3();
    }
}
___@_@___
jc:numeric_type/long/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.tutorials.UsingScaledLong;

final class $Root implements Computation, UsingScaledLong.Output0
{
    private final UsingScaledLong.Input $inputs;
    final Environment $environment;
    
    $Root(UsingScaledLong.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final long get$0() {
        return get$1() / get$2() + get$1();
    }
    
    public final long getResult() {
        return get$0();
    }
    
    final long get$1() {
        return $inputs.getA();
    }
    
    final long get$2() {
        return $inputs.getB() / 1000L;
    }
    
    final long get$3() {
        return -get$1();
    }
    
    public final long getNegated() {
        return get$3();
    }
}
___@_@___
jc:numeric_type/scaledlong3/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.tutorials.UsingScaledLong;

final class $Root implements Computation, UsingScaledLong.Output
{
    private final UsingScaledLong.Input $inputs;
    final Environment $environment;
    
    $Root(UsingScaledLong.Input input, Environment environment) {
        $environment = environment;
        $inputs = input;
    }
    
    final long get$0() {
        return get$1() * 1000L / get$2() + get$1();
    }
    
    public final long getResult() {
        return get$0();
    }
    
    final long get$1() {
        return $inputs.getA() * 1000L;
    }
    
    final long get$2() {
        return $inputs.getB();
    }
    
    final long get$3() {
        return -get$1();
    }
    
    public final long getNegated() {
        return get$3();
    }
}
___@_@___
jc:org.formulacompiler.compiler.internal.build.rewriting.RewriteRulesCompiler:---- fun_COMBIN
__@@__
@Override
	protected void defineFunctions() throws Exception
	{
		// ...
		begin( Function.COMBIN, "n", "k" );
		{
			body( "IF( OR( `n <= 0, `k < 0, `n < `k ), 0," );
			body( "  IF( `n = `k, 1," );
			body( "    IF( `k = 1, `n," );
			body( "      FACT(`n) / FACT(`k) / FACT(`n - `k)" );
			body( "    )" );
			body( "  )" );
			body( ")" );
		}
		end();
		// ...
	}
___@_@___
jc:org.formulacompiler.compiler.internal.build.rewriting.RewriteRulesCompiler:---- fun_MINMAX
__@@__
def( Function.MIN, "xs*", "_REDUCE( r, xi: `r _min_ `xi; 0; `xs )" );
		def( Function.MAX, "xs*", "_REDUCE( r, xi: `r _max_ `xi; 0; `xs )" );
___@_@___
jc:org.formulacompiler.compiler.internal.build.rewriting.RewriteRulesCompiler:---- fun_NPV
__@@__
// ...
		begin( Function.NPV, "rate", "vs#" );
		{
			body( "_LET( rate1: `rate + 1;" );
			body( "  _FOLD_ARRAY( r: 0; vi, i: `r + `vi / `rate1 ^ `i; `vs ))" );
		}
		end();
		// ...
___@_@___
jc:org.formulacompiler.compiler.internal.build.rewriting.RewriteRulesCompiler:---- fun_SUM
__@@__
def( Function.SUM, "xs*", "_FOLD_OR_REDUCE( r: 0; xi: `r + `xi; `xs )" );
___@_@___
jc:org.formulacompiler.compiler.internal.build.rewriting.RewriteRulesCompiler:---- fun_VAR
__@@__
begin( Function.VAR, "xs*" );
		{
			body( "_LET( n: COUNT(`xs);" );
			body( "  _LET( m: SUM(`xs) / `n;" );
			body( "    _FOLD( r: 0; xi: _LET( ei: `xi - `m; `r + `ei*`ei ); `xs )" );
			body( "  )" );
			body( "  / (`n - 1)" );
			body( ")" );
		}
		end();
___@_@___
jc:org.formulacompiler.compiler.internal.model.analysis.TypeAnnotator:---- typeOfFun
__@@__
private DataType typeOf( ExpressionNodeForFunction _expr ) throws CompilerException
	{
		annotateArgs( _expr );
		switch (_expr.getFunction()) {
			// ...
			case CONCATENATE:
			case MID:
				// ...
				return DataType.STRING;

			default:
				return DataType.NUMERIC;
		}
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.AbstractExpressionTemplatesForBigDecimals:---- fun_ABS
__@@__
@ReturnsAdjustedValue
	public BigDecimal fun_ABS( BigDecimal a )
	{
		return a.abs();
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForDoubles:---- fun_ABS
__@@__
public double fun_ABS( double a )
	{
		return Math.abs( a );
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForDoubles:---- fun_ROUND
__@@__
public double fun_ROUND( double a, double b )
	{
		return RuntimeDouble_v2.round( a, (int) b );
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForDoubles:---- fun_VALUE
__@@__
public double fun_VALUE( String _text )
	{
		return RuntimeDouble_v2.fun_VALUE( _text, this.environment );
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForPrecisionBigDecimals:---- op_PLUS
__@@__
@ReturnsAdjustedValue
	public BigDecimal op_PLUS( BigDecimal a, BigDecimal b )
	{
		return a.add( b, this.mathContext );
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForScaledBigDecimals:---- op_PLUS
__@@__
@ReturnsAdjustedValue
	public BigDecimal op_PLUS( BigDecimal a, BigDecimal b )
	{
		return a.add( b );
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForScaledLongs:---- fun_ABS
__@@__
public long fun_ABS( long a )
	{
		return (a < 0) ? -a : a;
	}
___@_@___
jc:org.formulacompiler.compiler.internal.templates.ExpressionTemplatesForStrings:---- fun_MID
__@@__
public String fun_MID( String s, int start, int len )
	{
		return Runtime_v2.fun_MID( s, start, len );
	}
___@_@___
jc:org.formulacompiler.devjournal.cse.InsuranceModel:---- OutputsCurrent
__@@__
public static final class OutputsCurrent implements Outputs
	{
		private static final double[] COST_TABLE = new double[] { 150, 180, 240 /* ... all of 37 elts */};
		private final Inputs i;

		public OutputsCurrent(Inputs _inputs)
		{
			this.i = _inputs;
		}

		private double getAge()
		{
			return this.i.getAge();
		}

		private double getInsuredAmount()
		{
			return this.i.getInsuredAmount();
		}

		public double getInsuranceCostPerYear()
		{
			int r;
			switch (r = ((int) getMatchingRow()) - 1) {

				case 27:
					return getInsuredAmount() * (0.02 + Math.abs( getAge() - 50 ) / 25 * 0.01);

				case 28:
					return getInsuredAmount() * 0.03;
				case 29:
					return getInsuredAmount() * 0.03;
				case 30:
					return getInsuredAmount() * 0.03;
				case 31:
					return getInsuredAmount() * 0.04;
				case 32:
					return getInsuredAmount() * 0.04;
				case 33:
					return getInsuredAmount() * 0.04;

					/* ... for all rows of this form */

				default:
					if (r >= 0 && r < COST_TABLE.length) {
						return COST_TABLE[ r ];
					}
					return 0;
			}
		}

		private final double getMatchingRow()
		{
			int r = 1;

			// This is what really happens:
			if (((getAge() > 20.0 || getInsuredAmount() > 5000.0) ? 1.0 : 0.0) != 0.0) {
				r++;

				// This is what could be made to happen with a bit of peephole optimization:
				if (getAge() > 20.0 || getInsuredAmount() > 6000.0) {
					r++;

					if (getAge() > 20.0 || getInsuredAmount() > 8000.0) {
						r++;

						// ... for all of 37 cases */

					}
					else {
						r = 0;
					}
				}
			}

			return r;
		}

	}
___@_@___
jc:org.formulacompiler.devjournal.cse.InsuranceModel:---- OutputsDesired
__@@__
public static final class OutputsDesired implements Outputs
	{
		private static final double[] COST_TABLE = new double[] { 150, 180, 240 /* ... all of 37 elts */};
		private static final double[] PERCENT_TABLE = new double[] { .03, .03, .03  /* ... all of 37 elts */};
		private static final double[] AGE_UPTO = new double[] { 20, 20, 20 /* ... all of 37 elts */};
		private static final double[] INSURED_AMOUNT_UPTO = new double[] { 5000, 6000, 8000 };

		private final Inputs i;

		public OutputsDesired(Inputs _inputs)
		{
			this.i = _inputs;
		}

		private double getAge()
		{
			return this.i.getAge();
		}

		private double getInsuredAmount()
		{
			return this.i.getInsuredAmount();
		}

		public double getInsuranceCostPerYear()
		{
			int r;
			switch (r = ((int) getMatchingRow()) - 1) {

				case 27:
					return getInsuredAmount() * (0.02 + Math.abs( getAge() - 50 ) / 25 * 0.01);

				case 28:
				case 29:
				case 30:
				case 31:
				case 32:
				case 33:
					return getStyle3( 0, r + 1, 7 );

				default:
					if (r >= 0 && r < COST_TABLE.length) {
						return COST_TABLE[ r ];
					}
					return 0;

			}
		}

		private double getStyle3( int _s, int _r, int _c )
		{
			return getInsuredAmount() * PERCENT_TABLE[ _r - 13 ];
		}

		private final double getMatchingRow()
		{
			for (int r = 13; r < 50; r++) {
				if (getMatch( 1, r, 3 )) return r;
			}
			return 0;
		}

		/**
		 * The boolean return here is again a peephole optimization.
		 */
		private final boolean getMatch( int _s, int _r, int _c )
		{
			return (getAge() <= getAgeUpto( _s, _r, _c + 1 ) && getInsuredAmount() <= getInsuredAmountUpto( _s, _r, _c + 2 ));
		}

		/**
		 * If AFC sees that all the cells that can be referenced relatively are constant, then there
		 * is no switch, just a table.
		 */
		private double getAgeUpto( int _s, int _r, int _c )
		{
			return AGE_UPTO[ _r - 13 ];
		}

		private double getInsuredAmountUpto( int _s, int _r, int _c )
		{
			return INSURED_AMOUNT_UPTO[ _r - 13 ];
		}

	}
___@_@___
jc:org.formulacompiler.examples.BasicUsageDemo:---- BasicUsage; strip ---- Computation; strip ---- Construction
__@@__
// ---- Construction
		// Get an engine builder (represents AFC's simplified API).
		EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();

		// Load and parse the spreadsheet file into memory.
		builder.loadSpreadsheet( DATA_PATH + "test.xls" );

		// Set the factory interface to implement. This interface defines the method
		// Outputs newInstance( Inputs _inputs ), from which AFC derives the input
		// and output interfaces.
		builder.setFactoryClass( OutputFactory.class );

		// Define which cells will be variable inputs to the engine, and which will be
		// computable outputs, by cell name. All cells whose name correspond to a method
		// on the output interface will be outputs, and similarly for inputs.
		// Inputs are bound to your input methods that will be called to obtain their value.
		// Outputs are bound to your output methods that are implemented by the engine.
		builder.bindAllByName();

		// Build an engine for the given spreadsheet, inputs, and outputs.
		Engine engine = builder.compile();

		// Get the factory instance from the compiled engine.
		OutputFactory factory = (OutputFactory) engine.getComputationFactory();
		// ---- Construction

		// ---- Computation
		// Compute an actual output value for a given set of actual input values.
		// This code is not dependent on AFC. It is a simple instance of the strategy
		// pattern.
		Inputs inputs = new Inputs( 4, 40 );
		Outputs outputs = factory.newInstance( inputs );
		double result = outputs.getResult();
		// ---- Computation

		return result;
___@_@___
jc:org.formulacompiler.examples.BasicUsageDemo:---- Computation
__@@__
// Compute an actual output value for a given set of actual input values.
		// This code is not dependent on AFC. It is a simple instance of the strategy
		// pattern.
		Inputs inputs = new Inputs( 4, 40 );
		Outputs outputs = factory.newInstance( inputs );
		double result = outputs.getResult();
___@_@___
jc:org.formulacompiler.examples.BasicUsageDemo:---- Construction
__@@__
// Get an engine builder (represents AFC's simplified API).
		EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();

		// Load and parse the spreadsheet file into memory.
		builder.loadSpreadsheet( DATA_PATH + "test.xls" );

		// Set the factory interface to implement. This interface defines the method
		// Outputs newInstance( Inputs _inputs ), from which AFC derives the input
		// and output interfaces.
		builder.setFactoryClass( OutputFactory.class );

		// Define which cells will be variable inputs to the engine, and which will be
		// computable outputs, by cell name. All cells whose name correspond to a method
		// on the output interface will be outputs, and similarly for inputs.
		// Inputs are bound to your input methods that will be called to obtain their value.
		// Outputs are bound to your output methods that are implemented by the engine.
		builder.bindAllByName();

		// Build an engine for the given spreadsheet, inputs, and outputs.
		Engine engine = builder.compile();

		// Get the factory instance from the compiled engine.
		OutputFactory factory = (OutputFactory) engine.getComputationFactory();
___@_@___
jc:org.formulacompiler.examples.EngineSerializationDemo:---- Deserialization
__@@__
// Instantiate an engine from the serialized form.
		File engineSerializationFile = new File( TEMP_ENGINE_JAR );
		InputStream inStream = new BufferedInputStream( new FileInputStream( engineSerializationFile ) );
		Engine loadedEngine = FormulaRuntime.loadEngine( inStream );
		OutputFactory factory = (OutputFactory) loadedEngine.getComputationFactory();

		// Compute an actual output value for a given set of actual input values.
		Inputs inputs = new Inputs( 4, 40 );
		Outputs outputs = factory.newInstance( inputs );
		double result = outputs.getResult();

		return result;
___@_@___
jc:org.formulacompiler.examples.EngineSerializationDemo:---- Serialization
__@@__
// Build an engine for the given spreadsheet, inputs, and outputs.
		EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();
		builder.loadSpreadsheet( DATA_PATH + "test.xls" );
		builder.setFactoryClass( OutputFactory.class );
		builder.bindAllByName();
		SaveableEngine compiledEngine = builder.compile();

		// Write the engine out to its serialized form, then drop the reference to it.
		File engineSerializationFile = new File( TEMP_ENGINE_JAR );
		OutputStream outStream = new BufferedOutputStream( new FileOutputStream( engineSerializationFile ) );
		try {
			compiledEngine.saveTo( outStream );
		}
		finally {
			outStream.close();
		}
___@_@___
jc:org.formulacompiler.runtime.Resettable:---- resettable
__@@__
/**
 * Interface that must be implemented by an output class (or extended by an output interface) of
 * computations that need to reset internal caches of values - typically for reuse on modified input
 * values.
 * 
 * @author peo
 */
public interface Resettable
{

	/**
	 * Clears all internal caches of the computation so it can be reused with changed input values.
	 * You do not need to implement this method yourself. As long as you declare it, AFC will
	 * implement it for you. If you do implement it, AFC will call it prior to resetting the
	 * computation.
	 */
	void reset();

}
___@_@___
jc:org.formulacompiler.runtime.internal.RuntimeDouble_v2:---- round
__@@__
public static double round( final double _val, final int _maxFrac )
	{
		final double shift = pow10( _maxFrac );
		if (0 > _val) {
			return Math.ceil( _val * shift - 0.5 ) / shift;
		}
		else {
			return Math.floor( _val * shift + 0.5 ) / shift;
		}
	}
___@_@___
jc:org.formulacompiler.tests.reference.DebugTest:---- DebugTest
__@@__
/**
 * Special debugging testcase for automated reference tests. See constructor for how to configure
 * it.
 */
public final class DebugTest extends AbstractReferenceTest
{

	/**
	 * Options you might wish to enable.
	 */
	static {
		Settings.LOG_CONSTEVAL.setEnabled( true );
		Settings.LOG_LETVARS.setEnabled( false );
	}


	/**
	 * Configure which test to run here. At first, just run the suite you are interested in, or, if
	 * you know it, the starting row to use. Then, when you know which test fails (from the console
	 * output), configure it precisely. Note how <code>Integer.valueOf( "x", 2 )</code> is used to
	 * encode the bound/unbound input variant to use.
	 */
	public DebugTest()
	{
		// super( "StringComparisons" );
		// super( "StringComparisons", 74 );
		// super( "StringComparisons", 9, NumType.DOUBLE, Integer.valueOf( "1", 2 ), false );

		super( "NumericFunctions", 2, NumType.DOUBLE, Integer.valueOf( "0", 2 ), false );
	}


	/**
	 * Logs the generated engine .jar to "temp/debug/engine.jar" and decompiles it to
	 * "temp/debug/decompiled" in case of a test failure. You can use
	 * 
	 * <pre>
	 * javap -c -private -classpath ./engine.jar org/formulacompiler/gen/$Root
	 * </pre>
	 * 
	 * to disassemble its VM byte-code instructions.
	 */
	@Override
	protected void reportDefectiveEngine( SaveableEngine _engine, String _testName )
	{
		if (_engine != null) {
			try {
				new File( "temp/debug/decompiled" ).mkdirs();
				Debug.saveEngine( _engine, "temp/debug/engine.jar" );
				System.out.println( ".. dumped to temp/debug/engine.jar" );
				Debug.decompileEngine( _engine, "temp/debug/decompiled" );
				System.out.println( ".. decompiled to temp/debug/decompiled" );
			}
			catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

}
___@_@___
jc:org.formulacompiler.tutorials.AbstractUsingBigDecimalTest:---- IO
__@@__
public static class Input
	{
		public Input( double a, double b ) { this.a = BigDecimal.valueOf(a); this.b = BigDecimal.valueOf(b); }
		public /**/BigDecimal/**/ getA() { return this.a; }
		public /**/BigDecimal/**/ getB() { return this.b; }
		private final BigDecimal a;
		private final BigDecimal b;
	}

	public static interface Output
	{
		/**/BigDecimal/**/getResult();
		/**/BigDecimal/**/getNegated();
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- BuildTemplatedSheet
__@@__
final String CAPTION = "Caption";
		final String LBL = "Label";
		final String IN = "InputValue";
		final String IN_P = "PercentInputValue";
		final String IN_D = "DateInputValue";
		final String OUT_P = "PercentOutputValue";
		final String INTER = "IntermediateValue";

		SpreadsheetBuilder b = SpreadsheetCompiler.newSpreadsheetBuilder();

		b.newCell().newCell( b.cst( "Styled" ) ).newCell( b.cst( "Plain" ) );

		b.newRow()./**/styleRow( CAPTION )/**/.newCell( b.cst( "Inputs" ) )./**/styleCell( CAPTION )/**/.newRow();
		b.newCell( b.cst( "CustomerRebate" ) )./**/styleCell( LBL )/**/;
		b.newCell( b.cst( 0.1 ) )./**/styleCell( IN_P )/**/;
		b.newCell( b.cst( 0.1 ) );
		SpreadsheetBuilder.CellRef cr = b.currentCell();

		b.newRow();
		b.newCell( b.cst( "ArticleRebate" ) )./**/styleCell( LBL )/**/;
		b.newCell( b.cst( 0.05 ) )./**/styleCell( IN_P )/**/;
		b.newCell( b.cst( 0.05 ) );
		SpreadsheetBuilder.CellRef ar = b.currentCell();

		final Calendar cal = new GregorianCalendar();
		cal.clear();
		cal.set( 2006, Calendar.OCTOBER, 29 );
		Date orderDateSampleValue = cal.getTime();

		b.newRow();
		b.newCell( b.cst( "OrderDate" ) )./**/styleCell( LBL )/**/;
		b.newCell( b.cst( orderDateSampleValue ) )./**/styleCell( IN_D )/**/;
		b.newCell( b.cst( orderDateSampleValue ) );

		b.newRow();
		b.newCell( b.cst( "IsKeyAccount" ) )./**/styleCell( LBL )/**/;
		b.newCell( b.cst( true ) )./**/styleCell( IN )/**/;
		b.newCell( b.cst( true ) );

		b.newRow()./**/styleRow( CAPTION )/**/.newCell( b.cst( "Outputs" ) )./**/styleCell( CAPTION )/**/.newRow();
		b.newCell( b.cst( "Rebate" ) )./**/styleCell( LBL )/**/;
		b.newCell( b.op( Operator.PLUS, b.ref( cr ), b.ref( ar ) ) )./**/styleCell( OUT_P )/**/;

		b.newRow()./**/styleRow( CAPTION )/**/.newCell( b.cst( "Intermediate Values" ) )./**/styleCell( CAPTION )
				/**/.newRow();
		b.newCell( b.cst( "(sample only)" ) )./**/styleCell( LBL )/**/;
		b.newCell()./**/styleCell( INTER )/**/;
		b.newCell();

		return b.getSpreadsheet();
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- CompileFactory
__@@__
private RebateComputationFactory compileFactoryFromSpreadsheet( String _sheetName ) throws Exception
	{
		EngineBuilder builder = /**/SpreadsheetCompiler.newEngineBuilder()/**/;
		builder./**/loadSpreadsheet/**/( _sheetName );
		builder./**/setFactoryClass/**/( RebateComputationFactory.class );
		builder./**/bindAllByName/**/();
		Engine engine = builder./**/compile/**/();
		return (RebateComputationFactory) engine./**/getComputationFactory/**/();
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- Factory
__@@__
public static abstract class RebateComputationFactory
	{
		public abstract RebateComputation newInstance( RebateInputs _inputs );
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- GenerateFile
__@@__
Spreadsheet s = buildSpreadsheet();
		SpreadsheetCompiler./**/saveSpreadsheet/**/( s, GENFILE, null );
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- GenerateStream
__@@__
Spreadsheet s = buildSpreadsheet();
		ByteArrayOutputStream /**/os/**/= new ByteArrayOutputStream();

		SpreadsheetSaver.Config cfg = new SpreadsheetSaver.Config();
		cfg.spreadsheet = s;
		cfg./**/typeExtension/**/= ".xls";
		cfg./**/outputStream/**/= os;
		/**/SpreadsheetCompiler.newSpreadsheetSaver( cfg ).save();/**/
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- GenerateTemplatedFile
__@@__
Spreadsheet s = buildTemplatedSpreadsheet();
		SpreadsheetCompiler.saveSpreadsheet( s, GENTEMPLATEDFILE, /**/TEMPLATEFILE/**/);
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- GenerateTemplatedStream
__@@__
Spreadsheet s = buildTemplatedSpreadsheet();
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		InputStream /**/ts/**/= new BufferedInputStream( new FileInputStream( TEMPLATEFILE ) );

		SpreadsheetSaver.Config cfg = new SpreadsheetSaver.Config();
		cfg.spreadsheet = s;
		cfg.typeExtension = ".xls";
		cfg.outputStream = os;
		cfg./**/templateInputStream/**/= ts;
		SpreadsheetCompiler.newSpreadsheetSaver( cfg ).save();
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- OwnUISheet; highlight -hlCalc-; strip -- defCalc; strip
__@@__
private Spreadsheet buildSpreadsheet()
	{
		SpreadsheetBuilder b = SpreadsheetCompiler./**/newSpreadsheetBuilder/**/();

		b./**/newCell/**/( b./**/cst( "CustomerRebate" )/**/);
		b.newCell( b./**/cst( 0.1 )/**/);
		// -- defCalc
		/* -hlCalc- */SpreadsheetBuilder.CellRef cr = b.currentCell();/* -hlCalc- */
		// -- defCalc

		b./**/newRow/**/();
		b.newCell( b.cst( "ArticleRebate" ) );
		b.newCell( b.cst( 0.05 ) );
		// -- defCalc
		/* -hlCalc- */SpreadsheetBuilder.CellRef ar = b.currentCell();/* -hlCalc- */

		b.newRow();
		b.newRow();
		b.newCell( b.cst( "Rebate" ) );
		b.newCell( /* -hlCalc- */b.op( Operator.PLUS, b.ref( cr ), b.ref( ar ) )/* -hlCalc- */);
		// -- defCalc

		return b./**/getSpreadsheet/**/();
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- OwnUISheet; omit -- defCalc
__@@__
private Spreadsheet buildSpreadsheet()
	{
		SpreadsheetBuilder b = SpreadsheetCompiler./**/newSpreadsheetBuilder/**/();

		b./**/newCell/**/( b./**/cst( "CustomerRebate" )/**/);
		b.newCell( b./**/cst( 0.1 )/**/);
		// -- defCalc
		/* -hlCalc- */SpreadsheetBuilder.CellRef cr = b.currentCell();/* -hlCalc- */
		// -- defCalc

		b./**/newRow/**/();
		b.newCell( b.cst( "ArticleRebate" ) );
		b.newCell( b.cst( 0.05 ) );
		// -- defCalc
		/* -hlCalc- */SpreadsheetBuilder.CellRef ar = b.currentCell();/* -hlCalc- */

		b.newRow();
		b.newRow();
		b.newCell( b.cst( "Rebate" ) );
		b.newCell( /* -hlCalc- */b.op( Operator.PLUS, b.ref( cr ), b.ref( ar ) )/* -hlCalc- */);
		// -- defCalc

		return b./**/getSpreadsheet/**/();
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- RebateInputs
__@@__
public static interface RebateInputs
	{
		int getCustomerCategory();
		int getArticleCategory();
		double getCustomerRebate();
		double getArticleRebate();
		Date getOrderDate();
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- StandardStrategy
__@@__
static class StandardRebateComputation extends RebateComputation
	{
		public StandardRebateComputation(RebateInputs _inputs)
		{
			super( _inputs );
		}

		@Override
		public double getRebate()
		{
			return Math.max( this.inputs.getCustomerRebate(), this.inputs.getArticleRebate() );
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- Strategy; strip; strip ---- Factory
__@@__
public static abstract class RebateComputation
	{
		static RebateComputationFactory factory = new StandardRebateComputationFactory();

		static RebateComputation newInstance( RebateInputs _inputs )
		{
			return factory.newInstance( _inputs );
		}

		protected final RebateInputs inputs;

		public RebateComputation(RebateInputs _inputs)
		{
			super();
			this.inputs = _inputs;
		}

		public abstract double getRebate();
	}

	// ---- Factory
	public static abstract class RebateComputationFactory
	{
		public abstract RebateComputation newInstance( RebateInputs _inputs );
	}

	// ---- Factory
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- UseCompiledFactory
__@@__
public void testAFC() throws Exception
	{
		LineItem item = new StrategyLineItem();
		/**/RebateComputation.factory = compileFactoryFromSpreadsheet( CUSTOMSHEETNAME );/**/
		double rebate = item.computeRebate();
		assertEquals( 0.15, rebate, 0.00001 );
	}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- computeStatic
__@@__
double computeRebate()
		{
			Date orderDate = getOrder().getDate();
			double customerRebate = getOrder().getCustomer().getStandardRebate();
			double articleRebate = getArticle().getSpecialRebateValidOn( orderDate );
			return Math.max( customerRebate, articleRebate );
		}
___@_@___
jc:org.formulacompiler.tutorials.Basics:---- computeStrategy
__@@__
double computeRebate()
		{
			RebateInputs inputs = new RebateInputsAdaptor( this );
			RebateComputation comp = RebateComputation.newInstance( inputs );
			return comp.getRebate();
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- ComplexOutput
__@@__
public static abstract class ComplexOutput
	{
		public double getComplex( int _int, long _long, String _string )
		{
			return -1;
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- GeneratedComplexGetter
__@@__
@Override
		public double getComplex( int _int, long _long, String _string )
		{
			if (_int == 1 && _long == 2 && _string.equals( "THREE" )) return getComplex__1();
			// ... other bound outputs
			return super.getComplex( _int, _long, _string );
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- GeneratedGetter
__@@__
@Override
		public double getOutput( String _valueName )
		{
			if (_valueName.equals( "ONETWOTHREE" )) return getOutput__1();
			if (_valueName.equals( "SUMINTER" )) return getOutput__2();
			// ... other bound outputs
			return super.getOutput( _valueName );
		}

		private double getOutput__1()
		{
			// Generated computation for cell ONETWOTHREE (corresponds to test spreadsheet):
			return getInput__1() + getInput__2() + getInput__3();
		}

		private double getOutput__2()
		{
			// Generated computation for cell SUMINTER (corresponds to test spreadsheet):
			return getInter__1() + getInter__2();
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- Input
__@@__
public static interface Input
	{
		double getInput( /**/String _valueName/**/);
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- InputCombination; omit
__@@__
public double getInput( int _a, boolean _b, String _c ) /**/{ return _a + Integer.valueOf( _c ); }/**/
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- InputSample
__@@__
public double getInput( String _valueName )
		{
			if (_valueName.equals( "ONE" )) return 1.0;
			if (_valueName.equals( "TWO" )) return 2.0;
			if (_valueName.equals( "THREE" )) return 3.0;
			return 0.0;
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- InputVariants; omit
__@@__
// Native types
		public double getInput( byte _param ) /**/{ return _param; }/**/
		public double getInput( short _param ) /**/{ return _param; }/**/
		public double getInput( int _param ) /**/{ return _param; }/**/
		public double getInput( long _param ) /**/{ return _param; }/**/
		public double getInput( double _param ) /**/{ return _param; }/**/
		public double getInput( float _param ) /**/{ return _param; }/**/
		public double getInput( char _param ) /**/{ return _param; }/**/
		public double getInput( boolean _param ) /**/{ return (_param? 1 : 0); }/**/
		
		// Boxed types
		public double getInput( Byte _param ) /**/{ return _param; }/**/
		public double getInput( Short _param ) /**/{ return _param; }/**/
		public double getInput( Integer _param ) /**/{ return _param; }/**/
		public double getInput( Long _param ) /**/{ return _param; }/**/
		public double getInput( Double _param ) /**/{ return _param; }/**/
		public double getInput( Float _param ) /**/{ return _param; }/**/
		public double getInput( Character _param ) /**/{ return _param; }/**/
		public double getInput( Boolean _param ) /**/{ return (_param? 1 : 0); }/**/

		// Other types
		public double getInput( String _param ) /**/{ return Double.valueOf( _param ); }/**/
		
		// Application-defined enumerations
		public double getInput( MyEnum _param ) /**/{ return _param.ordinal(); };/**/
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- MyEnum
__@@__
public static enum MyEnum
	{
		ZERO, ONE, TWO;
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- Output
__@@__
public static abstract class Output
	{
		public double getOutput( /**/String _valueName/**/)
		{
			return -1;
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- bindComplexOutput
__@@__
Method outputMethod = ComplexOutput.class./**/getMethod( "getComplex", Integer.TYPE, Long.TYPE, String.class )/**/;
		binder
				.defineOutputCell( spreadsheet.getCell( "Complex" ), /**/new CallFrame( outputMethod, 1, 2, "THREE" )/**/);
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- bindInputCombination
__@@__
Method mtd = ic.getMethod( "getInput", /**/Integer.TYPE, Boolean.TYPE, String.class/**/ );
		bnd.defineInputCell( ss.getCell( "comb" ), new CallFrame( mtd, /**/12, true, "24"/**/ ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- bindInputVariants
__@@__
// Native types
		bnd.defineInputCell( ss.getCell( "byte" ), new CallFrame( ic.getMethod( "getInput", Byte.TYPE ), (byte) 123 ) );
		bnd.defineInputCell( ss.getCell( "short" ), new CallFrame( ic.getMethod( "getInput", Short.TYPE ), (short) 1234 ) );
		bnd.defineInputCell( ss.getCell( "int" ), new CallFrame( ic.getMethod( "getInput", Integer.TYPE ), 12345 ) );
		bnd.defineInputCell( ss.getCell( "long" ), new CallFrame( ic.getMethod( "getInput", Long.TYPE ), 123456L ) );
		bnd.defineInputCell( ss.getCell( "double" ), new CallFrame( ic.getMethod( "getInput", Double.TYPE ), 123.45 ) );
		bnd.defineInputCell( ss.getCell( "float" ), new CallFrame( ic.getMethod( "getInput", Float.TYPE ), 123.456F ) );
		bnd.defineInputCell( ss.getCell( "char" ), new CallFrame( ic.getMethod( "getInput", Character.TYPE ), 'a' ) );
		bnd.defineInputCell( ss.getCell( "bool" ), new CallFrame( ic.getMethod( "getInput", Boolean.TYPE ), true ) );

		// Boxed types
		bnd.defineInputCell( ss.getCell( "bbyte" ), new CallFrame( ic.getMethod( "getInput", Byte.class ), (byte) 123 ) );
		bnd.defineInputCell( ss.getCell( "bshort" ), new CallFrame( ic.getMethod( "getInput", Short.class ), (short) 1234 ) );
		bnd.defineInputCell( ss.getCell( "bint" ), new CallFrame( ic.getMethod( "getInput", Integer.class ), 12345 ) );
		bnd.defineInputCell( ss.getCell( "blong" ), new CallFrame( ic.getMethod( "getInput", Long.class ), 123456L ) );
		bnd.defineInputCell( ss.getCell( "bdouble" ), new CallFrame( ic.getMethod( "getInput", Double.class ), 123.45 ) );
		bnd.defineInputCell( ss.getCell( "bfloat" ), new CallFrame( ic.getMethod( "getInput", Float.class ), 123.456F ) );
		bnd.defineInputCell( ss.getCell( "bchar" ), new CallFrame( ic.getMethod( "getInput", Character.class ), 'a' ) );
		bnd.defineInputCell( ss.getCell( "bbool" ), new CallFrame( ic.getMethod( "getInput", Boolean.class ), true ) );

		// Other types
		bnd.defineInputCell( ss.getCell( "string" ), new CallFrame( ic.getMethod( "getInput", String.class ), "123.4567" ) );

		// Application-defined enumerations
		bnd.defineInputCell( ss.getCell( "enum" ), new CallFrame( ic.getMethod( "getInput", MyEnum.class ), MyEnum.TWO ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- bindNamedInputs
__@@__
final Method inputMethod = Input.class./**/getMethod( "getInput", String.class )/**/;
		for (Spreadsheet.NameDefinition def : /**/spreadsheet.getDefinedNames()/**/) {
			if (def instanceof Spreadsheet.CellNameDefinition) {
				final Spreadsheet.CellNameDefinition cellDef = (Spreadsheet.CellNameDefinition) def;
				final String /**/cellName/**/= cellDef.getName();
				if ("I_".equals( cellName.substring( 0, 2 ) )) {
					final Spreadsheet.Cell cell = cellDef.getCell();
					final String /**/valueName/**/= cellName.substring( 2 ).toUpperCase();
					binder.defineInputCell( cell, /**/new CallFrame( inputMethod, valueName )/**/);
				}
			}
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- bindNamedOutputs
__@@__
final Method outputMethod = Output.class./**/getMethod( "getOutput", String.class )/**/;
		for (Spreadsheet.NameDefinition def : /**/spreadsheet.getDefinedNames()/**/) {
			if (def instanceof Spreadsheet.CellNameDefinition) {
				final Spreadsheet.CellNameDefinition cellDef = (Spreadsheet.CellNameDefinition) def;
				final String /**/cellName/**/= cellDef.getName();
				if ("O_".equals( cellName.substring( 0, 2 ) )) {
					final Spreadsheet.Cell cell = cellDef.getCell();
					final String /**/valueName/**/= cellName.substring( 2 ).toUpperCase();
					binder.defineOutputCell( cell, /**/new CallFrame( outputMethod, valueName )/**/);
				}
			}
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- checkComplexResults
__@@__
assertEquals( 5.0, output.getComplex( 1, 2, "THREE" ), 0.001 );

		// Check undefined results by incrementing each argument in turn:
		assertEquals( -1.0, output.getComplex( 2, 2, "THREE" ), 0.001 );
		assertEquals( -1.0, output.getComplex( 1, 3, "THREE" ), 0.001 );
		assertEquals( -1.0, output.getComplex( 1, 2, "FOUR" ), 0.001 );
___@_@___
jc:org.formulacompiler.tutorials.BindingByName:---- checkResults
__@@__
assertEquals( 6.0, output.getOutput( "ONETWOTHREE" ), 0.001 );
		assertEquals( 8.0, output.getOutput( "SUMINTER" ), 0.001 );
		assertEquals( -1.0, output.getOutput( "UNDEF" ), 0.001 );
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- Factory
__@@__
public static interface Factory
	{
		/**/Output/**/ newInstance( Input _input );
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- Input
__@@__
public static interface Input
	{
		double getSomeValue();
		double getAnotherValue();
		int getDecade();
		double getValueForYear( int year );
		String getName();
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- Output
__@@__
public static interface Output
	{
		double getResult();
		double getCoefficient();
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- OutputWithDefaults
__@@__
public static abstract class OutputWithDefault /**/implements Output/**/
	{
		private final Input input;

		public OutputWithDefault( /**/Input _input/**/ )
		{
			super();
			this.input = _input;
		}

		public abstract double getResult();

		public double getCoefficient()
		{
			return /**/this.input.getSomeValue()/**/ * 0.02;
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- bindChainedInputs
__@@__
cell = spreadsheet.getCell( "NAME_LENGTH" );
		method = Input.class.getMethod( "getName" );
		chainedMethod = String.class.getMethod( "length" );
		binder.defineInputCell( cell, new CallFrame( method )/**/.chain/**/( chainedMethod ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- bindDynamicParamInputs
__@@__
cell = spreadsheet.getCell( "YEAR_x" );
		method = Input.class.getMethod( "getValueForYear", /**/Integer.TYPE/**/ );
		binder.defineInputCell( cell, new CallFrame( method, /**/spreadsheet.getCell( "x" )/**/ ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- bindParamInputs
__@@__
cell = spreadsheet.getCell( "YEAR_1994" );
		method = Input.class.getMethod( "getValueForYear", /**/Integer.TYPE/**/ );
		binder.defineInputCell( cell, new CallFrame( method, /**/1994/**/ ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- bindPlainInputs
__@@__
cell = spreadsheet./**/getCell/**/( "SOME_VALUE" );
		method = Input.class./**/getMethod/**/( "getSomeValue" );
		binder./**/defineInputCell/**/( cell, new CallFrame( method ) );

		cell = spreadsheet.getCell( "OTHER_VALUE" );
		method = Input.class.getMethod( "getAnotherValue" );
		binder.defineInputCell( cell, new CallFrame( method ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- bindPlainOutputs
__@@__
cell = spreadsheet.getCell( "RESULT" );
		method = Output.class.getMethod( "getResult" );
		binder.defineOutputCell( cell, new CallFrame( method ) );

		cell = spreadsheet.getCell( "COEFF" );
		method = Output.class.getMethod( "getCoefficient" );
		binder.defineOutputCell( cell, new CallFrame( method ) );
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- getBinder
__@@__
Spreadsheet spreadsheet = builder./**/getSpreadsheet()/**/;
		SpreadsheetBinder.Section binder = builder./**/getRootBinder/**/();
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- setupBuilder; highlight -in-; strip -out-
__@@__
EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();
		builder.loadSpreadsheet( path );
		/* -in- */builder.setInputClass( Input.class );/* -in- */
		/* -out- */builder.setOutputClass( Output.class );/* -out- */
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- setupBuilder; highlight -out-; strip -in-
__@@__
EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();
		builder.loadSpreadsheet( path );
		/* -in- */builder.setInputClass( Input.class );/* -in- */
		/* -out- */builder.setOutputClass( Output.class );/* -out- */
___@_@___
jc:org.formulacompiler.tutorials.BindingCells:---- setupBuilderWithDefaults
__@@__
EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();
		builder.loadSpreadsheet( path );
		/**/builder.setFactoryClass( Factory.class );/**/
		/**/builder.setOutputClass( OutputWithDefault.class );/**/
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- CC
__@@__
public static interface CustomerCategory
	{
		// ...
		double getDiscount();
		// ...
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- Input
__@@__
public static interface Input
	{
		CustomerCategory getCC( int _iCC );
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- Output
__@@__
public static interface Output 
	{
		double getNewDiscount( int _iCC );
		double getNewCreditLimit( int _iCC );
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- Output2
__@@__
public static interface Output2
	{
		CC getCC( int _iCC );

		public interface CC
		{
			double getNewDiscount();
			double getNewCreditLimit();
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- OutputFacade
__@@__
public static class OutputFacade
	{
		final Output output;

		public OutputFacade(Output _output)
		{
			super();
			this.output = _output;
		}

		public Output getOutput()
		{
			return this.output;
		}

		public CC getCC( /**/int n/**/ )
		{
			return new CC( /**/n/**/ );
		}

		private class CC
		{
			private int iCC;
			
			public CC(/**/int _iCC/**/)
			{
				super();
				this.iCC = _iCC;
			}
			
			public double getNewDiscount()
			{
				return getOutput().getNewDiscount( /**/this.iCC/**/ );
			}
			
			public double getNewCreditLimit()
			{
				return getOutput().getNewCreditLimit( /**/this.iCC/**/ );
			}
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- bindInputs
__@@__
intfGetter = Input.class.getMethod( /**/"getCC", Integer.TYPE/**/ );
		valueGetter = CustomerCategory.class.getMethod( /**/"getDiscount"/**/ );
		for (Spreadsheet.NameDefinition def : spreadsheet.getDefinedNames()) {
			if (def instanceof Spreadsheet.CellNameDefinition) {
				final Spreadsheet.CellNameDefinition cellDef = (Spreadsheet.CellNameDefinition) def;
				final Spreadsheet.Cell cell = cellDef.getCell();
				final String name = cellDef.getName();
				if (name.startsWith( "CC_DISCOUNT_" )) {
					final int iCC = Integer.parseInt( name.substring( "CC_DISCOUNT_".length() ) );
					binder.defineInputCell( cell, new CallFrame( intfGetter, /**/iCC/**/ )./**/chain/**/( valueGetter ) );
				}
			}
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInstances:---- bindOutputs
__@@__
outputGetter = Output.class.getMethod( /**/"getNewDiscount", Integer.TYPE/**/ );
		for (Spreadsheet.NameDefinition def : spreadsheet.getDefinedNames()) {
			if (def instanceof Spreadsheet.CellNameDefinition) {
				final Spreadsheet.CellNameDefinition cellDef = (Spreadsheet.CellNameDefinition) def;
				final Spreadsheet.Cell cell = cellDef.getCell();
				final String name = cellDef.getName();
				if (name.startsWith( "CC_NEWDISCOUNT_" )) {
					final int iCC = Integer.parseInt( name.substring( "CC_NEWDISCOUNT_".length() ) );
					binder.defineOutputCell( cell, new CallFrame( outputGetter, /**/iCC/**/ ) );
				}
				// ... dito for CreditLimit
			}
		}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Input
__@@__
public static final class Input
	{
		private final InputA a;
		private final InputB b;

		public Input(InputA _a, InputB _b)
		{
			super();
			this.a = _a;
			this.b = _b;
		}

		public InputA getA()
		{
			return this.a;
		}

		public InputB getB()
		{
			return this.b;
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Inputs
__@@__
public static interface InputA
	{
		double getValue();
	}

	public static interface InputB
	{
		double getValue();
		double getOther();
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Output
__@@__
public static interface Output extends OutputA, OutputB
	{
		// no own content
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Output2
__@@__
public static interface Output2 
	{
		double getResultA();
		double getResultB();
		double getOtherB();
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Output2A
__@@__
public static class OutputAImpl implements /**/OutputA/**/
	{
		private final Output2 output;

		public OutputAImpl(Output2 _output)
		{
			super();
			this.output = _output;
		}

		public double getResult()
		{
			return this.output./**/getResultA/**/();
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Output2B
__@@__
public static class OutputBImpl implements /**/OutputB/**/
	{
		private final Output2 output;

		public OutputBImpl(Output2 _output)
		{
			super();
			this.output = _output;
		}

		public double getResult()
		{
			return this.output./**/getResultB/**/();
		}

		public double getOther()
		{
			return this.output.getOtherB();
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Output3
__@@__
public static interface Output3
	{
		OutputA getA();
		OutputB getB();
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- Outputs
__@@__
public static interface OutputA
	{
		double getResult();
	}

	public static interface OutputB
	{
		double getResult();
		double getOther();
	}
___@_@___
jc:org.formulacompiler.tutorials.BindingToMultipleInterfaces:---- bindInputs
__@@__
cell = spreadsheet.getCell( "A_VALUE" );
		intfGetter = Input.class.getMethod( /**/"getA"/**/ );
		valueGetter = String.class.getMethod( "getValue" );
		binder.defineInputCell( cell, new CallFrame( intfGetter )./**/chain/**/( valueGetter ) );

		cell = spreadsheet.getCell( "B_VALUE" );
		intfGetter = Input.class.getMethod( /**/"getB"/**/ );
		valueGetter = String.class.getMethod( "getValue" );
		binder.defineInputCell( cell, new CallFrame( intfGetter )./**/chain/**/( valueGetter ) );
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:-- OutputsAlternatives
__@@__
/**/List<EmployeeBonusComputation>/**/employeesList();
		/**/Collection<EmployeeBonusComputation>/**/employeesCollection();
		/**/Iterator<EmployeeBonusComputation>/**/employeesIterator();
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- Inputs
__@@__
@ScaledLong(4)
	public static interface BonusData
	{
		long bonusTotal();
		long overtimeSalaryPerHour();
		/**/EmployeeBonusData[]/**/employees();
	}

	@ScaledLong(4)
	public static interface /**/EmployeeBonusData/**/
	{
		long baseSalary();
		int hoursOvertime();
	}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- OutputFactory
__@@__
public static interface BonusComputationFactory
	{
		public BonusComputation newComputation( BonusData _data );
	}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- Outputs; omit -- OutputsAlternatives
__@@__
@ScaledLong(4)
	public static interface BonusComputation extends Resettable
	{
		/**/EmployeeBonusComputation[]/**/employees();
		// -- OutputsAlternatives
		/**/List<EmployeeBonusComputation>/**/employeesList();
		/**/Collection<EmployeeBonusComputation>/**/employeesCollection();
		/**/Iterator<EmployeeBonusComputation>/**/employeesIterator();
		// -- OutputsAlternatives
	}

	@ScaledLong(4)
	public static interface /**/EmployeeBonusComputation/**/
	{
		long bonusAmount();
	}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindEmployeeInputs
__@@__
Cell salaryCell = sheet.getCell( "BaseSalary" );
		Method salaryMethod = /**/inputType/**/.getMethod( "baseSalary" );
		/**/employees/**/.defineInputCell( salaryCell, new CallFrame( salaryMethod ) );

		Cell overtimeCell = sheet.getCell( "HoursOvertime" );
		Method overtimeMethod = /**/inputType/**/.getMethod( "hoursOvertime" );
		/**/employees/**/.defineInputCell( overtimeCell, new CallFrame( overtimeMethod ) );
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindEmployeeOutputs
__@@__
Cell bonusCell = sheet.getCell( "BonusAmount" );
		Method bonusMethod = /**/outputType/**/.getMethod( "bonusAmount" );
		/**/employees/**/./**/defineOutputCell/**/( bonusCell, new CallFrame( bonusMethod ) );
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindGlobals
__@@__
Cell bonusTotalCell = sheet.getCell( "BonusTotal" );
		Method bonusTotalMethod = BonusData.class.getMethod( "bonusTotal" );
		/**/binder/**/.defineInputCell( bonusTotalCell, new CallFrame( bonusTotalMethod ) );

		Cell overtimeRateCell = sheet.getCell( "OvertimeSalaryPerHour" );
		Method overtimeRateMethod = BonusData.class.getMethod( "overtimeSalaryPerHour" );
		/**/binder/**/.defineInputCell( overtimeRateCell, new CallFrame( overtimeRateMethod ) );
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindSections; omit -- omit
__@@__
Section binder = _builder.getRootBinder();
		Range range = sheet.getRange( "Employees" );

		// input
		Method inputMethod = /**/BonusData/**/.class.getMethod( /**/"employees"/**/);
		CallFrame inputCall = new CallFrame( inputMethod );
		Class inputType = /**/EmployeeBonusData/**/.class;

		// output
		Method outputMethod = /**/BonusComputation/**/.class.getMethod( /**/"employees"/**/);
		// -- omit
		switch (_version) {
			case LIST:
				outputMethod = BonusComputation.class.getMethod( "employeesList" );
				break;
			case COLLECTION:
				outputMethod = BonusComputation.class.getMethod( "employeesCollection" );
				break;
			case ITERATOR:
				outputMethod = BonusComputation.class.getMethod( "employeesIterator" );
				break;
		}
		// -- omit
		CallFrame outputCall = new CallFrame( outputMethod );
		Class outputType = /**/EmployeeBonusComputation/**/.class;

		Orientation orient = Orientation.VERTICAL;

		Section /**/employees/**/= binder./**/defineRepeatingSection/**/( range, orient, inputCall, inputType,
				outputCall, outputType );
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputs
__@@__
EmployeeBonusComputation[] /**/emps = computation.employees()/**/;
				for (int i = 0; i < _expectedBonusAmounts.length; i++) {
					long expected = _expectedBonusAmounts[ i ];
					long actual = /**/emps[ i ].bonusAmount()/**/;
					assertEquals( expected, actual );
				}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputsCollection
__@@__
Collection<EmployeeBonusComputation> /**/empColl = computation.employeesCollection()/**/;
				assertEquals( _expectedBonusAmounts.length, empColl.size() );
				int ix = 0;
				for (EmployeeBonusComputation emp : empColl) {
					long expected = _expectedBonusAmounts[ ix++ ];
					long actual = /**/emp.bonusAmount()/**/;
					assertEquals( expected, actual );
				}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputsIterator
__@@__
Iterator<EmployeeBonusComputation> /**/empIter = computation.employeesIterator()/**/;
				for (int i = 0; i < _expectedBonusAmounts.length; i++) {
					assertTrue( empIter.hasNext() );
					long expected = _expectedBonusAmounts[ i ];
					long actual = /**/empIter.next().bonusAmount()/**/;
					assertEquals( expected, actual );
				}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputsList
__@@__
List<EmployeeBonusComputation> /**/empList = computation.employeesList()/**/;
				for (int i = 0; i < _expectedBonusAmounts.length; i++) {
					long expected = _expectedBonusAmounts[ i ];
					long actual = /**/empList.get( i ).bonusAmount()/**/;
					assertEquals( expected, actual );
				}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee:---- setupInputs
__@@__
BonusDataImpl data = new BonusDataImpl( _bonusTotal, _overtimeSalaryPerHour );
		for (int i = 0; i < _salaries.length; i++) {
			EmployeeBonusDataImpl emp = new EmployeeBonusDataImpl( _salaries[ i ], _hoursOvertime[ i ] );
			data.addEmployee( emp );
		}
		BonusComputation computation = _factory.newComputation( data );
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee_FullyLinked:---- Outputs
__@@__
@ScaledLong(4)
	public static interface BonusComputation extends Resettable
	{
		EmployeeBonusComputation[] employees();
	}

	@ScaledLong(4)
	public static abstract class EmployeeBonusComputation
	{
		private final BonusComputation parent;

		public EmployeeBonusComputation(EmployeeBonusData _inputs, /**/BonusComputation _parent/**/)
		{
			super();
			this.parent = _parent;
		}

		public/**/BonusComputation parent()/**/
		{
			return this.parent;
		}

		public abstract long bonusAmount();
	}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee_FullyLinked:---- consumeOutputs
__@@__
BonusComputation /**/comp = _factory.newComputation( data )/**/;
		EmployeeBonusComputation[] /**/empOutputs = comp.employees()/**/;
		for (int i = 0; i < _expectedBonusAmounts.length; i++) {
			/**/assertSame( comp, empOutputs[ i ].parent() );/**/
		}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee_Linked:---- Outputs
__@@__
@ScaledLong(4)
	public static interface BonusComputation extends Resettable
	{
		EmployeeBonusComputation[] employees();
	}

	@ScaledLong(4)
	public static abstract class EmployeeBonusComputation
	{
		private final EmployeeBonusData inputs;

		public EmployeeBonusComputation( /**/EmployeeBonusData _inputs/**/)
		{
			super();
			this.inputs = _inputs;
		}

		public/**/EmployeeBonusData inputs()/**/
		{
			return this.inputs;
		}

		public abstract long bonusAmount();
	}
___@_@___
jc:org.formulacompiler.tutorials.BonusPerEmployee_Linked:---- consumeOutputs
__@@__
BonusComputation comp = _factory.newComputation( data );
		EmployeeBonusComputation[] /**/empOutputs = comp.employees()/**/;
		EmployeeBonusData[] /**/empInputs = data.employees()/**/;
		for (int i = 0; i < _expectedBonusAmounts.length; i++) {
			/**/assertSame( empInputs[ i ], empOutputs[ i ].inputs() );/**/
		}
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- Output
__@@__
public static interface Output /**/extends Resettable/**/
	{
		BigDecimal getArea();
		BigDecimal getVolume();
	}
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- cache
__@@__
Input input = new Input();
		Output output = (Output) factory.newComputation( input );

		input.setSide( "10" );
		assertEquals( "100", output.getArea().toPlainString() );
		assertEquals( "1000", output.getVolume().toPlainString() );

		input.setSide( "5" );
		assertEquals( /**/"100"/**/, output.getArea().toPlainString() );
		assertEquals( /**/"1000"/**/, output.getVolume().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- cacheAccesses
__@@__
Input input = new Input();
		Output output = (Output) factory.newComputation( input );
		assertEquals( /**/0/**/, input.getNumberOfAccessesToSide() );
		output./**/getArea()/**/;
		assertEquals( /**/1/**/, input.getNumberOfAccessesToSide() );
		output./**/getVolume()/**/;
		assertEquals( /**/1/**/, input.getNumberOfAccessesToSide() );
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- compile
__@@__
EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();
		builder.loadSpreadsheet( path );
		builder.setInputClass( Input.class );
		builder.setOutputClass( Output.class );
		builder.setNumericType( unboundedBigDecimal );
		/**/builder.setFullCaching( true );/**/
		builder.bindAllByName();
		SaveableEngine engine = builder.compile();
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- noCache
__@@__
Input input = new Input();
		Output output = (Output) factory.newComputation( input );

		input.setSide( /**/"10"/**/ );
		assertEquals( /**/"100"/**/, output.getArea().toPlainString() );
		assertEquals( /**/"1000"/**/, output.getVolume().toPlainString() );

		input.setSide( /**/"5"/**/ );
		assertEquals( /**/"25"/**/, output.getArea().toPlainString() );
		assertEquals( /**/"125"/**/, output.getVolume().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- noCacheAccesses
__@@__
Input input = new Input();
		Output output = (Output) factory.newComputation( input );
		assertEquals( /**/0/**/, input.getNumberOfAccessesToSide() );
		output./**/getArea()/**/;
		assertEquals( /**/2/**/, input.getNumberOfAccessesToSide() );
		output./**/getVolume()/**/;
		assertEquals( /**/5/**/, input.getNumberOfAccessesToSide() );
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- reset
__@@__
input.setSide( "10" );
		assertEquals( "100", output.getArea().toPlainString() );
		assertEquals( "1000", output.getVolume().toPlainString() );

		input.setSide( "5" );
		/**/output.reset();/**/
		assertEquals( /**/"25"/**/, output.getArea().toPlainString() );
		assertEquals( /**/"125"/**/, output.getVolume().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- timed
__@@__
long startTime = System.nanoTime();
			output.getArea();
			output.getVolume();
			long timeTaken = System.nanoTime() - startTime;
___@_@___
jc:org.formulacompiler.tutorials.Caching:---- timing
__@@__
input.setSide( "123456789123456789123456789123456789123456789123456789123456789123456789" );
		long plainTime = time( plainFactory, input );
		long cachingTime = time( cachingFactory, input );
		assertTrue( "Caching is at least half as fast again; caching is " + cachingTime + " vs. " + plainTime,
				cachingTime * 3 / 2 < plainTime );
___@_@___
jc:org.formulacompiler.tutorials.CustomClassLoader:---- compile
__@@__
builder./**/setParentClassLoaderForEngine/**/( myClassLoader );
		SaveableEngine compiledEngine = builder.compile();
		assertSame( myClassLoader, ((ClassLoader) compiledEngine).getParent() );
___@_@___
jc:org.formulacompiler.tutorials.CustomClassLoader:---- load
__@@__
EngineLoader.Config cfg = new EngineLoader.Config();
		cfg./**/parentClassLoader/**/ = myClassLoader;
		Engine loadedEngine = FormulaRuntime.loadEngine( cfg, new ByteArrayInputStream( bytes ) );
		assertSame( myClassLoader, ((ClassLoader) loadedEngine).getParent() );
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrders:-- CustomerDataAlternatives
__@@__
public/**/Iterable<OrderData>/**/ordersForLastNDaysIterable( int _days );
		public/**/Iterator<OrderData>/**/ordersForLastNDaysIterator( int _days );
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrders:---- CustomerData; omit -- CustomerDataAlternatives
__@@__
public static interface CustomerData
	{
		public/**/OrderData[]/**/ordersForLastNDays( int _days );
		// -- CustomerDataAlternatives
		public/**/Iterable<OrderData>/**/ordersForLastNDaysIterable( int _days );
		public/**/Iterator<OrderData>/**/ordersForLastNDaysIterator( int _days );
		// -- CustomerDataAlternatives
	}
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrders:---- OrderData
__@@__
public static interface OrderData
	{
		public double total();
	}
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrders:---- bindOrderValues
__@@__
Cell totalCell = sheet.getCell( "OrderTotal" );
		Method totalMethod = /**/OrderData/**/.class.getMethod( "total" );
		/**/orders/**/.defineInputCell( totalCell, new CallFrame( totalMethod ) );
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrders:---- bindOrders; omit -- omit
__@@__
Section binder = _builder.getRootBinder();
		Range range = sheet.getRange( "OrdersForLastThreeMonths" );
		Method mtd = /**/CustomerData/**/.class.getMethod( /**/"ordersForLastNDays"/**/, Integer.TYPE );
		// -- omit
		switch (_version) {
			case ITERABLE:
				mtd = CustomerData.class.getMethod( "ordersForLastNDaysIterable", Integer.TYPE );
				break;
			case ITERATOR:
				mtd = CustomerData.class.getMethod( "ordersForLastNDaysIterator", Integer.TYPE );
				break;
		}
		// -- omit
		CallFrame call = new CallFrame( mtd, 90 ); // last 3 months is 90 days back
		Orientation orient = Orientation.VERTICAL;
		Class input = /**/OrderData/**/.class;

		Section /**/orders/**/= binder./**/defineRepeatingSection/**/( range, orient, call, input, null, null );
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrders:---- bindRating
__@@__
Cell ratingCell = sheet.getCell( "Rating" );
		Method ratingMethod = CustomerRating.class.getMethod( "rating" );
		/**/binder/**/.defineOutputCell( ratingCell, new CallFrame( ratingMethod ) );
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrdersComplex:---- OrderData
__@@__
public static interface OrderData
	{
		public double total();
		/**/public Date date();/**/
	}
___@_@___
jc:org.formulacompiler.tutorials.CustomerRatingWithOrdersComplex:---- bindOrderValues
__@@__
Cell totalCell = sheet.getCell( "OrderTotal" );
		/**/orders/**/.defineInputCell( totalCell, new CallFrame( /**/OrderData/**/.class.getMethod( "total" ) ) );

		Cell dateCell = sheet.getCell( "OrderDate" );
		/**/orders/**/.defineInputCell( dateCell, new CallFrame( /**/OrderData/**/.class.getMethod( "date" ) ) );
___@_@___
jc:org.formulacompiler.tutorials.Decompilation:---- asString
__@@__
// ... set up engine definition
		SaveableEngine engine = builder.compile();
		ByteCodeEngineSource source = FormulaDecompiler.decompile( engine );
		String text = source.toString();
___@_@___
jc:org.formulacompiler.tutorials.Decompilation:---- saveTo
__@@__
// ... set up engine definition
		SaveableEngine engine = builder.compile();
		ByteCodeEngineSource source = FormulaDecompiler.decompile( engine );
		source.saveTo( new File( pathToTargetFolder ) );
___@_@___
jc:org.formulacompiler.tutorials.EnvironmentConfig:---- customLocaleFactory
__@@__
Computation.Config /**/config/**/ = new Computation.Config( /**/_locale/**/ );
		MyFactory factory = (MyFactory) _engine./**/getComputationFactory( config )/**/;
___@_@___
jc:org.formulacompiler.tutorials.EnvironmentConfig:---- customLocaleTest
__@@__
assertComputation( /**/"37287,4211"/**/, _engine, Locale./**/GERMAN/**/ );
		assertComputation( /**/"37287.4211"/**/, _engine, Locale./**/ENGLISH/**/ );
___@_@___
jc:org.formulacompiler.tutorials.EnvironmentConfig:---- customLocaleUse
__@@__
MyComputation computation = _factory.newComputation( new MyInputs() );
		String actual = computation.formatted();
___@_@___
jc:org.formulacompiler.tutorials.EnvironmentConfig:---- defaultLocaleTest
__@@__
/**/Locale.setDefault/**/( Locale.GERMAN );
			assertComputation( "37287,4211", (MyFactory) _engine.getComputationFactory() );
			/**/Locale.setDefault/**/( Locale.ENGLISH );
			assertComputation( "37287.4211", (MyFactory) _engine.getComputationFactory() );
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange1
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"BadRange1"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (/**/SpreadsheetException.SectionExtentNotCovered e/**/) {
			String err = /**/"Range C2:C3 does not fully cover the height of its parent section B2:C4 (which iterates section()).\n"
					+ "Referenced by cell B11."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange2
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"BadRange2"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (/**/SpreadsheetException.SectionExtentNotCovered e/**/) {
			String err = /**/"Range C3:C4 does not fully cover the height of its parent section B2:C4 (which iterates section()).\n"
					+ "Referenced by cell B12."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange3
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"BadRange3"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (/**/SpreadsheetException.SectionExtentNotCovered e/**/) {
			String err = /**/"Range C3:C3 does not fully cover the height of its parent section B2:C4 (which iterates section()).\n"
					+ "Referenced by cell B13."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange4
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"BadRange4"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (/**/SpreadsheetException.SectionExtentNotCovered e/**/) {
			String err = /**/"Range C3:C3 does not fully cover the height of its parent section B2:C4 (which iterates section()).\n"
					+ "Referenced by cell B14."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRef
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"BadRef"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (/**/SpreadsheetException.SectionExtentNotCovered e/**/) {
			String err = /**/"Range C2:C2 does not fully cover the height of its parent section B2:C4 (which iterates section()).\n"
					+ "Referenced by cell B10."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- bindSection
__@@__
Range range = sheet.getRange( "Section" );
		CallFrame call = new CallFrame( MyInputs.class.getMethod( "section" ) );
		Class target = MyElement.class;
		Section section = root.defineRepeatingSection( range, Orientation.REPEAT_ROWS, call, target, null, null );
		section.defineInputCell( sheet.getRange( "Name" ).getTopLeft(), new CallFrame( target.getMethod( "name" ) ) );
		section.defineInputCell( sheet.getRange( "Value" ).getTopLeft(), new CallFrame( target.getMethod( "value" ) ) );
___@_@___
jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- goodRef
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"GoodRef"/**/);
		Engine engine = builder.compile();
		MyFactory factory = (MyFactory) engine.getComputationFactory();
		MyComputation computation = factory.newComputation( new MyInputs() );
		assertEquals( 4 + 5 + 6 + 7, computation.result() );
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionFromInput:---- MyInputs
__@@__
public static class MyInputs
	{
		public String value()
		{
			return "Hello, world!";
		}
	}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionFromInput:---- StringAsInt
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"numOutput"/**/);
		bindInputNamed( builder, "numInput" );
		try {
			builder.compile();
			fail();
		}
		catch (/**/CompilerException.UnsupportedDataType e/**/) {
			String err = /**/"Cannot convert from a java.lang.String to a double."
					+ "\nCaused by return type of input 'public java.lang.String org.formulacompiler.tutorials.ErrorUnsupportedConversionFromInput$MyInputs.value()'."
					+ "\nCell containing expression is B2."
					+ "\nReferenced by cell B2."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionToOutput:---- MyComputation
__@@__
public static interface MyComputation
	{
		public int result();
	}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionToOutput:---- StringAsInt
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"stringOutput"/**/);
		bindInputNamed( builder, "stringInput" );
		try {
			builder.compile();
			fail();
		}
		catch (/**/CompilerException.UnsupportedDataType e/**/) {
			String err = /**/"Cannot convert from a string to a int."
					+ "\nCaused by return type of input 'public abstract int org.formulacompiler.tutorials.ErrorUnsupportedConversionToOutput$MyComputation.result()'."
					+ "\nCell containing expression is A1."
					+ "\nReferenced by cell A1."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindIndependent
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"Independent"/**/);
		SaveableEngine engine = builder.compile();
		MyFactory factory = (MyFactory) engine.getComputationFactory();
		MyComputation computation = factory.newComputation( new MyInputs() );
		/**/assertEquals( 3, computation.result() );/**/
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindInfo
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"Info"/**/ );
		try {
			/**/builder.compile();/**/
			fail();
		}
		catch (/**/CompilerException.UnsupportedExpression e/**/) {
			String err = /**/"Unsupported function INFO encountered in expression 1.0+INFO( <<? B1); error location indicated by <<?." 
				+ "\nCell containing expression is A1."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindParsedButUnsupported
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"Unsupported"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (CompilerException.UnsupportedExpression e) {
			String err = /**/"Function LENB is not supported for double engines."/**/
				+ /**/"\nIn expression LEN(  >> LENB( B4 ) <<  ); error location indicated by >>..<<."/**/
				+ "\nCell containing expression is A4."
				+ "\nReferenced by cell A4.";
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindReferencesInfo
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"ReferencesInfo"/**/);
		try {
			builder.compile();
			fail();
		}
		catch (CompilerException.UnsupportedExpression e) {
			String err = "Unsupported function INFO encountered in expression 1.0+INFO( <<? B1); error location indicated by <<?." 
				+ "\nCell containing expression is A1."
				+ /**/"\nReferenced by cell A2."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedFunctionVariant:---- BindBad
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"Bad"/**/);
		/**/bindInputNamed( builder, "Type" );/**/
		try {
			/**/builder.compile();/**/
			fail();
		}
		catch (/**/CompilerException.UnsupportedExpression e/**/) {
			String err = /**/"The last argument to MATCH, the match type, must be constant, but is MyInputs.value()."
					+ "\nIn expression (1.0 + MATCH( B1, C1:E1,  >> F1 <<  )); error location indicated by >>..<<."
					+ "\nCell containing expression is A1." 
					+ "\nReferenced by cell A1."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.ErrorUnsupportedFunctionVariant:---- BindReferencesBad
__@@__
EngineBuilder builder = builderForComputationOfCellNamed( /**/"ReferencesBad"/**/);
		bindInputNamed( builder, "Type" );
		try {
			builder.compile();
			fail();
		}
		catch (CompilerException.UnsupportedExpression e) {
			String err = "The last argument to MATCH, the match type, must be constant, but is MyInputs.value()."
					+ "\nIn expression (1.0 + MATCH( B1, C1:E1,  >> F1 <<  )); error location indicated by >>..<<."
					+ "\nCell containing expression is A1." 
					+ /**/"\nReferenced by cell A2."/**/;
			assertEquals( err, e.getMessage() );
		}
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- DLS_Consts
__@@__
private static final long JAVA_DIFF_HOURS = 4343L;
	private static final long EXCEL_DIFF_HOURS = 4344L;
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- DLS_Excel
__@@__
DLSInput input = new DLSInput();
		DLSOutput out = (DLSOutput) factory.newComputation( input );
		assertEquals( "input", EXCEL_DIFF_HOURS, out.inputDiff() );
		assertEquals( "CET", EXCEL_DIFF_HOURS, out.constCETDiff() );
		assertEquals( "local", EXCEL_DIFF_HOURS, out.constLocalDiff() );
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- DLS_Input
__@@__
public class DLSInput {

		public Date inWinter() {
			Calendar w = new GregorianCalendar( CET );
			w.clear();
			w.set( 1981, 0, 1, 12, 0 );
			return w.getTime();
		}

		public Date inSummer() {
			Calendar s = new GregorianCalendar( CET );
			s.clear();
			s.set( 1981, 6, 1, 12, 0 );
			return s.getTime();
		}

	}
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- DLS_Java
__@@__
DLSInput input = new DLSInput();
		Date w = input.inWinter();
		Date s = input.inSummer();
		long diffHours = (s.getTime() - w.getTime()) / 1000 / 3600;
		assertEquals( JAVA_DIFF_HOURS, diffHours );
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- setupDateOfBirth
__@@__
Calendar calendar = Calendar.getInstance( _timeZone );
		calendar.clear();
		calendar.set( _y, _m, _d );
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- setupTime
__@@__
long millis = (_hour * 60L + _minute) * 60L * 1000L;
___@_@___
jc:org.formulacompiler.tutorials.TimeZones:---- timeInput
__@@__
@Milliseconds
		public long time()
		{
			return this.millis;
		}
___@_@___
jc:org.formulacompiler.tutorials.TypeConversion:---- Input
__@@__
// Native types
		byte getByte();
		short getShort();
		int getInt();
		long getLong();
		@ScaledLong(7) long getLong7();
		double getDouble();
		float getFloat();
		boolean getBoolean();

		// Boxed native types
		Byte getBoxedByte();
		Short getBoxedShort();
		Integer getBoxedInt();
		Long getBoxedLong();
		@ScaledLong(7) Long getBoxedLong7();
		Double getBoxedDouble();
		Float getBoxedFloat();
		Boolean getBoxedBoolean();

		// Big types
		BigDecimal getBigDecimal();
		BigInteger getBigInteger();

		// Date is converted to a number as in Excel; can also use long value as returned by Date.getTime().
		// These values are time-zone adjusted.
		Date getDate();
		@MillisecondsSinceUTC1970 long getDateMs();
		@MillisecondsSinceUTC1970 Long getBoxedDateMs();

		// With @Milliseconds annotation, long is treated as a time duration in milliseconds for an Excel time cell.
		// These values or *not* time-zone adjusted.
		@Milliseconds long getTime();
		@Milliseconds Long getBoxedTime();

		// String cannot be used for numbers, but for string-valued cells
		String getString();
___@_@___
jc:org.formulacompiler.tutorials.TypeConversion:---- Output
__@@__
// Native types
		byte calcByte();
		short calcShort();
		int calcInt();
		long calcLong();
		@ScaledLong(5) long calcLong5();
		double calcDouble();
		float calcFloat();
		boolean calcBoolean();

		// Boxed native types
		Byte calcBoxedByte();
		Short calcBoxedShort();
		Integer calcBoxedInt();
		Long calcBoxedLong();
		@ScaledLong(5) Long calcBoxedLong5();
		Double calcBoxedDouble();
		Float calcBoxedFloat();
		Boolean calcBoxedBoolean();

		// Big types
		BigDecimal calcBigDecimal();
		BigInteger calcBigInteger();

		// Date is converted from a number as in Excel; can also use long value as in "new Date(long)".
		// These values are time-zone adjusted.
		Date calcDate();
		@MillisecondsSinceUTC1970 long calcDateMs();
		@MillisecondsSinceUTC1970 Long calcBoxedDateMs();

		// With @Milliseconds annotation, long is converted from an Excel time cell to a time duration in milliseconds.
		// These values are *not* time-zone adjusted.
		@Milliseconds long calcTime();
		@Milliseconds Long calcBoxedTime();

		// Strings are converted according to Java's settings
		String calcString();
___@_@___
jc:org.formulacompiler.tutorials.UsingDouble:---- IO
__@@__
public static class Input
	{
		public /**/double/**/ getA() { return 1.0; }
		public /**/double/**/ getB() { return 6.0; }
	}
	
	public static interface Output
	{
		/**/double/**/ getResult();
		/**/double/**/ getNegated();
	}

	public static interface Factory
	{
		Output newInstance( Input _input );
	}
___@_@___
jc:org.formulacompiler.tutorials.UsingDouble:---- buildCompiler
__@@__
EngineBuilder builder = SpreadsheetCompiler.newEngineBuilder();
		builder.loadSpreadsheet( path );
		builder.setFactoryClass( Factory.class );
		/**/builder.setNumericType( SpreadsheetCompiler.DOUBLE );/**/
		builder.bindAllByName();
		Engine engine = builder.compile();
		Factory factory = (Factory) engine.getComputationFactory();
___@_@___
jc:org.formulacompiler.tutorials.UsingDouble:---- checkResult
__@@__
Output output = factory.newInstance( new Input() );
		assertEquals( /**/"1.1666666666666667"/**/, String.valueOf( output.getResult()) );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- buildCompiler34
__@@__
builder.setNumericType( /**/SpreadsheetCompiler.BIGDECIMAL128/**/ );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- buildCompiler4
__@@__
MathContext mathContext = /**/new MathContext( 4, RoundingMode.HALF_UP )/**/;
		builder.setNumericType( /**/SpreadsheetCompiler.getNumericType( BigDecimal.class, mathContext )/**/ );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- checkResult34a
__@@__
Output output = factory.newInstance( new Input( 1, 6 ) );
			assertEquals( /**/"1.166666666666666666666666666666667"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- checkResult34c
__@@__
Output output = factory.newInstance( new Input( 1, /**/3/**/ ) );
			assertEquals( /**/"1.333333333333333333333333333333333"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- checkResult4a
__@@__
Output output = factory.newInstance( new Input( 1, 6 ) );
			assertEquals( /**/"1.167"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- checkResult4b
__@@__
Output output = factory.newInstance( new Input( 1000000, 6 ) );
			assertEquals( /**/"1167000"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingPrecisionBigDecimal:---- checkResult4c
__@@__
Output output = factory.newInstance( new Input( /**/12345678/**/, 1 ) );
			assertEquals( /**/"-12345678"/**/, output.getNegated().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledBigDecimal:---- buildCompiler
__@@__
builder.setNumericType( /**/SpreadsheetCompiler.getNumericType( BigDecimal.class, 4, BigDecimal.ROUND_UP )/**/ );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledBigDecimal:---- checkResult4a
__@@__
Output output = factory.newInstance( new Input( 1, 6 ) );
			assertEquals( /**/"1.1667"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledBigDecimal:---- checkResult4b
__@@__
Output output = factory.newInstance( new Input( 1000000, 6 ) );
			assertEquals( /**/"1166666.6667"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledBigDecimal:---- checkResult4c
__@@__
Output output = factory.newInstance( new Input( /**/12.345678/**/, 1 ) );
			assertEquals( /**/"-12.3457"/**/, output.getNegated().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- IO
__@@__
public static class Input
	{
		public Input(int b)  { this.b = b; }
		public /**/long/**/ getA()  { return 1; } // will be scaled by AFC 
		public /**/@ScaledLong(3) long/**/ getB()  { return ScaledLongSupport.scale( this.b, 3 ); }
		private final int b;
	}

	/**/@ScaledLong(3)/**/
	public static interface Output
	{
		/**/long/**/ getResult();
		/**/long/**/ getNegated();
	}
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- buildCompiler
__@@__
builder.setNumericType( /**/SpreadsheetCompiler.getNumericType( Long.TYPE, 3 )/**/ );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- buildCompiler0
__@@__
builder.setNumericType( /**/SpreadsheetCompiler.LONG/**/ );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- checkResult
__@@__
Output output = factory.newInstance( new Input( 6 ) );
		assertEquals( /**/1166L/**/, output.getResult() );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- checkResult0
__@@__
Output0 output = (Output0) factory.newComputation( new Input0( 6 ) );
		assertEquals( /**/1L/**/, output.getResult() );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- problemWithMultiplication
__@@__
long scale = 1000000L;
		long a = (long) (1.2 * scale);
		long b = 10000000L * scale;
		long intermediate = a * b;
		long result = intermediate / scale;
		
		assertEquals( 1200000L, a );
		assertEquals( 10000000000000L, b );
		assertEquals( -6446744073709551616L, intermediate ); // silent integer overflow!
		assertEquals( -6446744073709L, result );
___@_@___
jc:org.formulacompiler.tutorials.UsingScaledLong:---- workingMultiplication
__@@__
long scale = 1000000L;
		long a = (long) (1.2 * scale);
		long b = 100000L * scale;
		long intermediate = a * b;
		long result = intermediate / scale;
		
		assertEquals( 1200000L, a );
		assertEquals( 100000000000L, b );
		assertEquals( 120000000000000000L, intermediate );
		assertEquals( 120000000000L, result );
___@_@___
jc:org.formulacompiler.tutorials.UsingUnlimitedBigDecimal:---- buildCompilerN
__@@__
builder.setNumericType( /**/SpreadsheetCompiler.getNumericType( BigDecimal.class )/**/ );
___@_@___
jc:org.formulacompiler.tutorials.UsingUnlimitedBigDecimal:---- checkResultNa
__@@__
Output output = factory.newInstance( new Input( /**/1, 4/**/ ) );
			assertEquals( /**/"1.25"/**/, output.getResult().toPlainString() );
___@_@___
jc:org.formulacompiler.tutorials.UsingUnlimitedBigDecimal:---- checkResultNb
__@@__
try {
				Output output = factory.newInstance( new Input( 1, /**/3/**/ ) );
				output.getResult();
				fail( "ArithmeticException expected" );
			}
			catch (/**/ArithmeticException e/**/) {
				assertEquals( "Non-terminating decimal expansion; no exact representable decimal result.", e.getMessage() );
			}
___@_@___
jc:org/formulacompiler/tutorials/decompiler/org.formulacompiler.gen.$Factory
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.ComputationFactory;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.tutorials.Decompilation;

public final class $Factory
    implements ComputationFactory, Decompilation.MyFactory
{
    private final Environment $environment;
    
    public $Factory(Environment environment) {
        $environment = environment;
    }
    
    public final Computation newComputation(Object object) {
        return new $Root((Decompilation.MyInputs) object, $environment);
    }
    
    public final Decompilation.MyOutputs newOutputs
        (Decompilation.MyInputs myinputs) {
        return new $Root(myinputs, $environment);
    }
}
___@_@___
jc:org/formulacompiler/tutorials/decompiler/org.formulacompiler.gen.$Root
__@@__
package org.formulacompiler.gen;
import org.formulacompiler.runtime.Computation;
import org.formulacompiler.runtime.internal.Environment;
import org.formulacompiler.runtime.internal.RuntimeDouble_v2;
import org.formulacompiler.tutorials.Decompilation;

final class $Root implements Computation, Decompilation.MyOutputs
{
    private final Decompilation.MyInputs $inputs;
    final Environment $environment;
    
    $Root(Decompilation.MyInputs myinputs, Environment environment) {
        $environment = environment;
        $inputs = myinputs;
    }
    
    final double get$0() {
        return RuntimeDouble_v2.max(get$1(), get$2());
    }
    
    public final double rebateOp() {
        return get$0();
    }
    
    final double get$1() {
        return $inputs.customerRebate();
    }
    
    final double get$2() {
        return $inputs.articleRebate();
    }
}
___@_@___
xc:GeneratedSheet.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>CustomerRebate</td>
			<td class="xl-num">0.1</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>ArticleRebate</td>
			<td class="xl-num">0.05</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>Rebate</td>
			<td class="xl-num">4<br/><span class="xl-exp">=(B1+B2)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/devjournal/cse/InsuranceModel.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>Insured amount</td>
			<td class="xl-num">$15,000.00<br/><span class="xl-name">(InsuredAmount)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>Age</td>
			<td class="xl-num">21<br/><span class="xl-name">(Age)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><span style="text-decoration: underline;">Outputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td>Cost per year</td>
			<td class="xl-num">480<br/><span class="xl-exp">=INDEX(G12:G48,B9)</span><br/><span class="xl-name">(InsuranceCostPerYear)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td><span style="text-decoration: underline;">Helpers</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td>Matching row</td>
			<td class="xl-num">15<br/><span class="xl-exp">=MATCH(true,C12:C48,0.0)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td>Lookup Table</td>
			<td>AgeUpTo</td>
			<td>Match</td>
			<td>AgeUpTo (Copy)</td>
			<td>InsuredAmountUpTo</td>
			<td>Percentage</td>
			<td>InsuranceCostPerYear</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td></td>
			<td class="xl-num">20</td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D12,InsuredAmount&lt;=E12)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$150.00<br/><span class="xl-exp">=E12*F12</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D13,InsuredAmount&lt;=E13)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$6,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$180.00<br/><span class="xl-exp">=E13*F13</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D14,InsuredAmount&lt;=E14)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$8,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$240.00<br/><span class="xl-exp">=E14*F14</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">15</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D15,InsuredAmount&lt;=E15)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$10,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$400.00<br/><span class="xl-exp">=E15*F15</span></td>
			<td>Here we switch the percentage.</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">16</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D16,InsuredAmount&lt;=E16)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$13,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$520.00<br/><span class="xl-exp">=E16*F16</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">17</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D17,InsuredAmount&lt;=E17)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$16,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$640.00<br/><span class="xl-exp">=E17*F17</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">18</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D18,InsuredAmount&lt;=E18)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$20,000.00</td>
			<td class="xl-num">5%</td>
			<td class="xl-num">$1,000.00<br/><span class="xl-exp">=E18*F18</span></td>
			<td>Again.</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">19</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D19,InsuredAmount&lt;=E19)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$25,000.00</td>
			<td class="xl-num">5%</td>
			<td class="xl-num">$1,250.00<br/><span class="xl-exp">=E19*F19</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">20</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D20,InsuredAmount&lt;=E20)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B12</span></td>
			<td class="xl-num">$30,000.00</td>
			<td class="xl-num">5%</td>
			<td class="xl-num">$1,500.00<br/><span class="xl-exp">=E20*F20</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">21</td>
			<td></td>
			<td class="xl-num">22</td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D21,InsuredAmount&lt;=E21)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$150.00<br/><span class="xl-exp">=E21*F21</span></td>
			<td>The next age group is similar, but with different percentages.</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">22</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D22,InsuredAmount&lt;=E22)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$6,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$180.00<br/><span class="xl-exp">=E22*F22</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">23</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D23,InsuredAmount&lt;=E23)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$8,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$240.00<br/><span class="xl-exp">=E23*F23</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">24</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D24,InsuredAmount&lt;=E24)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$10,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$300.00<br/><span class="xl-exp">=E24*F24</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">25</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D25,InsuredAmount&lt;=E25)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$13,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$390.00<br/><span class="xl-exp">=E25*F25</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">26</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D26,InsuredAmount&lt;=E26)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$16,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$480.00<br/><span class="xl-exp">=E26*F26</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">27</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D27,InsuredAmount&lt;=E27)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$20,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$800.00<br/><span class="xl-exp">=E27*F27</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">28</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D28,InsuredAmount&lt;=E28)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$25,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$1,000.00<br/><span class="xl-exp">=E28*F28</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">29</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D29,InsuredAmount&lt;=E29)</span></td>
			<td class="xl-num">22<br/><span class="xl-exp">=B21</span></td>
			<td class="xl-num">$30,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$1,200.00<br/><span class="xl-exp">=E29*F29</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">30</td>
			<td></td>
			<td class="xl-num">25</td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D30,InsuredAmount&lt;=E30)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$150.00<br/><span class="xl-exp">=E30*F30</span></td>
			<td>Similar again, different percentages again.</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">31</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D31,InsuredAmount&lt;=E31)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$6,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$180.00<br/><span class="xl-exp">=E31*F31</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">32</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D32,InsuredAmount&lt;=E32)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$8,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$240.00<br/><span class="xl-exp">=E32*F32</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">33</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D33,InsuredAmount&lt;=E33)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$10,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$300.00<br/><span class="xl-exp">=E33*F33</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">34</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D34,InsuredAmount&lt;=E34)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$13,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$390.00<br/><span class="xl-exp">=E34*F34</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">35</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D35,InsuredAmount&lt;=E35)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$16,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$480.00<br/><span class="xl-exp">=E35*F35</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">36</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D36,InsuredAmount&lt;=E36)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$20,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$600.00<br/><span class="xl-exp">=E36*F36</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">37</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D37,InsuredAmount&lt;=E37)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$25,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$750.00<br/><span class="xl-exp">=E37*F37</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">38</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D38,InsuredAmount&lt;=E38)</span></td>
			<td class="xl-num">25<br/><span class="xl-exp">=B30</span></td>
			<td class="xl-num">$30,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$900.00<br/><span class="xl-exp">=E38*F38</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">39</td>
			<td></td>
			<td class="xl-num">60</td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D39,InsuredAmount&lt;=E39)</span></td>
			<td class="xl-num">60<br/><span class="xl-exp">=B39</span></td>
			<td class="xl-num">$30,000.00</td>
			<td class="xl-num">3.1600%<br/><span class="xl-exp">=2.0%+ABS(Age-50.0)/25.0*1.0%</span></td>
			<td class="xl-num">$474.00<br/><span class="xl-exp">=InsuredAmount*F39</span></td>
			<td>Complete switch of structure here.</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">40</td>
			<td></td>
			<td class="xl-num">200</td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D40,InsuredAmount&lt;=E40)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$450.00<br/><span class="xl-exp">=InsuredAmount*F40</span></td>
			<td>Percentages again, but no fixed amounts.</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">41</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D41,InsuredAmount&lt;=E41)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$6,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$450.00<br/><span class="xl-exp">=InsuredAmount*F41</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">42</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D42,InsuredAmount&lt;=E42)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$8,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">$450.00<br/><span class="xl-exp">=InsuredAmount*F42</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">43</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D43,InsuredAmount&lt;=E43)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$10,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$600.00<br/><span class="xl-exp">=InsuredAmount*F43</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">44</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D44,InsuredAmount&lt;=E44)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$13,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$600.00<br/><span class="xl-exp">=InsuredAmount*F44</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">45</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D45,InsuredAmount&lt;=E45)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$16,000.00</td>
			<td class="xl-num">4%</td>
			<td class="xl-num">$600.00<br/><span class="xl-exp">=InsuredAmount*F45</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">46</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D46,InsuredAmount&lt;=E46)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$20,000.00</td>
			<td class="xl-num">5%</td>
			<td class="xl-num">$750.00<br/><span class="xl-exp">=InsuredAmount*F46</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">47</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D47,InsuredAmount&lt;=E47)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$25,000.00</td>
			<td class="xl-num">5%</td>
			<td class="xl-num">$750.00<br/><span class="xl-exp">=InsuredAmount*F47</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">48</td>
			<td></td>
			<td></td>
			<td>true<br/><span class="xl-exp">=AND(Age&lt;=D48,InsuredAmount&lt;=E48)</span></td>
			<td class="xl-num">200<br/><span class="xl-exp">=B40</span></td>
			<td class="xl-num">$30,000.00</td>
			<td class="xl-num">5%</td>
			<td class="xl-num">$750.00<br/><span class="xl-exp">=InsuredAmount*F48</span></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/devjournal/cse/InsuranceModel_Homogeneous.xls:Show
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>Insured amount</td>
			<td class="xl-num">$15,000.00<br/><span class="xl-name">(InsuredAmount)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>Age</td>
			<td class="xl-num">62<br/><span class="xl-name">(Age)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><span style="text-decoration: underline;">Outputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td>Cost per year</td>
			<td class="xl-num">600<br/><span class="xl-exp">=INDEX(B11:B13,B10)</span><br/><span class="xl-name">(InsuranceCostPerYear)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td><span style="text-decoration: underline;">Helpers</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td>Matching row</td>
			<td class="xl-num">34<br/><span class="xl-exp">=MATCH(true,C16:C52,0.0)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td>Computation style</td>
			<td class="xl-num">3<br/><span class="xl-exp">=INDEX(G16:G52,B9)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td>Style 1</td>
			<td class="xl-num">$640.00<br/><span class="xl-exp">=INDEX(E16:E52,B9)*INDEX(F16:F52,B9)</span></td>
			<td>Amount rounded up; percentage from table</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td>Style 2</td>
			<td class="xl-num">$372.00<br/><span class="xl-exp">=InsuredAmount*(2.0%+ABS(Age-50.0)/25.0*1.0%)</span></td>
			<td>Exact amount; percentage computed from age</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td>Style 3</td>
			<td class="xl-num">$600.00<br/><span class="xl-exp">=InsuredAmount*INDEX(F16:F52,B9)</span></td>
			<td>Exact amount; percentage from table</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">15</td>
			<td>Lookup Table</td>
			<td>AgeUpTo</td>
			<td>Match</td>
			<td>AgeUpTo (Copy)</td>
			<td>InsuredAmountUpTo</td>
			<td>Percentage</td>
			<td>Style</td>
		</tr>
		<tr>
			<td class="xl-row">16</td>
			<td></td>
			<td class="xl-num">20</td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D16,InsuredAmount&lt;=E16)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B16</span></td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">1</td>
		</tr>
		<tr>
			<td class="xl-row">17</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D17,InsuredAmount&lt;=E17)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B16</span></td>
			<td class="xl-num">$6,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">1</td>
		</tr>
		<tr>
			<td class="xl-row">18</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D18,InsuredAmount&lt;=E18)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B16</span></td>
			<td class="xl-num">$8,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">1</td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/devjournal/cse/InsuranceModel_Section.xls:Show
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">2</td>
			<td>Insured amount</td>
			<td class="xl-num">$15,000.00<br/><span class="xl-name">(InsuredAmount)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>Age</td>
			<td class="xl-num">62<br/><span class="xl-name">(Age)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><span style="text-decoration: underline;">Outputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td>Cost per year</td>
			<td class="xl-num">600<br/><span class="xl-exp">=VLOOKUP(true,C9:K45,9.0,false)</span><br/><span class="xl-name">(InsuranceCostPerYear)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td>Lookup Table</td>
			<td>AgeUpTo</td>
			<td>Match</td>
			<td>AgeUpTo (Copy)</td>
			<td>InsuredAmountUpTo</td>
			<td>Percentage</td>
			<td>Style</td>
			<td>Style 1</td>
			<td>Style 2</td>
			<td>Style 3</td>
			<td>Insured amount</td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td></td>
			<td class="xl-num">20</td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D9,InsuredAmount&lt;=E9)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B9</span></td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">1</td>
			<td class="xl-num">$150.00<br/><span class="xl-exp">=E9*F9</span></td>
			<td class="xl-num">$372.00<br/><span class="xl-exp">=InsuredAmount*(2.0%+ABS(Age-50.0)/25.0*1.0%)</span></td>
			<td class="xl-num">$450.00<br/><span class="xl-exp">=InsuredAmount*F9</span></td>
			<td class="xl-num">$150.00<br/><span class="xl-exp">=INDEX(H9:J9,G9)</span></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D10,InsuredAmount&lt;=E10)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B9</span></td>
			<td class="xl-num">$6,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">1</td>
			<td class="xl-num">$180.00<br/><span class="xl-exp">=E10*F10</span></td>
			<td class="xl-num">$372.00<br/><span class="xl-exp">=InsuredAmount*(2.0%+ABS(Age-50.0)/25.0*1.0%)</span></td>
			<td class="xl-num">$450.00<br/><span class="xl-exp">=InsuredAmount*F10</span></td>
			<td class="xl-num">$180.00<br/><span class="xl-exp">=INDEX(JD10:JF10,G10)</span></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td></td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(Age&lt;=D11,InsuredAmount&lt;=E11)</span></td>
			<td class="xl-num">20<br/><span class="xl-exp">=B9</span></td>
			<td class="xl-num">$8,000.00</td>
			<td class="xl-num">3%</td>
			<td class="xl-num">1</td>
			<td class="xl-num">$240.00<br/><span class="xl-exp">=E11*F11</span></td>
			<td class="xl-num">$372.00<br/><span class="xl-exp">=InsuredAmount*(2.0%+ABS(Age-50.0)/25.0*1.0%)</span></td>
			<td class="xl-num">$450.00<br/><span class="xl-exp">=InsuredAmount*F11</span></td>
			<td class="xl-num">$240.00<br/><span class="xl-exp">=INDEX(JD11:JF11,G11)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/examples/test.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b><span style="text-decoration: underline;">Demo computation for SEJ</span></b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>A</td>
			<td class="xl-num">10</td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td>B</td>
			<td class="xl-num">$100.00</td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td><span style="text-decoration: underline;">Outputs</span></td>
			<td><span style="text-decoration: underline;"></span></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td>Result</td>
			<td class="xl-num">$1,000.00<br/><span class="xl-exp">=B4*B5</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/examples/xmlproc/EmployeeTracking.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b><span style="text-decoration: underline;">Data</span></b></td>
			<td><b><span style="text-decoration: underline;">Name</span></b></td>
			<td><b><span style="text-decoration: underline;">First name</span></b></td>
			<td><b><span style="text-decoration: underline;">Date</span></b></td>
			<td><b><span style="text-decoration: underline;">Time</span></b></td>
			<td><b><span style="text-decoration: underline;">Duration</span></b></td>
			<td><b><span style="text-decoration: underline;">Job</span></b></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td></td>
			<td class="xl-r1">Sample<br/><span class="xl-name">(Name)</span></td>
			<td class="xl-r1">Joe<br/><span class="xl-name">(FirstName)</span></td>
			<td class="xl-date xl-r2">1/1/06<br/><span class="xl-name">(Date)</span></td>
			<td class="xl-date xl-r2">8:30<br/><span class="xl-name">(Time)</span></td>
			<td class="xl-date xl-r2">2:30<br/><span class="xl-name">(Duration)</span></td>
			<td class="xl-r2">Foo<br/><span class="xl-name">(Job)</span></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-date xl-r2">1/1/06</td>
			<td class="xl-date xl-r2">13:00</td>
			<td class="xl-date xl-r2">4:00</td>
			<td class="xl-r2">Bar</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-date xl-r2">1/2/06</td>
			<td class="xl-date xl-r2">8:00</td>
			<td class="xl-date xl-r2">4:00</td>
			<td class="xl-r2">Foo</td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td class="xl-r1">Exemplum</td>
			<td class="xl-r1">Per</td>
			<td class="xl-date xl-r1">1/1/06</td>
			<td class="xl-date xl-r1">8:30</td>
			<td class="xl-date xl-r1">2:30</td>
			<td class="xl-r1">Foo</td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-date xl-r1">1/1/06</td>
			<td class="xl-date xl-r1">13:00</td>
			<td class="xl-date xl-r1">4:00</td>
			<td class="xl-r1">Bar</td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-date xl-r1">1/2/06</td>
			<td class="xl-date xl-r1">8:00</td>
			<td class="xl-date xl-r1">4:00</td>
			<td class="xl-r1">Foo</td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b><span style="text-decoration: underline;">Selection</span></b></td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">First name</span></td>
			<td><span style="text-decoration: underline;">Date</span></td>
			<td><span style="text-decoration: underline;">Time</span></td>
			<td><span style="text-decoration: underline;">Duration</span></td>
			<td><span style="text-decoration: underline;">Job</span></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td><b><span style="text-decoration: underline;">Hours worked</span></b></td>
			<td class="xl-num">21<br/><span class="xl-exp">=SUM(F2:F7)*24.0</span><br/><span class="xl-name">(Result)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B2:G7</span> <span class="xl-name">(Employees)</span><br/><span class="xl-r2">D2:G4</span> <span class="xl-name">(Entries)</span>
___@_@___
xc:org/formulacompiler/tests/reference/Aggregators.xls:CiteHeader,CiteVAR
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Expected</span></td>
			<td><span style="text-decoration: underline;">Actual</span></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td><span style="text-decoration: underline;"># of Inputs</span></td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">Highlight</span></td>
		</tr>
		<tr>
			<td class="xl-row">146</td>
			<td class="xl-num">0.5</td>
			<td class="xl-num">0.5<br/><span class="xl-exp">=VAR(C146,D146)</span></td>
			<td class="xl-num">1</td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td>VAR (does not support blanks!)</td>
			<td>VAR</td>
		</tr>
		<tr>
			<td class="xl-row">147</td>
			<td class="xl-num">0.5</td>
			<td class="xl-num">0.5<br/><span class="xl-exp">=VAR(C147,D147)</span></td>
			<td class="xl-num">4</td>
			<td class="xl-num">5</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td>...</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">148</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">149</td>
			<td class="xl-num">5.8</td>
			<td class="xl-num">5.8<br/><span class="xl-exp">=VAR(C149:E149,G149,I149)</span></td>
			<td class="xl-num">1</td>
			<td class="xl-num">2</td>
			<td class="xl-num">3</td>
			<td class="xl-num">100</td>
			<td class="xl-num">5</td>
			<td class="xl-num">200</td>
			<td class="xl-num">7</td>
			<td class="xl-num">7</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">150</td>
			<td class="xl-num">2.5</td>
			<td class="xl-num">2.5<br/><span class="xl-exp">=VAR(C150:E150,G150,I150)</span></td>
			<td class="xl-num">6</td>
			<td class="xl-num">7</td>
			<td class="xl-num">8</td>
			<td class="xl-num">80</td>
			<td class="xl-num">9</td>
			<td></td>
			<td class="xl-num">10</td>
			<td class="xl-num">7</td>
			<td>...</td>
			<td></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tests/reference/DatabaseAggregators.xls:BaseData
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">2</td>
			<td><b>Test table</b></td>
			<td>Tree</td>
			<td>Height</td>
			<td>Yield</td>
			<td>Profit</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-r1">Apple</td>
			<td class="xl-num xl-r1">18</td>
			<td class="xl-num xl-r1">14</td>
			<td class="xl-num xl-r1">105.00</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-r1">Pear</td>
			<td class="xl-num xl-r1">12</td>
			<td class="xl-num xl-r1">10</td>
			<td class="xl-num xl-r1">96.00</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td>Cherry</td>
			<td class="xl-num">13</td>
			<td class="xl-num">9</td>
			<td class="xl-num">105.00</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td>Apple</td>
			<td class="xl-num">14</td>
			<td class="xl-num">10</td>
			<td class="xl-num">75.00</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td>Pear</td>
			<td class="xl-num">9</td>
			<td class="xl-num">8</td>
			<td class="xl-num">76.80</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td></td>
			<td>Apple</td>
			<td class="xl-num">8</td>
			<td class="xl-num">6</td>
			<td class="xl-num">45.00</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td><b>Criteria sets</b></td>
			<td>Tree</td>
			<td>Height</td>
			<td>Height</td>
			<td>Tree</td>
			<td>Height</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td></td>
			<td class="xl-r3">Apple</td>
			<td>&gt;10</td>
			<td>&lt;16</td>
			<td>Nonexistent</td>
			<td>&lt;1.4e6</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td></td>
			<td class="xl-r3">Pear</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td></td>
			<td>Tree</td>
			<td>Height</td>
			<td>Height</td>
			<td>RefTree</td>
			<td>RefHeight</td>
			<td>RefHeight</td>
		</tr>
		<tr>
			<td class="xl-row">15</td>
			<td></td>
			<td>Apple<br/><span class="xl-exp">=E15</span></td>
			<td>&gt;10<br/><span class="xl-exp">="&gt;"&amp;F15</span></td>
			<td>&lt;16<br/><span class="xl-exp">=CONCATENATE("&lt;",G15)</span></td>
			<td class="xl-r4">Apple</td>
			<td class="xl-num xl-r4">10</td>
			<td class="xl-num xl-r4">16</td>
		</tr>
		<tr>
			<td class="xl-row">16</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">17</td>
			<td></td>
			<td>Free Form</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">18</td>
			<td></td>
			<td>false<br/><span class="xl-exp">=AND(B3="Apple",C3&gt;$F$15,C3&lt;$G$15)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B3:E4</span> <span class="xl-name">(Data1)</span><br/><span class="xl-r3">B11:B12</span> <span class="xl-name">(Vals1)</span><br/><span class="xl-r4">E15:G15</span> <span class="xl-name">(Vals2)</span>
___@_@___
xc:org/formulacompiler/tests/reference/FinancialFunctions.xls:HeaderRange,NPVRange
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
			<td>N</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Expected</span></td>
			<td><span style="text-decoration: underline;">Actual</span></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td><span style="text-decoration: underline;"># of Inputs</span></td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">Highlight</span></td>
			<td><span style="text-decoration: underline;">Excel says</span></td>
			<td><span style="text-decoration: underline;">Skip for</span></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td class="xl-num">1.188</td>
			<td class="xl-num">1.188<br/><span class="xl-exp">=NPV(C2,D2:G2)</span></td>
			<td class="xl-num">10%</td>
			<td class="xl-num">-10</td>
			<td class="xl-num">3</td>
			<td class="xl-num">4.2</td>
			<td class="xl-num">6.8</td>
			<td></td>
			<td></td>
			<td class="xl-num">5</td>
			<td>NPV</td>
			<td>NPV</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td class="xl-num">1.922</td>
			<td class="xl-num">1.922<br/><span class="xl-exp">=NPV(C3,E3:I3)+D3</span></td>
			<td class="xl-num">8%</td>
			<td class="xl-num">-40</td>
			<td class="xl-num">8</td>
			<td class="xl-num">9.2</td>
			<td class="xl-num">10</td>
			<td class="xl-num">12</td>
			<td class="xl-num">14.5</td>
			<td class="xl-num">7</td>
			<td></td>
			<td></td>
			<td></td>
			<td>long, bigdecimal</td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tests/reference/NumericFunctions.xls:HeaderRange,ABSRange
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
			<td>N</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Expected</span><br/><span class="xl-name">(COMBINLarge)</span></td>
			<td><span style="text-decoration: underline;">Actual</span></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td><span style="text-decoration: underline;"># of Inputs</span></td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">Highlight</span></td>
			<td><span style="text-decoration: underline;">Excel says</span></td>
			<td><span style="text-decoration: underline;">Skip for</span></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=ABS(C2)</span></td>
			<td class="xl-num">-1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td>ABS</td>
			<td>ABS</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td class="xl-num">0</td>
			<td class="xl-num">0<br/><span class="xl-exp">=ABS(C3)</span></td>
			<td class="xl-num">0</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=ABS(C4)</span></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td class="xl-num">2</td>
			<td class="xl-num">2<br/><span class="xl-exp">=ABS(C5)</span></td>
			<td class="xl-num">-2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td class="xl-num">2</td>
			<td class="xl-num">2<br/><span class="xl-exp">=ABS(C6)</span></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td class="xl-num">0</td>
			<td class="xl-num">0<br/><span class="xl-exp">=ABS(C7)</span></td>
			<td>false</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=ABS(C8)</span></td>
			<td>true</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td class="xl-num">3</td>
			<td class="xl-num">3<br/><span class="xl-exp">=ABS(C9)</span></td>
			<td class="xl-num">-3</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td class="xl-num">4</td>
			<td class="xl-num">4<br/><span class="xl-exp">=ABS(C10)</span></td>
			<td class="xl-num">-4</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">1</td>
			<td>...</td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tests/reference/NumericFunctions.xls:HeaderRange,COMBINErrors
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
			<td>N</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Expected</span><br/><span class="xl-name">(COMBINLarge)</span></td>
			<td><span style="text-decoration: underline;">Actual</span></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td><span style="text-decoration: underline;"># of Inputs</span></td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">Highlight</span></td>
			<td><span style="text-decoration: underline;">Excel says</span></td>
			<td><span style="text-decoration: underline;">Skip for</span></td>
		</tr>
		<tr>
			<td class="xl-row">338</td>
			<td class="xl-num">0</td>
			<td>#NUM!<br/><span class="xl-exp">=COMBIN(C338,D338)</span></td>
			<td class="xl-num">0</td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td>#NUM!</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">339</td>
			<td class="xl-num">0</td>
			<td>#NUM!<br/><span class="xl-exp">=COMBIN(C339,D339)</span></td>
			<td class="xl-num">1</td>
			<td class="xl-num">-1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td>#NUM!</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">340</td>
			<td class="xl-num">0</td>
			<td>#NUM!<br/><span class="xl-exp">=COMBIN(C340,D340)</span></td>
			<td class="xl-num">-1</td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td>#NUM!</td>
			<td></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tests/reference/NumericFunctions.xls:HeaderRange,COMBINRange
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
			<td>N</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Expected</span><br/><span class="xl-name">(COMBINLarge)</span></td>
			<td><span style="text-decoration: underline;">Actual</span></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td><span style="text-decoration: underline;"># of Inputs</span></td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">Highlight</span></td>
			<td><span style="text-decoration: underline;">Excel says</span></td>
			<td><span style="text-decoration: underline;">Skip for</span></td>
		</tr>
		<tr>
			<td class="xl-row">326</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=COMBIN(C326,D326)</span></td>
			<td class="xl-num">1</td>
			<td class="xl-num">0</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td>COMBIN</td>
			<td>COMBIN</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">327</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=COMBIN(C327,D327)</span></td>
			<td class="xl-num">1</td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">328</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=COMBIN(C328,D328)</span></td>
			<td class="xl-num">2</td>
			<td class="xl-num">0</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">329</td>
			<td class="xl-num">2</td>
			<td class="xl-num">2<br/><span class="xl-exp">=COMBIN(C329,D329)</span></td>
			<td class="xl-num">2</td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">330</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=COMBIN(C330,D330)</span></td>
			<td class="xl-num">2</td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">331</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=COMBIN(C331,D331)</span></td>
			<td class="xl-num">3</td>
			<td class="xl-num">0</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">332</td>
			<td class="xl-num">3</td>
			<td class="xl-num">3<br/><span class="xl-exp">=COMBIN(C332,D332)</span></td>
			<td class="xl-num">3</td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">333</td>
			<td class="xl-num">3</td>
			<td class="xl-num">3<br/><span class="xl-exp">=COMBIN(C333,D333)</span></td>
			<td class="xl-num">3</td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">334</td>
			<td class="xl-num">1</td>
			<td class="xl-num">1<br/><span class="xl-exp">=COMBIN(C334,D334)</span></td>
			<td class="xl-num">3</td>
			<td class="xl-num">3</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">335</td>
			<td class="xl-num">10</td>
			<td class="xl-num">10<br/><span class="xl-exp">=COMBIN(C335,D335)</span></td>
			<td class="xl-num">10</td>
			<td class="xl-num">1</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">336</td>
			<td class="xl-num">252</td>
			<td class="xl-num">252<br/><span class="xl-exp">=COMBIN(C336,D336)</span></td>
			<td class="xl-num">10</td>
			<td class="xl-num">5</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">337</td>
			<td class="xl-num">120</td>
			<td class="xl-num">120<br/><span class="xl-exp">=COMBIN(C337,D337)</span></td>
			<td class="xl-num">10</td>
			<td class="xl-num">7</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td class="xl-num">2</td>
			<td>...</td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/Basics.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>CustomerRebate</td>
			<td class="xl-num">3%</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>ArticleRebate</td>
			<td class="xl-num">6%</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>Rebate</td>
			<td class="xl-num">6%<br/><span class="xl-exp">=MAX(B1:B2)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/BasicsCustom.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>CustomerRebate</td>
			<td class="xl-num">3%</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>ArticleRebate</td>
			<td class="xl-num">6%</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>CustomerCategory</td>
			<td class="xl-num">5</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td>Rebate</td>
			<td class="xl-num">6%<br/><span class="xl-exp">=IF(B3=1.0,SUM(B1:B2),MAX(B1:B2))</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/BindingCells.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b><span style="text-decoration: underline;">Inputs</span></b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>Some_Value</td>
			<td class="xl-num">3.4</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>Other_Value</td>
			<td class="xl-num">4.5</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>Decade_x</td>
			<td class="xl-num">5</td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td>Year_1994</td>
			<td class="xl-num">20</td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td>Year_x</td>
			<td class="xl-num">30</td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td>Name_Length</td>
			<td class="xl-num">20</td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b><span style="text-decoration: underline;">Intermediates</span></b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td>x</td>
			<td class="xl-num">1950<br/><span class="xl-exp">=B4*10.0+1900.0</span></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td><b><span style="text-decoration: underline;">Outputs</span></b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td>Result</td>
			<td class="xl-num">70<br/><span class="xl-exp">=SUM(B5:B7)</span></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td>Coeff</td>
			<td class="xl-num">7.9<br/><span class="xl-exp">=SUM(B2:B3)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/BonusPerEmployee.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><span style="text-decoration: underline;">Name</span></td>
			<td><span style="text-decoration: underline;">Base salary</span></td>
			<td><span style="text-decoration: underline;">Overtime</span></td>
			<td><span style="text-decoration: underline;">Total</span></td>
			<td><span style="text-decoration: underline;">Bonus %</span></td>
			<td><span style="text-decoration: underline;">Bonus amt</span></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td class="xl-r1">Ann</td>
			<td class="xl-num xl-r1">$5,600.00<br/><span class="xl-name">(BaseSalary)</span></td>
			<td class="xl-num xl-r1">20<br/><span class="xl-name">(HoursOvertime)</span></td>
			<td class="xl-num xl-r1">$6,600.00<br/><span class="xl-exp">=B2+C2*B$6</span></td>
			<td class="xl-num xl-r1">36%<br/><span class="xl-exp">=D2/D$5</span></td>
			<td class="xl-num xl-r1">$7,232.88<br/><span class="xl-exp">=B$7*E2</span><br/><span class="xl-name">(BonusAmount)</span></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td class="xl-r1">Beth</td>
			<td class="xl-num xl-r1">$5,400.00</td>
			<td class="xl-num xl-r1">15</td>
			<td class="xl-num xl-r1">$6,150.00<br/><span class="xl-exp">=B3+C3*B$6</span></td>
			<td class="xl-num xl-r1">34%<br/><span class="xl-exp">=D3/D$5</span></td>
			<td class="xl-num xl-r1">$6,739.73<br/><span class="xl-exp">=B$7*E3</span></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td class="xl-r1">Charlie</td>
			<td class="xl-num xl-r1">$5,500.00</td>
			<td class="xl-num xl-r1">0</td>
			<td class="xl-num xl-r1">$5,500.00<br/><span class="xl-exp">=B4+C4*B$6</span></td>
			<td class="xl-num xl-r1">30%<br/><span class="xl-exp">=D4/D$5</span></td>
			<td class="xl-num xl-r1">$6,027.40<br/><span class="xl-exp">=B$7*E4</span></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><span style="text-decoration: underline;">Total</span></td>
			<td></td>
			<td></td>
			<td class="xl-num">$18,250.00<br/><span class="xl-exp">=SUM(D2:D4)</span></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td><span style="text-decoration: underline;">Overtime rate</span></td>
			<td class="xl-num">$50.00<br/><span class="xl-name">(OvertimeSalaryPerHour)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td><span style="text-decoration: underline;">Bonus total</span></td>
			<td class="xl-num">$20,000.00<br/><span class="xl-name">(BonusTotal)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">A2:F4</span> <span class="xl-name">(Employees)</span>
___@_@___
xc:org/formulacompiler/tutorials/Caching.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>Side</td>
			<td class="xl-num">2</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td>Area</td>
			<td class="xl-num">4<br/><span class="xl-exp">=B1*B1</span></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>Volume</td>
			<td class="xl-num">8<br/><span class="xl-exp">=B3*B1</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/CustomerRating.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b><span style="text-decoration: underline;">Sections</span></b></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>OrdersForLastNDays(30)</td>
			<td>OrderTotal</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-num xl-r1">$450.00<br/><span class="xl-name">(OrderTotal)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-num xl-r1">$1,320.00</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td class="xl-num xl-r1">$1,540.00</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td class="xl-num xl-r1">$60.00</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td class="xl-num xl-r1">$5,870.00</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b><span style="text-decoration: underline;">Intermediates</span></b></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td>total</td>
			<td class="xl-num">$9,240.00<br/><span class="xl-exp">=SUM(B3:B7)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td>index</td>
			<td class="xl-num">4<br/><span class="xl-exp">=MATCH(B10,C11:G11)</span></td>
			<td class="xl-num">$0.00</td>
			<td class="xl-num">$2,000.00</td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">$7,500.00</td>
			<td class="xl-num">$10,000.00</td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td><b><span style="text-decoration: underline;">Outputs</span></b></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td>Rating</td>
			<td>Good<br/><span class="xl-exp">=INDEX(C14:G14,B11)</span><br/><span class="xl-name">(Rating)</span></td>
			<td>Abysmal</td>
			<td>Poor</td>
			<td>Average</td>
			<td>Good</td>
			<td>Excellent</td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B3:B7</span> <span class="xl-name">(OrdersForLastThreeMonths)</span>
___@_@___
xc:org/formulacompiler/tutorials/CustomerRatingComplex.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b><span style="text-decoration: underline;">Sections</span></b></td>
			<td><span style="text-decoration: underline;">Inputs</span></td>
			<td></td>
			<td><span style="text-decoration: underline;">Intermediates</span></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td>OrdersForLastNDays(90)</td>
			<td>OrderTotal</td>
			<td>OrderDate</td>
			<td>days back</td>
			<td>weight</td>
			<td>value</td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-num xl-r1">$450.00<br/><span class="xl-name">(OrderTotal)</span></td>
			<td class="xl-date xl-r1">4/13/06<br/><span class="xl-exp">=B$11-89.0</span><br/><span class="xl-name">(OrderDate)</span></td>
			<td class="xl-num xl-r1">89<br/><span class="xl-exp">=B$11-C3</span></td>
			<td class="xl-num xl-r1">1%<br/><span class="xl-exp">=(90.0-D3)/90.0</span></td>
			<td class="xl-num xl-r1">$5.00<br/><span class="xl-exp">=B3*E3</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-num xl-r1">$1,320.00</td>
			<td class="xl-date xl-r1">5/2/06<br/><span class="xl-exp">=B$11-70.0</span></td>
			<td class="xl-num xl-r1">70<br/><span class="xl-exp">=B$11-C4</span></td>
			<td class="xl-num xl-r1">22%<br/><span class="xl-exp">=(90.0-D4)/90.0</span></td>
			<td class="xl-num xl-r1">$293.33<br/><span class="xl-exp">=B4*E4</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td class="xl-num xl-r1">$1,540.00</td>
			<td class="xl-date xl-r1">5/27/06<br/><span class="xl-exp">=B$11-45.0</span></td>
			<td class="xl-num xl-r1">45<br/><span class="xl-exp">=B$11-C5</span></td>
			<td class="xl-num xl-r1">50%<br/><span class="xl-exp">=(90.0-D5)/90.0</span></td>
			<td class="xl-num xl-r1">$770.00<br/><span class="xl-exp">=B5*E5</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td class="xl-num xl-r1">$60.00</td>
			<td class="xl-date xl-r1">6/11/06<br/><span class="xl-exp">=B$11-30.0</span></td>
			<td class="xl-num xl-r1">30<br/><span class="xl-exp">=B$11-C6</span></td>
			<td class="xl-num xl-r1">67%<br/><span class="xl-exp">=(90.0-D6)/90.0</span></td>
			<td class="xl-num xl-r1">$40.00<br/><span class="xl-exp">=B6*E6</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td></td>
			<td class="xl-num xl-r1">$5,870.00</td>
			<td class="xl-date xl-r1">7/8/06<br/><span class="xl-exp">=B$11-3.0</span></td>
			<td class="xl-num xl-r1">3<br/><span class="xl-exp">=B$11-C7</span></td>
			<td class="xl-num xl-r1">97%<br/><span class="xl-exp">=(90.0-D7)/90.0</span></td>
			<td class="xl-num xl-r1">$5,674.33<br/><span class="xl-exp">=B7*E7</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b><span style="text-decoration: underline;">Intermediates</span></b></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td>total value</td>
			<td class="xl-num">$6,782.67<br/><span class="xl-exp">=SUM(F3:F7)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td>current date</td>
			<td class="xl-date">7/11/06<br/><span class="xl-exp">=TODAY()</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td><b><span style="text-decoration: underline;">Outputs</span></b></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td>Rating</td>
			<td class="xl-num">3<br/><span class="xl-exp">=MATCH(B10,C14:G14)</span><br/><span class="xl-name">(Rating)</span></td>
			<td class="xl-num">$0.00</td>
			<td class="xl-num">$2,000.00</td>
			<td class="xl-num">$5,000.00</td>
			<td class="xl-num">$7,500.00</td>
			<td class="xl-num">$10,000.00</td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B3:F7</span> <span class="xl-name">(OrdersForLastThreeMonths)</span>
___@_@___
xc:org/formulacompiler/tutorials/ErrorImproperInnerSectionReference.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b>Vertically repeating section:</b></td>
			<td><b>Name</b></td>
			<td><b>Value</b></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td></td>
			<td class="xl-r2">One</td>
			<td class="xl-num xl-r3">1</td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-r2">Two</td>
			<td class="xl-num xl-r3">2</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-r2">Three</td>
			<td class="xl-num xl-r3">3</td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td><b>This works:</b></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td>Aggregate entire column</td>
			<td class="xl-num">6<br/><span class="xl-exp">=SUM(C2:C4)</span><br/><span class="xl-name">(GoodRef)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b>This is an error:</b></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td>No aggregation</td>
			<td class="xl-num">1<br/><span class="xl-exp">=C2</span><br/><span class="xl-name">(BadRef)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td>Not entire column (end bad)</td>
			<td class="xl-num">3<br/><span class="xl-exp">=SUM(C2:C3)</span><br/><span class="xl-name">(BadRange1)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">12</td>
			<td>Not entire column (start bad)</td>
			<td class="xl-num">5<br/><span class="xl-exp">=SUM(C3:C4)</span><br/><span class="xl-name">(BadRange2)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">13</td>
			<td>Not entire column (both bad)</td>
			<td class="xl-num">2<br/><span class="xl-exp">=SUM(C3:C3)</span><br/><span class="xl-name">(BadRange3)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">14</td>
			<td>Not entire column (single cell)</td>
			<td class="xl-num">2<br/><span class="xl-exp">=SUM(C3)</span><br/><span class="xl-name">(BadRange4)</span></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B2:B4</span> <span class="xl-name">(Name)</span><br/><span class="xl-r2">B2:C4</span> <span class="xl-name">(Section)</span><br/><span class="xl-r3">C2:C4</span> <span class="xl-name">(Value)</span>
___@_@___
xc:org/formulacompiler/tutorials/ErrorUnsupportedConversion.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td>hello world!<br/><span class="xl-exp">=LOWER(B1)</span><br/><span class="xl-name">(stringOutput)</span></td>
			<td>Hello WORLD!<br/><span class="xl-name">(stringInput)</span></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td class="xl-num">60<br/><span class="xl-exp">=B2*2.0</span><br/><span class="xl-name">(numOutput)</span></td>
			<td class="xl-num">30<br/><span class="xl-name">(numInput)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/ErrorUnsupportedFunction.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td class="xl-num">859865<br/><span class="xl-exp">=1.0+INFO(B1)</span><br/><span class="xl-name">(Info)</span></td>
			<td>memused</td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td class="xl-num">1719730<br/><span class="xl-exp">=A1*2.0</span><br/><span class="xl-name">(ReferencesInfo)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td class="xl-num">3<br/><span class="xl-exp">=1.0+2.0</span><br/><span class="xl-name">(Independent)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td class="xl-num">2<br/><span class="xl-exp">=LEN(LENB(B4))</span><br/><span class="xl-name">(Unsupported)</span></td>
			<td>hello world</td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/ErrorUnsupportedFunctionVariant.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td class="xl-num">3<br/><span class="xl-exp">=1.0+MATCH(B1,C1:E1,F1)</span><br/><span class="xl-name">(Bad)</span></td>
			<td class="xl-num">20<br/><span class="xl-name">(LookedFor)</span></td>
			<td class="xl-num">10</td>
			<td class="xl-num">20</td>
			<td class="xl-num">30</td>
			<td class="xl-num">4<br/><span class="xl-name">(Type)</span></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td class="xl-num">6<br/><span class="xl-exp">=A1*2.0</span><br/><span class="xl-name">(ReferencesBad)</span></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">A4:A4</span> <span class="xl-name">(Unsupported)</span>
___@_@___
xc:org/formulacompiler/tutorials/SectionReferences.xls:Data
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
			<td>C</td>
			<td>D</td>
			<td>E</td>
			<td>F</td>
			<td>G</td>
			<td>H</td>
			<td>I</td>
			<td>J</td>
			<td>K</td>
			<td>L</td>
			<td>M</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b>Vertically repeating section:</b></td>
			<td><b>Name</b></td>
			<td><b>Value</b></td>
			<td><b>RepValue</b></td>
			<td><b>SubName</b></td>
			<td><b>SubValue</b></td>
			<td><b>SubRef</b></td>
			<td><b>InnerRef</b></td>
			<td><b>InnerSum</b></td>
			<td><b>SelfSum</b></td>
			<td><b>OuterSum</b></td>
			<td><b>Value2</b></td>
			<td><b>Outer cells</b></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td><b>Outer cells:</b></td>
			<td><b></b></td>
			<td class="xl-num">-1</td>
			<td class="xl-num">-1</td>
			<td><b></b></td>
			<td class="xl-num">-10</td>
			<td></td>
			<td></td>
			<td><b></b></td>
			<td><b></b></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td></td>
			<td class="xl-r1">One</td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-r4">One.A</td>
			<td class="xl-num xl-r4">10</td>
			<td class="xl-num xl-r4">11<br/><span class="xl-exp">=F3+C3</span></td>
			<td class="xl-num xl-r1">2<br/><span class="xl-exp">=C3+1.0</span></td>
			<td class="xl-num xl-r1">62<br/><span class="xl-exp">=SUM(F3:G4)</span></td>
			<td class="xl-num xl-r1">7<br/><span class="xl-exp">=SUM(C3:C6)+C3</span></td>
			<td class="xl-num xl-r1">241<br/><span class="xl-exp">=SUM(F2:F11)+C3</span></td>
			<td class="xl-num xl-r1">3</td>
			<td class="xl-num">4711</td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-r4">One.B</td>
			<td class="xl-num xl-r4">20</td>
			<td class="xl-num xl-r4">21<br/><span class="xl-exp">=F4+C3</span></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-r1"></td>
			<td class="xl-num">4712</td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td></td>
			<td class="xl-r1">Two</td>
			<td class="xl-num xl-r1">2</td>
			<td class="xl-num xl-r1">2</td>
			<td class="xl-r1">Two.A</td>
			<td class="xl-num xl-r1">30</td>
			<td class="xl-num xl-r1">32<br/><span class="xl-exp">=F5+C5</span></td>
			<td class="xl-num xl-r1">3<br/><span class="xl-exp">=C5+1.0</span></td>
			<td class="xl-num xl-r1">62<br/><span class="xl-exp">=SUM(F5:G5)</span></td>
			<td class="xl-num xl-r1">8<br/><span class="xl-exp">=SUM(C3:C6)+C5</span></td>
			<td class="xl-num xl-r1">242<br/><span class="xl-exp">=SUM(F2:F11)+C5</span></td>
			<td class="xl-num xl-r1">2</td>
			<td class="xl-num">4713</td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td></td>
			<td class="xl-r1">Three</td>
			<td class="xl-num xl-r1">3</td>
			<td class="xl-num xl-r1">3</td>
			<td class="xl-r1">Three.A</td>
			<td class="xl-num xl-r1">40</td>
			<td class="xl-num xl-r1">43<br/><span class="xl-exp">=F6+C6</span></td>
			<td class="xl-num xl-r1">4<br/><span class="xl-exp">=C6+1.0</span></td>
			<td class="xl-num xl-r1">83<br/><span class="xl-exp">=SUM(F6:G6)</span></td>
			<td class="xl-num xl-r1">9<br/><span class="xl-exp">=SUM(C3:C6)+C6</span></td>
			<td class="xl-num xl-r1">243<br/><span class="xl-exp">=SUM(F2:F11)+C6</span></td>
			<td class="xl-num xl-r1">1</td>
			<td class="xl-num">4714</td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td><b>Outer cells:</b></td>
			<td></td>
			<td class="xl-num">4</td>
			<td class="xl-num">4</td>
			<td></td>
			<td class="xl-num">50</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td><b>Another vertical section:</b></td>
			<td class="xl-r2">Eins</td>
			<td class="xl-num xl-r2">1</td>
			<td class="xl-num xl-r2">1</td>
			<td class="xl-r2"></td>
			<td class="xl-num xl-r2">10</td>
			<td class="xl-num xl-r3">1</td>
			<td class="xl-num xl-r3">2</td>
			<td class="xl-num xl-r3">3</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td><b>with horizontal section to the right:</b></td>
			<td class="xl-r2">Zwei</td>
			<td class="xl-num xl-r2">2</td>
			<td class="xl-num xl-r2">2</td>
			<td class="xl-r2"></td>
			<td class="xl-num xl-r2">20</td>
			<td class="xl-num xl-r3">0.1</td>
			<td class="xl-num xl-r3">0.2</td>
			<td class="xl-num xl-r3">0.3</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td><b></b></td>
			<td class="xl-r2">Drei</td>
			<td class="xl-num xl-r2">3</td>
			<td class="xl-num xl-r2">3</td>
			<td class="xl-r2"></td>
			<td class="xl-num xl-r2">30</td>
			<td class="xl-num xl-r3">0.01</td>
			<td class="xl-num xl-r3">0.02</td>
			<td class="xl-num xl-r3">0.03</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">11</td>
			<td><b>Outer cells:</b></td>
			<td></td>
			<td class="xl-num">5</td>
			<td class="xl-num">5</td>
			<td></td>
			<td class="xl-num">40</td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
			<td></td>
		</tr>
	</tbody>
</table>
<br/><span class="xl-r1">B3:L6</span> <span class="xl-name">(Section)</span><br/><span class="xl-r2">B8:F10</span> <span class="xl-name">(Section2)</span><br/><span class="xl-r3">G8:I10</span> <span class="xl-name">(Section3)</span><br/><span class="xl-r4">E3:G4</span> <span class="xl-name">(Subsection)</span>
___@_@___
xc:org/formulacompiler/tutorials/SectionReferences.xls:Tests
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">14</td>
			<td><b>This works:</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">15</td>
			<td>Nested sum</td>
			<td class="xl-num">100<br/><span class="xl-exp">=SUM(F3:F6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">16</td>
			<td>Sum spanning multiple sections</td>
			<td class="xl-num">20<br/><span class="xl-exp">=SUM(C2:C11)</span></td>
		</tr>
		<tr>
			<td class="xl-row">17</td>
			<td>Sum spanning multiple sections (shaped)</td>
			<td class="xl-num">41<br/><span class="xl-exp">=SUM(C2:D11)</span></td>
		</tr>
		<tr>
			<td class="xl-row">18</td>
			<td>Sum spanning multiple and nested sections</td>
			<td class="xl-num">240<br/><span class="xl-exp">=SUM(F2:F11)</span></td>
		</tr>
		<tr>
			<td class="xl-row">19</td>
			<td>Sum over inner refs</td>
			<td class="xl-num">9<br/><span class="xl-exp">=SUM(H3:H6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">20</td>
			<td>Sum over inner sums</td>
			<td class="xl-num">207<br/><span class="xl-exp">=SUM(I3:I6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">21</td>
			<td>Sum over inner self sums</td>
			<td class="xl-num">24<br/><span class="xl-exp">=SUM(J3:J6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">22</td>
			<td>Sum over inner outer nested sums</td>
			<td class="xl-num">726<br/><span class="xl-exp">=SUM(K3:K6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">23</td>
			<td>Sum over nested and inner section in parallel</td>
			<td class="xl-num">116<br/><span class="xl-exp">=SUM(G3:H6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">24</td>
			<td>Sum over section and cells in parallel</td>
			<td class="xl-num">18856<br/><span class="xl-exp">=SUM(L3:M6)</span></td>
		</tr>
		<tr>
			<td class="xl-row">25</td>
			<td>Sum over mixed section extents</td>
			<td class="xl-num">66.66<br/><span class="xl-exp">=SUM(F8:I10)</span></td>
		</tr>
		<tr>
			<td class="xl-row">26</td>
			<td></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">27</td>
			<td><b>Errors:</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">28</td>
			<td>Only nested inner section summed</td>
			<td class="xl-num">30<br/><span class="xl-exp">=SUM(F3:F4)</span></td>
		</tr>
		<tr>
			<td class="xl-row">29</td>
			<td>Only part of section summed</td>
			<td class="xl-num">2<br/><span class="xl-exp">=SUM(C2:C5)</span></td>
		</tr>
		<tr>
			<td class="xl-row">30</td>
			<td>... Again</td>
			<td class="xl-num">9<br/><span class="xl-exp">=SUM(C4:C7)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/Template.xls
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>A</td>
			<td>B</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">1</td>
			<td><b>Input Values</b><br/><span class="xl-name">(Caption)</span></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">2</td>
			<td style="text-align: right">InputValue<br/><span class="xl-name">(Label)</span></td>
			<td class="xl-num">123.45<br/><span class="xl-name">(InputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">3</td>
			<td style="text-align: right">DateInputValue</td>
			<td class="xl-date">1/1/70<br/><span class="xl-name">(DateInputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td style="text-align: right">PercentInputValue</td>
			<td class="xl-num">25%<br/><span class="xl-name">(PercentInputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">5</td>
			<td><b>Output Values</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">6</td>
			<td style="text-align: right">OutputValue</td>
			<td class="xl-num">123.45<br/><span class="xl-name">(OutputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">7</td>
			<td style="text-align: right">PercentOutputValue</td>
			<td class="xl-num">30%<br/><span class="xl-name">(PercentOutputValue)</span></td>
		</tr>
		<tr>
			<td class="xl-row">8</td>
			<td><b>Intermediate Values</b></td>
			<td></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td style="text-align: right">IntermediateValue</td>
			<td class="xl-num">123.45<br/><span class="xl-name">(IntermediateValue)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/TimeZones.xls:DLSDiff
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>B</td>
			<td>C</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">26</td>
			<td>InWinter</td>
			<td class="xl-date">1/1/81 12:00<br/><span class="xl-name">(InWinter)</span></td>
		</tr>
		<tr>
			<td class="xl-row">27</td>
			<td>InSummer</td>
			<td class="xl-date">7/1/81 12:00<br/><span class="xl-name">(InSummer)</span></td>
		</tr>
		<tr>
			<td class="xl-row">28</td>
			<td>Const in winter (CET)</td>
			<td class="xl-date">01 01 1981 12:00:00</td>
		</tr>
		<tr>
			<td class="xl-row">29</td>
			<td>Const in summer (CET)</td>
			<td class="xl-date">01 07 1981 12:00:00</td>
		</tr>
		<tr>
			<td class="xl-row">30</td>
			<td>Const in winter (local)</td>
			<td class="xl-date">1/1/81 12:00</td>
		</tr>
		<tr>
			<td class="xl-row">31</td>
			<td>Const in summer (local)</td>
			<td class="xl-date">7/1/81 12:00</td>
		</tr>
		<tr>
			<td class="xl-row">32</td>
			<td>InputDiff</td>
			<td class="xl-num"><b>4344</b><br/><span class="xl-exp">=(C27-C26)*24.0</span><br/><span class="xl-name">(InputDiff)</span></td>
		</tr>
		<tr>
			<td class="xl-row">33</td>
			<td>ConstCETDiff</td>
			<td class="xl-num"><b>4344</b><br/><span class="xl-exp">=(C29-C28)*24.0</span><br/><span class="xl-name">(ConstCETDiff)</span></td>
		</tr>
		<tr>
			<td class="xl-row">34</td>
			<td>ConstLocalDiff</td>
			<td class="xl-num"><b>4344</b><br/><span class="xl-exp">=(C31-C30)*24.0</span><br/><span class="xl-name">(ConstLocalDiff)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/TimeZones.xls:DemarcationDate
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>B</td>
			<td>C</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">8</td>
			<td>DateOfBirth</td>
			<td class="xl-date">1/1/81<br/><span class="xl-name">(DateOfBirth)</span></td>
		</tr>
		<tr>
			<td class="xl-row">9</td>
			<td>Demarcation</td>
			<td class="xl-date">1/1/81</td>
		</tr>
		<tr>
			<td class="xl-row">10</td>
			<td>IsBeforeDate</td>
			<td><b>false</b><br/><span class="xl-exp">=C8&lt;C9</span><br/><span class="xl-name">(IsBeforeDate)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/TimeZones.xls:DemarcationDateTime
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>B</td>
			<td>C</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">20</td>
			<td>DateTimeOfBirth</td>
			<td class="xl-date">1/1/81 12:00<br/><span class="xl-name">(DateTimeOfBirth)</span></td>
		</tr>
		<tr>
			<td class="xl-row">21</td>
			<td>Demarcation (CET)</td>
			<td class="xl-date">01 01 1981 12:00:00</td>
		</tr>
		<tr>
			<td class="xl-row">22</td>
			<td>IsBeforeDateTime</td>
			<td><b>false</b><br/><span class="xl-exp">=C20&lt;C21</span><br/><span class="xl-name">(IsBeforeDateTime)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/TimeZones.xls:DemarcationTime
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>B</td>
			<td>C</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">14</td>
			<td>TimeOfBirth</td>
			<td class="xl-date">12:00<br/><span class="xl-name">(TimeOfBirth)</span></td>
		</tr>
		<tr>
			<td class="xl-row">15</td>
			<td>Demarcation</td>
			<td class="xl-date">12:00</td>
		</tr>
		<tr>
			<td class="xl-row">16</td>
			<td>IsBeforeTime</td>
			<td><b>false</b><br/><span class="xl-exp">=C14&lt;C15</span><br/><span class="xl-name">(IsBeforeTime)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
xc:org/formulacompiler/tutorials/TimeZones.xls:GlobalTimeSettings
__@@__
<table class="xl">
	<thead>
		<tr>
			<td/>
			<td>B</td>
			<td>C</td>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td class="xl-row">3</td>
			<td>GlobalTimeZoneName</td>
			<td>CET<br/><span class="xl-name">(GlobalTimeZoneName)</span></td>
		</tr>
		<tr>
			<td class="xl-row">4</td>
			<td>GlobalTimeFormat</td>
			<td class="xl-date">01 01 2000 11:12:00<br/><span class="xl-name">(GlobalTimeFormat)</span></td>
		</tr>
	</tbody>
</table>
___@_@___
