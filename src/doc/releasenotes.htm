<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <title>Release Notes - arrenbrecht.ch</title>
    <style type="text/css" media="screen">
        @import "style.css";
	
    </style>
    <link rel="stylesheet" type="text/css" media="print" href="printstyle.css" />
</head>
<body>
    <div class="all">
        <div class="nav">
            <p class="nav">
<a href="http://www.arrenbrecht.ch/">arrenbrecht.ch</a> &gt;
<a href="index.htm">SEJ</a> &gt;


			</p>
        </div>
        <div class="title">
            <h1>
                Release Notes</h1>
        </div>
        
        
        <div class="content">
        
<p>Lists the new features, improvements, and fixes for each release of SEJ. You may also want to look at:</p>
<ul compact class="compact">
<li><a href="limitations.htm">Current Limitations</a></li>
<li><a href="roadmap.htm">Roadmap</a></li>
</ul>

<h5>Note</h5>
<p>The newest release listed in this document may not really be released yet. Take it as an announcement of things to come. ;)</p>

<h2>Release 0.6.1</h2>

<h3>Improvements</h3>
<ul class="spaced">
<li>The <a href="tutorial/basics.htm">sample spreadsheets in the documentation</a> are now cited from the real spreadsheet files used in the automated tests (using <a href="http://arrenbrecht.ch/jcite/">JCite</a> again). This ensures their correctness and improves the formatting.</li>
<li>The function <tt>MATCH</tt> is supported again. However, the last argument (the match type) must be constant, and the second argument (the match range) cannot reference a repeating section yet.</li>
<li>The function <tt>INDEX</tt> is now supported for one-dimensional lookup. However, the range argument cannot reference a repeating section yet.</li>
</ul>

<h2>Release 0.6.0</h2>

<h3>API Changes</h3>
<ul class="spaced">
<li>In <tt>ComputationFactory</tt>, renamed <tt>newInstance()</tt> to <tt>newComputation()</tt>.</li>
</ul>

<h3>New Features</h3>
<ul class="spaced">
<li>Implemented input-only <a href="tutorial/repeatingsections.htm">repeating sections</a>. <tt>AND</tt> and <tt>OR</tt> are not yet supported as aggregators on them, though.</li>
<li>Implemented support for Excel functions <tt>TODAY()</tt> and <tt>COUNT()</tt>. (Although <tt>COUNT</tt> does not yet handle empty cells properly - this is because SEJ generally does not.)</li>
</ul>

<h3>Improvements</h3>
<ul class="spaced">
<li>Documented, tested and completed the handling of the full set of allowed <a href="tutorial/bindbyname.htm">input method parameters</a>.</li>
<li>Refactored the binding tutorial into more separate pages.</li>
<li>Added support for defining and referencing ranges to the <a href="javadoc/sej/SpreadsheetBuilder.html"><tt>SpreadsheetBuilder</tt></a>.</li>
</ul>

<h3>Fixes</h3>
<ul class="spaced">
<li>Added some missing <tt>switch</tt> <tt>break</tt> statements discovered by Eclipse's new check (should not ever trigger anyway, but still...)</li>
<li>Unbound output parameter combinations now throw <tt>IllegalArgumentException</tt> when there is now default implementation of the output method.</li>
</ul>

<h2>Release 0.5.4</h2>

<h3>New Features</h3>
<ul class="spaced">
<li><a href="tutorial/binding.htm#BindByName">Parametrized output methods</a> are supported now. The interactive demo thus runs again, but does not yet look good because there are some info methods missing on the spreadsheet interface.</li>
</ul>

<h3>Improvements</h3>
<ul class="spaced">
<li>The examples for <a href="tutorial/binding.htm#BindCells">basic cell binding</a> and <a href="tutorial/binding.htm#BindByName">parametrized binding</a> are now cited from automated tests.</li>
</ul>

<h2>Release 0.5.3</h2>

<h3>Improvements</h3>
<ul class="spaced">
<li>SEJ now ships the new <tt>sej-&lt;ver&gt;-srcjar.zip</tt>, containing <tt>sej-src.jar</tt> and <tt>sej-doc.jar</tt> which contain, respectively, the entire source code and documentation for SEJ. Not included are the examples and test cases. These two .jar files make attaching source and docs in modern IDEs very easy.</li>
<li>Clarified behaviour differences between Excel and SEJ with respect to <tt>null</tt> input values. See <a href="tutorial/type_conversion.htm">tutorial on type conversions</a>.</li>
<li>Implemented <tt>AND</tt>, <tt>OR</tt>, <tt>NOT</tt>, and comparisons outside of the test of an <tt>IF</tt>.</li>
</ul>

<h3>Fixes</h3>
<ul class="spaced">
<li>Fixed parsing of cell/range names containing dots (<tt>.</tt>) in the R1C1-style parser. Added unit test for parsing names (only had a system test before which did not test the R1C1 parser).</li>
</ul>

<h2>Release 0.5.2</h2>

<h3>Fixes</h3>
<ul class="spaced">
<li>SEJ should now accept all valid cell and range names according to Excel's online help. In particular, Excel names may now contain dots (<tt>.</tt>) and do no longer have to start with an underscore or at least two alphabetic characters.</li>
</ul>

<h2>Release 0.5.1</h2>

<h3>Improvements</h3>
<ul class="spaced">
<li>Type conversion is now <a href="tutorial/type_conversion.htm">documented</a>.</li>
<li>All exceptions are now called <tt>...Exception</tt>, not <tt>...Error</tt>.</li>
<li>Can call static input methods.</li>
</ul>

<h3>Fixes</h3>
<ul class="spaced">
<li>Removed the superfluous <tt>Engine*.jar</tt> files from the binary distribution.</li>
<li>Can use non-static local classes as inputs again.</li>
</ul>

<h2><a name="0.5.0">Release 0.5.0</a></h2>

<h3>New Features</h3>
<ul class="spaced">
<li>The new <a href="javadoc/sej/EngineBuilder.html"><tt>EngineBuilder</tt></a> supports the <a href="tutorial/basics.htm">most typical use-case</a> out of the box. The <tt>SpreadsheetByNameBinder</tt> and <tt>SpreadsheetNameCreator</tt> give more fine-grained control over this. This use-case is used to provide the motivation for using SEJ in the tutorial.</li>
<li>Separated the concept of a computation engine (collection of computation classes) from the concept of a computation factory. <a href="javadoc/sej/runtime/Engine.html">Engine</a> is now the thing being loaded and <a href="javadoc/sej/SaveableEngine.html">saved</a>. <a href="javadoc/sej/runtime/ComputationFactory.html">Factory</a> creates now computation instances. The factory can be forced to implement an application-specific interface or base class, which makes SEJ even more non-intrusive on application code (see use-case above).</li>
<li>SEJ now converts between its internal numeric type and basically all numeric Java types in the input and output method result types. To support this, scaled <tt>long</tt> values in the interface must now be <a href="tutorial/numeric_type.htm#long">annotated with <tt>@ScaledLong</tt></a>. (While already tested fairly rigorously, the full documentation for this feature is still missing.)</li>
<li>Saved engines are now normal .jar files, which can be inspected like any other .jar file. The generated classes are normal .class entries in the .jar file.</li>
<li>The new <a href="javadoc/sej/SpreadsheetBuilder.html"><tt>SpreadsheetBuilder</tt></a> supports <a href="tutorial/buildsheet.htm">constructing spreadsheets in memory</a>.</li>
</ul>

<h3>Improvements</h3>
<ul class="spaced">
<li>I have reorganized the packages. Everything internal is now in <tt>sej.internal</tt>. Everything need for the loading and running of compiled engines is in <a href="javadoc/sej/runtime/package-summary.html"><tt>sej.runtime</tt></a>, <tt>sej.internal.runtime</tt>, and <tt>sej.internal.bytecode.runtime</tt>. The compile-time public API is in <a href="javadoc/sej/package-summary.html"><tt>sej</tt></a>.</li>
<li>I have rigorously trimmed the API again. Every non-trivial entity is now represented by an interface in the API, not a class. The central class <a href="javadoc/sej/SEJ.html"><tt>sej.SEJ</tt></a> provides factory methods for all of these.</li>
<li>The fairly monolithic low-level interface <tt>sej.Compiler</tt> has been broken up to reflect the processing chain: <a href="javadoc/sej/Spreadsheet.html"><tt>sej.Spreadsheet</tt></a>, <a href="javadoc/sej/SpreadsheetBinder.html"><tt>sej.SpreadsheetBinder</tt></a>, <a href="javadoc/sej/SpreadsheetBinding.html"><tt>sej.SpreadsheetBinding</tt></a>, <a href="javadoc/sej/SpreadsheetCompiler.html"><tt>sej.SpreadsheetCompiler</tt></a>. Most of these components have a consistent instantiation protocol with a factory method in <tt>sej.SEJ</tt> and a configuration class called <tt>XY.Config</tt> which supplies parameters to new instances. This is in preparation of being able to expose the internal computation model as a lightweight alternative to the spreadsheet model.</li>
<li>New base error class, <tt>sej.runtime.SEJError</tt>, from which all others are derived. Better separation of errors into <tt>sej.SpreadsheetError</tt>, <tt>sej.CompilerError</tt>, and <tt>sej.runtime.EngineError</tt>.</li>
</ul>

<h2>Release 0.4.2</h2>

<h3>New Features</h3>
<ul class="spaced">
<li>You can now generate engines that support <a href="tutorial/caching.htm">internal caching</a> of inputs, outputs and multiply referenced intermediate values.</li>
</ul>

<h3>Improvements</h3>
<ul class="spaced">
<li>The <tt>BigDecimal</tt> numeric type now generates vastly more efficient constant values. They are preconstructed in <tt>private static final BigDecimal</tt> fields, using <tt>BigDecimal.valueOf( long, int )</tt> wherever possible.</li>
</ul>

<h2>Release 0.4.1</h2>

<h3>New Features</h3>
<ul class="spaced">
<li>Implemented <a href="tutorial/numeric_type.htm#long">scaled <tt>long</tt> support</a>.</li>
</ul>

<h3>Improvements</h3>
<ul class="spaced">
<li><tt>sej.NumericType</tt> now has support routines for value conversions.</li>
<li><tt>sej.runtime</tt> is a new package holding the runtime support classes. They used to be in <tt>sej.engine</tt>.</li>
<li>Added automated tests for serialization and deserialization of engines, as well as the use of the runtime-only jar for deserialization.</li>
</ul>

<h2>Release 0.4.0</h2>

<h3>New Features</h3>
<ul class="spaced">
<li>Implemented <a href="tutorial/numeric_type.htm#BigDecimal"><tt>BigDecimal</tt> support</a>.</li>
</ul>

<h3>Improvements</h3>
<ul class="spaced">
<li>Removed ASM dependency from the base <tt>Operator</tt> class.</li>
<li>Removed general expression interpreter support. Introduced special constant folder support instead (much faster).</li>
</ul>

<h3>Fixes</h3>
<ul class="spaced">
<li>Exponentiation (<tt>A1^A2</tt>) and taking a percentage (<tt>A1%</tt>) now work when applied to input cells. Added this to the test suite.</li>
</ul>

<h2>Release 0.3.2</h2>
<p>This release has two major areas: fixing the last release and improvements.</p>
<p>Fixing the last release:</p>
<ul class="spaced">
<li>I fixed the contents of the distribution packages so the documentation style-sheets are included.</li>
<li>The run-time .jar now works (that is, contains all the required stuff).</li>
</ul>
<p>Improvements:</p>
<ul class="spaced">
<li>SEJ ships with two new .jars, <tt>sej-jre1.4.jar</tt> and <tt>sej-runtime-jre1.4.jar</tt>, which have been converted from Java 5 to Java 1.4 by <a href="http://retrotranslator.sourceforge.net/">Retrotranslator</a>. Use these .jars if you plan to deploy SEJ on the JRE 1.4. All unit tests are now run automatically using both the JDK 1.5 and a JRE 1.4 during builds to ensure compatibility.</li>
<li>I dropped <tt>Engine.Computation</tt>. You no longer have to subclass this thing when defining an output type. As a consequence, you can now define an output as an interface instead of a class.</li>
<li>I moved the <tt>saveTo()</tt> functionality from <tt>EngineFactory</tt> to <tt>Compiler</tt>. That way, compiled engines don't need the interface to the compiler, making <tt>sej-runtime.jar</tt> a little smaller still.</li>
<li>SEJ accepts <tt>boolean</tt> input values and can return both <tt>boolean</tt> and <tt>Date</tt> values.</li>
<li>Moved all test and sample data to folders named <tt>testdata/sej</tt> for better compatibility with the source layout at Abacus.</li>
</ul>

<h2>Release 0.3.1</h2>
<p>This minor release changes the name <tt>Compiler.NameSpace</tt> to <tt>Compiler.Section</tt>. Since we are no longer binding by name, the term <em>NameSpace</em> is no longer appropriate.</p>
<p>In addition <tt>Compiler.getRootNameSpace()</tt> has been shortened to <tt>Compiler.getRoot()</tt>.</p>

<h2>Release 0.3.0</h2>
<p>This is the first release with the new API based on <a href="tutorial/binding.htm">binding cells to native types</a>. The interpreter has been dropped and replaced by a byte code compiler producing very fast code.</p>        </div>
        <div class="footer">
<p>Copyright &copy; 2006 Peter Arrenbrecht. All rights reserved.
<br/>Last updated on 12.07.2006.</p>        </div>
    </div>
</body>
</html>