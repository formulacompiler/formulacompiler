
h1. The Basics

AFC(Abacus Formula Compiler) makes it possible to use computations defined in spreadsheet files within Java applications. AFC reads the spreadsheet files and compiles Java-based formula evaluation engines from them. Such an engine computes output values given a set of input values. For example, compute the value of the cell _B4_ given the values of the cells _B1_ and _B2_ as inputs. The original spreadsheet files can be created, for example, in "Microsoft Excel":-excel or "OpenOffice Calc":-ooc.

<%= toc 2, 3 %>


h2. Line Item Rebate Revisited

AFC lets us solve the "problem of the customizable line item rebate":reason.htm very elegantly. We can enable the distributors - and also the more savvy customers - to customize the rebate computation in Microsoft Excel, or OpenOffice Calc.

Here's the default rebate computation from the example, but now expressed as a spreadsheet:

	[xc:org/formulacompiler/tutorials/Basics.xls]

And here's one variant some specific customer might want to use (the best category gets combined rebates):

	[xc:org/formulacompiler/tutorials/BasicsCustom.xls]

AFC's job is to turn these sheets into valid rebate computation strategy classes for our application.



h2. What AFC Needs To Know

AFC builds a compiled Java class for each computation by analyzing the corresponding spreadsheet, just like the Java compiler does for our hand-written Java source code. So, in a way, a spreadsheet is source code to AFC.

And, just like the Java compiler, AFC needs to know about

	* @RebateInputs@, the input interface, in order to resolve references to input values,
	* @RebateComputation@, the output interface (or, in this case, abstract class), in order to know what the API of the generated computation should be, and
	* @RebateComputationFactory@, the computation factory interface, so it can generate a compatible factory for us.

In addition, AFC must be able to determine

	* where the spreadsheet formulas reference input values, and
	* which formulas should serve as which output method implementations.


	
h2. <a name="Convention">Convention Over Configuration</a>

While all these elements can be specified to AFC in great detail, it is far simpler to follow a few natural conventions. If we do, AFC can figure out almost all of the details by itself.

h5. Factory for input/output

If our strategy interface has only a single method with exactly one parameter, then AFC infers the input and output interfaces from the method signature automatically. In our line item rebate example, the factory interface satisfies these rules:

	[jc:org.formulacompiler.tutorials.Basics:---- Factory]

h5. Cell names for references

If our spreadsheet contains user-defined cell names (the names you can enter in the box in the upper right of the formula toolbar in Excel), then AFC automatically uses them to resolve input and output references, as follows:

	* For every abstract method on the output interface, AFC looks for a cell named like the method, which is used to implement the method. That is, the cell's value or formula is compiled as the body of the output method. If there is no such cell, an error is raised.
	* For every non-abstract output method, AFC does the same as above, only it is no error of there is no matching cell.
	* For all remaining cell names, AFC looks for a matching method on the input interface. If found, it binds the cell to it. So when the computation accesses the cell, it calls the input method instead of using the value or formula specified in the spreadsheet.
	* When matching a cell name _XY_ to a method, AFC always considers both @xy()@ and @getXY()@ as method names. The match is _not_ case-sensitive.
	* If you wish, you can tell AFC to raise an error if any unbound named cells remain after this. Alternatively, you can query the list of unbound cell names to do with as you please (perhaps just alerting users to the unbound cells).

There is also a variant where only cell names with a given prefix are considered, for example only cell names starting with "I_" for inputs and "O_" for outputs.

More precisely, given the methods

	[jc:org.formulacompiler.spreadsheet.internal.util.SpreadsheetByNameBinderTest:---- Inputs]

the following holds for binding input values:

	[jc:org.formulacompiler.spreadsheet.internal.util.SpreadsheetByNameBinderTest:---- testInputs]

When using the prefix @P_@, we have:

	[jc:org.formulacompiler.spreadsheet.internal.util.SpreadsheetByNameBinderTest:---- testInputsWithPrefix]

The same holds for binding output values, except that @final@ and @static@ methods do not bind:

	[jc:org.formulacompiler.spreadsheet.internal.util.SpreadsheetByNameBinderTest:---- testOutputs; omit -skip-]

When using the prefix @P_@, we again have:

	[jc:org.formulacompiler.spreadsheet.internal.util.SpreadsheetByNameBinderTest:---- testOutputsWithPrefix]

h5. Row titles for cell names

For many users, entering an managing cell names is not straightforward, at least in Microsoft Excel. Neither are the names easily visible when looking at a spreadsheet.

AFC therefore can use row titles instead of cell names to resolve references. Row titles are simply string values in column <em>A</em> of a spreadsheet, with the cell they name right next to it in column <em>B</em>. Spaces and other characters not legal in cell names are filtered out. If a spreadsheet contains no named cells, AFC automatically assumes row titles.

h5. Example

Our example from above satisfies all of these criteria:

	[xc:org/formulacompiler/tutorials/Basics.xls]

AFC will automatically infer the following bindings:

	* _CustomerRebate_ identifies cell _B1_, which is mapped to the input method @double getCustomerRebate()@,
	* _ArticleRebate_ identifies cell _B2_, which is mapped to the input method @double getArticleRebate()@, and
	* _Rebate_ identifies cell _B3_, which implements the output method @double getRebate()@.



h2. Compiling The Factory

Since we follow AFC's conventions, the final setup of AFC's spreadsheet compiler becomes very simple:

	[jc:org.formulacompiler.tutorials.Basics:---- CompileFactory]

AFC compiles a complete factory and strategy implementation to our specs, so using it is child's play now:

	[jc:org.formulacompiler.tutorials.Basics:---- UseCompiledFactory]

	
h2. Generated Engine
	
The compiled engine, when "decompiled":decompile.htm to Java source code, looks like this:

	[jc:basics/org.formulacompiler.gen.$Root]


h2. Outlook

This example showed a simple but complete case study of how AFC can be incorporated into a typical line-of-business application. AFC is quite a bit more powerful than just this, though. Read on.

"Back: Tutorial Index":index.htm
