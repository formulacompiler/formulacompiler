
h1. Compiler Errors


AFC does its best to give meaningful error messages which clearly identify both the problem and its source. This document shows the most typical errors, why they occur, and what to do about them.

<%= toc 2, 3 %>


h2. Unreadable .xls Files

AFC uses "JExcelAPI":-jxl to read files in Excel's .xls format. It may happen that JExcelAPI fails to read the file before AFC has a chance to look at its contents.

h5. Hint

It sometimes helps to start with a new file, and then selectively copy only the necessary formulas and values over from the old, unreadable one.



h2. Unsupported Functions

If JExcelAPI has managed to read the file, there may still be elements within it that AFC cannot handle. The most typical case is that a particular Excel function is not supported at all, meaning AFC cannot even parse expressions containing it. For example, the @INFO@ function cannot be parsed by AFC. The function @PROPER@, while it can be parsed, is still not supported yet. However, AFC is smart enough to accept spreadsheets containing unsupported functions, _provided they are not referenced by any output cell_.

h5. Hint

You may sometimes be able to substitute a combination of "supported functions":../reference/index.htm for an unsupported one.

h5. Example

The following spreadsheet contains a cell which uses the @INFO@ function in its formula, another cell which references the former cell, and a third cell that whose value does not involve the @INFO@ function at all:

	[xc:org/formulacompiler/tutorials/ErrorUnsupportedFunction.xls]

Binding an output cell to the first cell containing the @INFO@ function results in:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindInfo]

Note that the failure only occurs when comiling the engine. Not when loading the spreadsheet, and not when binding cells. This is due to AFC's lazy expression parser which only parses those expressions in the spreadsheet that are actually referenced by a bound output cell.

Binding the output cell to the second cell, which references the first cell, results in the same error, but note that the message identifies @A2@ as the source of the reference:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindReferencesInfo]

However, binding to the third cell, which is independent of the first cell containing the @INFO@ function, works ok:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindIndependent]

The final example shows the error message for a parseable, but unsupported function (@PROPER@):

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedFunction:---- BindParsedButUnsupported]



h2. Unsupported Function Variants

You may also encounter functions that are supported, but not with all possible variants of argument lists. For example, AFC currently does not support the @MATCH@ function when its last argument (the match type) is bound to an input variable.

h5. Hint

You may sometimes be able to work around such limitations by using @IF@.

h5. Example

Consider the following spreadsheet:

	[xc:org/formulacompiler/tutorials/ErrorUnsupportedFunctionVariant.xls]

If we bind the output to _Bad_ and make _Type_ an input, then AFC will throw an error:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedFunctionVariant:---- BindBad]

The same happens if we bind the output to _ReferencesBad_ and make _Type_ an input, but again notice how the referencing cell is identified:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedFunctionVariant:---- BindReferencesBad]



h2. Unsupported Data Type Conversions

AFC supports a wide range of "automatic data type conversions":type_conversion.htm when obtaining and returning values. Some, however, do not make sense. AFC will not, for example, automatically try to convert string-typed expressions to numeric return values.

h5. Hint

Change the data types in your interface to AFC to fix such problems. If this interface is a given (ie. dictated by some other component), then you may have to create a fa√ßade on top of an internal interface used for AFC.

h5. Example 1

Consider the following sheet:

	[xc:org/formulacompiler/tutorials/ErrorUnsupportedConversion.xls]

If we bind the cell _stringOutput_ to an @int@ method,

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionToOutput:---- MyComputation]

we get the following exception:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionToOutput:---- StringAsInt]

(Note that binding _stringInput_ to an @int@ works as AFC does automatically convert from @int@ to @String@.)

h5. Example 2

If we bind the cell _numInput_ to a @String@ method,

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionFromInput:---- MyInputs]

we get the following exception:

	[jc:org.formulacompiler.tutorials.ErrorUnsupportedConversionFromInput:---- StringAsInt]

(Note that binding _numOutput_ to an @int@ again works as AFC does automatically convert from @int@ to @String@.)


h2. Improper Inner Section References

AFC supports "repeating sections":repeatingsections.htm of dynamic width or height. These can even be nested. However, outer sections may only reference inner sections as range arguments to functions - otherwise it would not be clear which element is meant to be accessed. Inner sections may, of course, reference outer cells as simple values. In addition, the range arguments must always cover the full variable extent (width or height) of the inner section.

h5. Hint

Do reference a section cell directly. Use an aggregator like @SUM()@ over the _entire_ section column (for vertically repeating sections) or row (for horizontally repeating sections) instead.

h5. Examples

Consider the following sheet:

	[xc:org/formulacompiler/tutorials/ErrorImproperInnerSectionReference.xls]

The range _Section_ is bound as a repeating section, as follows:

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- bindSection]

	
h5. This works

Binding the cell _GoodRef_ yields

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- goodRef]

	
h5. Bad cell ref

If, on the other hand, we bind the cell _BadRef_ to an output, we get

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRef]

	
h5. Bad ranges

Binding the cells with range specifications that don't fully cover the height of the section also results in an error:

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange1]

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange2]

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange3]

	
h5. Bad cell sum
	
Using a sum over a single cell in the section does not work either:

	[jc:org.formulacompiler.tutorials.ErrorImproperInnerSectionReference:---- badRange4]

