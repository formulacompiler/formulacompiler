
h1. Generating An Initial Spreadsheet File


AFC supports generating initial spreadsheet files that, for instance, already setup cells for the most typically used inputs and outputs. Or, if you are "using AFC without a spreadsheet file":buildsheet.htm for formulas defined using a custom UI, you can jumpstart the switch to a full-blown spreadsheet file by generating a template for exactly the formula the user had defined so far.

<%= toc 2, 4 %>


h2. Motivation

AFC has a set of default "conventions for the layout of a spreadsheet":basics.htm#Convention which, when followed, ensure a certain consistency, and simplify the association of cells to inputs and outputs for your users (they do not have to use cell names). It will be much easier for them to get started with these conventions if you provide them with ready-made templates.

It also greatly helps your users if they can start with a spreadsheet file that implements the computation the system is currently configured to perform. (Of course, this is only possible if this computation can be expressed in terms of a spreadsheet.)

Now, while you could certainly create these initial files by hand in Excel and ship them with your application, AFC supports generating them at run-time. This has the following advantages:

	* The initial file can be generated in any of the spreadsheet file formats supported by AFC, as desired by the user.
	* If the current computation is already customizable (see "using AFC without a spreadsheet file":buildsheet.htm), then generating the initial file for this computation must be done at run-time.




h2. Generating The Internal Model

AFC generates initial files from its internal "spreadsheet model":../javadoc/sej/Spreadsheet.html. So in order to generate one, we first need to build its model in memory. This is exactly the same process as is needed when "using AFC without a spreadsheet file":buildsheet.htm#building. See there for details.



h2. <a name="generate">Generating The File</a>

Once you have the internal model set up, you can tell AFC to write out a spreadsheet file for it. There are two flavors of this API. The simpler version automatically deduces the the spreadsheet file type by the file name extension (.xls, .xsd, etc.), and always writes to a file:

	[jc:org.formulacompiler.tutorials.Basics:---- GenerateFile]

The other version lets you specify the extension explicitly and returns the generated spreadsheet as a stream:

	[jc:org.formulacompiler.tutorials.Basics:---- GenerateStream]

As an example, the spreadsheet generated for the model described above ("see here":buildsheet.htm#building) looks like this:

	[xc:GeneratedSheet.xls]



h2. <a name="template">Formatting The File</a>

A spreadsheet file generated by AFC is, by default, rather unappealing visually. You can improve its looks by supplying a template spreadsheet. In the template spreadsheet you define _style names_ for particular cell formats. Then you annotate the internal model with these style names to indicate how to format the generated output.


h3. Template Spreadsheet

The first step is to create the template spreadsheet and assign the style names. AFC uses different mechanisms to assign style names for Excel and OpenOffice spreadsheets.

h4. Excel .xls Template Spreadsheet

While Excel supports proper named cell styles (see Format -> Style in Excel), AFC does not (it uses "JExcelAPI":-jxl to read .xls files, and JExcelAPI does not support named cell styles). 

To work around this, AFC matches your internal model's _style names_ up with _range names_ in the template spreadsheet. If there is a match, AFC uses a number of formatting attributes of the top left cell in the range to format the generated cell(s):

	* A styled _row_ will pick up the row height.
	* A styled _cell_ will pick up the column width (last styled cell in a column wins), and

		* font attributes,
		* fore- and background color,
		* borders,
		* alignment,
		* indentation,
		* number and date formatting.

_Beware:_ If you apply a generic style, like _InputValue_ below, to a date value, it will be shown as its internal numeric value rather than a date on the spreadsheet because AFC applies the number and date formatting settings from the template cell.

Example (screenshot may be outdated as it is not regenerated with every build of AFC):

!generatesheet-template.xls.gif(Screenshot of Template.xls)!

Here's the example template again, this time showing the range names:

	[xc:org/formulacompiler/tutorials/Template.xls]

h4. OpenOffice .ods Template Spreadsheet

With OpenOffice (and .ods in general), AFC supports proper cell styles. So instead of defining range names, you define proper named cell styles. This style information is copied from the template to the generated spreadsheet.

Example (screenshot may be outdated as it is not regenerated with every build of AFC):

!generatesheet-template.ods.gif(Screenshot of Template.ods)!


h3. Style Names In The Model

The second step is to annotate your internal spreadsheet model with style names (this code also demonstrates the use of _call chaining_ to avoid having to repeat the builder variable all the time):

	[jc:org.formulacompiler.tutorials.Basics:---- BuildTemplatedSheet]


h3. Saving With A Template

To save this model using a template, pass the name of the template spreadsheet file to the @saveSpreadsheet@ method:

	[jc:org.formulacompiler.tutorials.Basics:---- GenerateTemplatedFile]

Again, this also works using streams:

	[jc:org.formulacompiler.tutorials.Basics:---- GenerateTemplatedStream]

Here's a screenshot of the result (this image may be outdated as it is not regenerated with every build of AFC):

!generatesheet-result.xls.gif(Screenshot of Result.xls)!

Note that unstyled cells use a default font and format, which depends on the spreadsheet format being written.

