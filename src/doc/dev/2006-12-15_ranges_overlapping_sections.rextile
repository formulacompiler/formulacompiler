
h1. Ranges Overlapping Section Bounds

I have started to implement support for @DFOLD()@ over dynamic sections in the data. For this to work reasonably, I have to first support range references that overlap section bounds. This is because @DSUM()@ et al. only take a single range reference in their arguments. 

<%= toc %>


h2. Why Support Overlaps?

The referenced data table, in which I want to support sections, consists of the top row with the labels and the subsequent data rows. Because you can only specify a single range reference, you cannot simply union the label range and the data range separately. So SEJ must detect the overlap by itself.

h5. Shapeless Ranges

SEJ could, in fact, properly take apart a range reference that spans multiple, possibly nested, dynamic sections. Currently, it not even issues a proper error message, but fails later on with rather cryptic errors because it thinks there are plain cell outer refs to inner cells. I am going to address that with new tests.

Such generality is only reasonable for shapeless ranges, however. A _shapeless range_ is one whose matrix layout is irrelevant. Only the cell set it spans is used. This is the case with arguments to to @SUM()@ et al. but not, for example, to @INDEX()@).

h5. Shaped Ranges

For shaped ranges, the discussion is most pertinent to vertically repeating sections (such as in tables accessed by @DSUM()@). However, for functions like @INDEX()@ the principles laid out apply to horizontally repeating sections in an analogous way.

For shaped ranges, the only thing SEJ should reasonably support is (assuming vertical repetition):

	* A mix of static rows and vertical sections which fully cover the width of the range.
	* Nested vertical subsections. They do not have to cover the range width fully. This means SEJ will support SQL-like repetition of the 1: side in a 1:n join. In the example sheet below, @Section@ and @Subsection@ form such a constellation.

By requiring the top-level sections encountered in a shaped range to cover the range width fully, I avoid the problem of what to do with outer cells to the left or right of the sections. Should the value at the height of the first row of the section be repeated for the whole height of the section? What about the other values specified beside the sample data of the section? They would be dropped silently. Since constant values in the first row of a section are repeated anyway, this is not restrictive.

h5. Shaped vs. Shapeless

In the example below, what is @SUM(C3:C6)@? Is it

	r = 0
	for (e : section())
		r += e.value();
	
or is it

	r = 0
	for (e : section()) 
		for (se : e.subsection())
			r += e.value();

In other words, does @SUM()@ respect the 1:n repetition of the 1: side? I am tempted to say its the first option, as SUM's argument is shapeless. This would make it possible to work with hierarchical data in a natural, XML-like fashion.

But then, the result of @SUM()@ will differ from the result of @DSUM()@, which takes a shaped argument!

One solution might be to let the user indicate the desired behaviour using the values of the repeated cells of the 1: side in the sample data:

	* Repeating the values of the first row/column indicate 1:n join behaviour (shaped).
	* Blank values indicate hierarchical, XML-like behaviour (shapeless).

SEJ should then check that shaped references always repeat the first row values in the sample data as they cannot be treated in a shapeless fashion.

To achieve this, SEJ could, during construction of the computation model, replace such a repeating 1: cell by a reference of the form:

	subelement.parent().value()
	
and include it within the subrange. A peephole optimization could later optimize this again to @element.value()@ in the generated code. It is probably reasonable to require that a section with a nested subsection be either fully repeating (shaped), or not at all (shapeless). If not that, then at least all the repeating cells should be adjacent to the subsection so the latter can be extended to encompass the repeating cells.
	

h2. Test Setup

Here is the setup for some fairly complex test cases:

	[xc:testdata/sej/tutorials/SectionReferences.xls:Data]

	
h2. Test Cases
	
And here are the tests:
	
	[xc:testdata/sej/tutorials/SectionReferences.xls:Tests]


What should these tests do (in pseudo-code)?

h5. Nested sum

	r = 0
	for (e : section()) {
		for (se : e.subsection()) {
			r += se.subvalue();
		}
	}
	
h5. Sum spanning multiple sections

	r = -1 + 4 + 5
	for (e : section()) {
		r += e.value();
	}
	for (e : othersection()) {
		r += e.value();
	}
	
h5. Sum spanning multiple sections (shaped)

	r = -1 + -1 + 4 + 4 + 5 + 5
	for (e : section()) {
		r += e.value();
		for (se : e.subsection()) {
			r += se.parent().repvalue();
		}
	}
	for (e : section2()) {
		r += e.value();
	}

Peephole optimization might change @... + se.parent.repvalue()@ to @... + e.repvalue()@.
	
h5. Sum spanning multiple and nested sections

	r = -10 + 50 + 40
	for (e : section()) {
		for (se : e.subsection()) {
			r += se.subvalue();
		}
	}
	for (e : section2()) {
		r += e.value2();
	}

h5. Sum over inner refs

	r = 0
	for (e : section()) {
		r += e.value();
	}

h5. Sum over inner sums

	r = 0
	for (e : section()) {
		r += helper( e );
	}
	
where @helper( e )@ is

	r = 0
	for (se : e.subsection()) {
		r + = se.subvalue() + se.subvalue() + se.parent.value();
	}

h5. Sum over inner self sums

	r = 0
	for (e : section()) {
		r += helper( e.parent ) + e.value();
	}

where @helper( p )@ is

	r = 0
	for (e : section()) {
		r += e.value();
	}

h5. Sum over inner outer nested sums

	r = 0
	for (e : section()) {
		r += helper( e.parent ) + e.value();
	}

where @helper( p )@ is

	r = -10 + 50 + 40
	for (e : p.section()) {
		for (se : e.subsection()) {
			r += se.subvalue();
		}
	}
	for (e : p.section2()) {
		r += e.value2();
	}

h5. Sum over nested and inner section in parallel

	r = 0
	for (e : section()) {
		r += e.value();
		for (se : e.subsection()) {
			r + = se.subvalue() + se.subvalue() + se.parent.value();
		}
	}

Again, peephole optimization might change @... + se.parent.value()@ to @... + e.value()@.

h5. Sum over section and cells in parallel

	r = 4711 + 4712 + 4713 + 4714
	for (e : section()) {
		r += e.value2();
	}

h5. Sum over mixed section extents

	r = 0
	for (e : section2()) {
		r += e.value2();
	}
	for (e : section3()) {
		r += e.value1() + e.value2() + e.value3();
	}


h2. Roadmap

The most important part right now is to support @DFOLD()@ over vertical sections, excluding the label row. So that comes first.

Next is supporting @DFOLD()@ over nested vertical sections to enable 1:n join processing. This makes detection of 1:n repetition necessary.

Finally, all currently unsupported cases should be rejected with helpful error messages.

All the rest is nice, but not essential, as it can be worked around by judicious use of intermediate results (intermediate sums, for instance).

