
h1. Overview Of Files And Folders

This section gives an overview of the important files and folders of AFC.

<%= toc %>


h2. Conventions

Text files use

	* _Unix line ending_ conventions (LF only), and
	* _UTF-8_ character encoding.


h2. Structure


h3. Top-Level Structure

The following folders and their subfolders are under version control:

dt. ./ : License terms, build files, the documentation redirection, and project definitions (Eclipse, IDEA).

dt. components/.../ : Individual sub-components of AFC, which is each represented by its own project. See below for details.

dt. src/ : Source for documentation, build configuration, and scripts.

dt. src/doc/ : Source of the documentation in "Rextile":-rex and HTML/CSS format.

dt. lib/test/ : Third-party .jar files required to test AFC components. (Test is an _area_, see below.)

These folders are non-versioned:

dt. doc/ : Documenation files (generated from @src/doc/@ by @ant doc@).
	
dt. doc/javadoc/ : Generated API documentation for AFC.

dt. dist/ : Distribution packages (generated by @ant dist@).

dt. temp/ : Temporary files created during builds.


h3. Component Structure

Within each component in @components/@, we have the following structure. Versioned folders:

dt. ./ : Build files, project definitions (Eclipse, IDEA).

dt. ./src/.../ : Source files for the different areas.

dt. ./lib/.../ : Third-party .jar and license files.

Non-versioned folders:

dt. ./build/ : Generated .jar files (generated by @ant build@).

dt. ./temp/ : Temporary files created during builds.


h3. Areas

Within the @src/@, @lib/@, and @temp/@ folders, we often have a separation into areas. Typical areas are:

	- intf := Public interface
	- impl := Non-public implementation (but visible to other AFC components)
	- test := Unit tests
	- test-reference := Comprehensive tests (long running) 
	- build := Code which generates other source code during build (parser definitions, for example)
	- patches := Custom patches to required third-party libraries as shipped in @lib/@


h3. Source Types

Within the areas, the source is again split into different types of source:

	- java := .java source files
	- java-debug := .java source files for temporary debug aids which are never referenced in release builds; this path is typically enabled in the IDE, but must never be referenced in @build.xml@
	- resources := other files needed in the final .jar
	- data := other files _not_ needed in the final .jar

A guiding principle is that, the @intf@ areas should not have dependencies on anything but other @intf@ areas. This is enforced in the build scripts.


h2. Components

What follows is a component breakdown generated from @components.yaml@ (there is also a "more detailed breakdown":dependencies.htm including packages).

<%= inc_file('contribute/hacking/components.rextinc') %>


h2. Build Files

This gives a breakdown of the build files. There is also a detailed description of "AFC's build process and targets":build.htm.

The top-level folder contains:

dt. build.xml : Top-level "Ant":-ant build script. Delegates many of its tasks to the component build scripts.

dt. build.default.properties : Default custom build properties. You should override these in a custom @build.properties@ file.
	
dt. build.properties : Optional custom build properties. Use this to locate external tools. See @build.default.properties@ for a list of things to define. _Never put this file under version control._

dt. components/build-common.xml : Common tasks for all of the component build scripts.

dt. components/.../build.xml : Individual component build scripts.
	
dt. src/checkstyle-config.xml : Configuration of "CheckStyle":-checkstyle for all of the Java sources in AFC. Checks the copyright header, for instance (see @copyright-header.txt@).

dt. src/checkstyle-config-apionly.xml : Extended configuration of "CheckStyle":-checkstyle for all of the Java sources of AFC's API. Enforces JavaDoc comments, for instance.

dt. src/copyright-header.txt : Required copyright header text for all Java sources (see @checkstyle-config.xml@).
	
dt. src/jcite-tripwires.txt : "Tripwire database":-tripwire for "JCite":-jcite.


h2. Scripts

The scripts are all "Ruby":-rb scripts used to generate part of the build system and the documentation.
	
dt. src/scripts/components.yaml : Component definitions with dependency information in "YAML":-yaml format. Input to @project.rb@, which in turn feeds it to the various @gen-*.rb@ scripts. <br/>*Warning: This file must not contain hard tabs!*

dt. src/scripts/project.rb : Reads @components.yaml@ and exposes the component structure in an accessible object model.

dt. src/scripts/gen-macker-rules.rb : Generates @temp/macker-rules.xml@, which drives component dependency checking in @build.xml@ using "Macker":-macker.

dt. src/scripts/macker-rules-template.xml : Embedded Ruby template used by @gen-macker-rules.rb@.

dt. src/scripts/gen-dependency-graph.rb : Generates @temp/doc/contribute/hacking/dependency-graph.dot@, from which "doc/contribute/hacking/dependency-graph.png":dependency-graph.png is produced by "dot":-dot.
	
dt. src/scripts/gen-dependency-overview.rb : Generates @temp/doc/contribute/hacking/packages.rextinc@, which is included in the documentation.
	
dt. src/scripts/gen-component-overview.rb : Generates @temp/doc/contribute/hacking/components.rextinc@, which is included in the documentation.
	

h2. Miscellany
	
dt. .project <br/> .classpath <br/> .settings/ : "Eclipse project definitions":ide.htm.

dt. xy.iml : IDEA project definitions.

dt. index.html : Redirection to @doc/index.htm@.

dt. LICENSE.html : Top-level license terms for AFC. Duplicated in @doc/LICENSE.html@.
