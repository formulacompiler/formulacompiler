
h1. Contributing To AFC

Thank you! You want to contribute to AFC. I appreciate it. In these pages I will tell you how to go about it.

We have to cover quite a bit of ground. This is because AFC is developed with great attention to quality. But never fear, the examples will make it all clear.

dt. "House Rules":-rules : Basic rules to help you and everyone else produce a consistent and high-quality product.

dt. "Add A Primitive Function":-prim : How to add a primitive spreadsheet function, @ABS()@, by writing a template method in Java. Introduces the fundamental contribution rules shown above.

dt. "Add A High-Level Function":-high (contains "MathML":-mathml, use "Firefox to view":-mozmath) : How to add a high-level spreadsheet function, @COMBIN()@, which is defined by rewriting it using lower-level functions.

dt. "Add A High-Level Aggregator":-agg (contains "MathML":-mathml, use "Firefox to view":-mozmath) : How to add an aggregator function, @VAR()@, which is defined by rewriting it using @let@, @fold@, and lower-level functions.

dt. "Add A High-Level Vector Computation":-vec (contains "MathML":-mathml, use "Firefox to view":-mozmath) : How to add a vector computation function, @NPV()@, which is defined by rewriting it using @let@, @fold@, and lower-level functions.

Once you leave these well-documented paths, you will have to read the code itself for guidance. There is one more crucial aspect, however.

dt. "Package Dependencies":-dep : AFC's build enforces strict package dependency rules to make sure the system remains well structured.
