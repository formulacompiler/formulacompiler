
h1. IDE Setup

This is pretty straightforward. Just add a few .jars and source paths, run an initial @ant generate@, and you're all set.

<%= toc %>


h2. Rebuild Sources

SEJ consists partially of generated Java sources. Before you can work in the IDE, these need to be regenerated.

Run "@ant generate@":build.htm to rebuild all the generated Java sources and source paths. Make sure that @ant@ runs on the same version of the JDK as your IDE uses. I, for example, run default @ant@ on JDK 1.5, but Eclipse runs on JDK 1.6. So I have to make sure I run @ant generate@ on JDK 1.6 here. This is because some of the generated sources differ by JDK version and are put into separate folders (see below).


h2. Eclipse

h4. Sources

_Don't forget to rebuild the generated sources first! (See above.)_

h4. Setup

To use "Eclipse":-ec (as I do), you can simply use the existing definition in @.project/.classpath@:

	* Create a new project.
	* Choose _Java Project_.
	* Choose _Create project from existing source_.
	* Specify the folder where you unpacked the SEJ source distribution.
	* Give the project a name (_sej-trunk_, for instance).
	* Choose _Finish_.

If you are running on JDK 1.6, then all should be well. If you're on JDK 1.5, then you must change the source path @temp/gen-src/classes-jre1.6@ to @temp/gen-src/classes-jre1.5@.

h4. Code Style

Finally, you may want to import the formatter rules for the preferred "code style":style.htm to use with SEJ.

	* Open the _Preferences_.
	* Go to _Java > Code Style > Formatter_.
	* Choose _Import_ to import @src/eclipse-code-style.xml@.
	* Choose _Configure Project Specific Settings_ (link at the top of the dialog).
	* Make the SEJ project use the format named _SEJ_ (which you just imported).
	* Goto _Java > Code Style_.
	* Again, choose _Configure Project Specific Settings_ (link at the top of the dialog).
	* Make the SEJ project use specific settings.
	* In the _Conventions for variable names_, set only the prefix for _Parameters_ to @_@ (underscore).
	* Check _Qualify all generated field 

That's it. You're "ready to roll":contributing.htm.


h2. Other IDEs

h4. Sources

_Don't forget to rebuild the generated sources first! (See above.)_

h4. Setup

Add the following .jars to the build path:

	* @lib/*.jar@
	* @lib/build-only/asm-*-x.y.z.jar@

Add the following source folders:

	* @src/classes/@
	* @src/examples/@
	* @src/build-tools/@
	* @src/debug/@
	* @temp/gen-src/classes@
	* @temp/gen-src/classes-jre1.x@ (where @x@ is your JDK/JRE version; see above)
	* @src/scratchpad/@ (optional)
	
and the following test source folders:

	* @src/test-accessors/@
	* @src/test-unit/@
	* @src/test-system/@
	
h4. Tests

Now make sure that, when running tests, the current folder is set to where you unpacked the SEJ source distribution.

h4. Code Style

Finally, you may want to update Java source code formatter rules for the preferred "code style":style.htm to use with SEJ.

That's it. You're "ready to roll":contributing.htm.
