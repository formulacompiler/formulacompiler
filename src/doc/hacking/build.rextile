
h1. AFC's Build Process

AFC comes with an "Ant":-ant build script in @build.xml@. This document lists the most important build targets. To run a build, you need to "setup the required tools":tools.htm first.

To get a quick overview of all available build targets, run @ant -p@ in AFC's root folder. If you want to know more, I encourage you to look at @build.xml@. Skimming over the "file and folder list":files.htm first will help.

<%= toc 2, 4 %>


h2. Main Targets

dt. build : is the default build target. It rebuilds @build/sej.jar@ and @build/sej-runtime.jar@ from the source code.

dt. test : builds the jars and runs all automated tests. This can take quite a while.

dt. doc : rebuilds the documentation from scratch. It runs the tests first because some of the test results are cited directly into the documentation (in the "function reference":../reference/index.htm, for instance). This will take a while. See @doc-api@, @doc-main@, and @doc-main-quick@ below for faster options.

dt. dist : rebuilds the distribution packages from scratch. It first erases all temporary and build files and then runs a full build, including tests, checks, and documentation, but _not_ code coverage analysis.


h2. Developer Targets

dt. compile : compiles all the source code (depends on @compile-main@).

dt. compile-main : compiles the product source code (not tests and examples). Internally generates Java source files for the expression scanners and parsers, the expression "rewriting rules":addrewrite.htm, and the "template-driven byte-code compilers":addprimitive.htm.

dt. test-main : Like @test@, but skips the very time-consuming reference tests. Mainly useful as a quick smoke-test and as a prerequisite for code citing in @doc-main-quick@.

dt. test-single : runs only a single test suite from the tests. Use this for debugging tests when running them from the IDE is somehow not sufficient. You will have to override the @test-single.class@ property in @build.properties@ to specify which test to run (see @build.default.properties@ for an example).

dt. check : Checks the code for conformance with style and dependency rules.

dt. check-deps : Checks package dependency rules. These are generated from @src/scripts/components.yaml@.

dt. check-style : Checks source code style rules. They are specified in @src/checkstyle-*.xml@. Includes checks for missing header or javadoc comments (@style@).

dt. doc-main : regenerates the HTML files in @doc/@ from @src/doc/@, except for the function reference. Runs all required build steps for citations to succeed.

dt. doc-main-quick : like @doc-main@, but only updates and does not run tests first. So it may issue warnings if there are no test results in @temp/@. If so, running @test-main@ might help.

dt. doc-img : updates the .png images from their "dot":-dot sources.

dt. cover : see @cover-cobertura@.

dt. cover-corbertura : runs code coverage analysis using "Cobertura":-cobertura. Slowish, but produces nice looking output. Like @test@, but instruments the product code for coverage analysis. Output is in @temp/coverage/@.

dt. cover-emma : like @cover-cobertura@, but using "Emma":-emma. Faster.

