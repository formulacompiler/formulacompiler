
h1. Decompiling An Engine

If you want to know what kind of code AFC generates, looking at the resulting JVM byte code is not everyone's thing. To simplify this, you can ask AFC to decompile the generated byte code to Java source code (this feature uses the "JODE":-jode library).

<%= toc %>


h2. Background

AFC generates computation engines that are opaque. This is deliberate. It leaves AFC free to implement engines any way it sees fit.

The current implementation generates "JVM byte code":-jvminsns internally. If you save an engine, the resulting file is actually an ordinary .jar file containing .class files. But you should never rely on this in your production code. It might change. 


h2. Disassembling

During debugging and problem analysis, however, the .jar file comes in handy. You can disassemble it using the JDK's "@javap@":-javap tool. Here's how:

<pre><code
>javap -c -private -classpath <jarfile> org/formulacompiler/gen/<classname>
</code></pre>

where @<jarfile>@ is the path to the saved engine file and @<classname>@ is the name of the class to disassemble. AFC generates the following classes:

dt. @$Factory@ : is the factory implementation. It is usually not very interesting.

dt. @$Root@ : is the main engine implementation. It contains all top-level computations, that is, those not contained within a repeating section.

dt. @$Sect<n>@ : are the engine implementations for the repeating elements of defined sections. The number @<n>@ is simply an increasing ordinal numbering all the different sections used.

[-javap]http://java.sun.com/j2se/1.5.0/docs/tooldocs/windows/javap.html


h2. Decompiling

Reading "JVM byte code":-jvminsns is not something most typical Java programmers are comfortable with. Luckily, there is a good open-source "decompiler", called "JODE":-jode, which does a good job of converting @javac@-compiled JVM byte code back to readable Java source code. AFC takes great care to produce byte code that looks like @javac@-generated code, so JODE works well with AFC too.

One way to use JODE on generated engines is to simply run the @jode.jar@ file from the public JODE download package, which brings up a Swing GUI. In the GUI, add the saved engine file to the class path, and then find the @sej.gen@ package to decompile its contents. The classes are, of course, the same as the ones given above.

AFC also contains built-in support for decompiling engines, which uses the JODE core internally. When using the built-in support, you don't have to save a compiled engine to decompile it. It can be done in-memory.

The API supports two methods to get the decompiled result. The first returns a single string containing the decompiled classes, all concatenated together:

	[jc:org.formulacompiler.tutorials.Decompilation:---- asString]
	
The second version saves the decompiled sources to a folder, in the proper package structure. So saving to @/temp@ will generate:

<pre><code
>/temp/org/formulacompiler/gen/$Factory.java
/temp/org/formulacompiler/gen/$Root.java
/temp/org/formulacompiler/gen/$Sect<n>.java
</code></pre>

Here's how:

	[jc:org.formulacompiler.tutorials.Decompilation:---- saveTo]

This mode is ideal to get the generated source into your IDE, or, for example, to cite it into documentation, as I do below:

	[jc:org/formulacompiler/tutorials/decompiler/org.formulacompiler.gen.$Root]
	
and:

	[jc:org/formulacompiler/tutorials/decompiler/org.formulacompiler.gen.$Factory]

