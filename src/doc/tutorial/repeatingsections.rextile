
h1. Repeating Sections with SEJ


SEJ allows you to define _repeating sections_ in a spreadsheet. Such sections are different from ordinary ranges in Excel in that the width or height of the section varies with each use of the computation.

<%= toc 2, 3 %>


h2. Sample Spreadsheet

For example, consider a hypothetical customer rating computation. We want users to be able to define a spreadsheet that computes the rating that we run for each customer in turn. For each customer, we feed the totals of all his orders of the last three months to the computation. One particular customer may have placed 5 orders in the last three months, another one 200.

Let me show you a very simple spreadsheet that computes such a customer rating. Note that in the depicted spreadsheet

	* the colored area is a named range whose name is given just below the sheet, and
	* the blue names in parentheses are cell names.

	[xc:testdata/sej/tutorials/CustomerRating.xls]

The row range @3:7@ will be our repeating section with variable height. Cell @B10@, the _Total_, sums the five rows 3..7. For every actual computation, SEJ will shrink or extend the range within the sum in @B10@ to match the number of order totals we actually passed in.



h2. Spreadsheet Rules

The fact that my original spreadsheet has exactly five order total rows is irrelevant to SEJ. What matters is that

	* when we define the repeating section over the rows 3..7,
	* the sum in @B10@ covers the entire height of the variable section, and
	* the formula in @B10@ uses the range function @SUM@, rather than @B3+...+B7@.

Generally speaking, if you reference cells of a repeating section from outside the section, you'll have to use a spreadsheet function that takes a _range_ as an argument. This range must cover the entire variable extent of the section (height or width).

So we could just as well have used ten, or only two example rows. (In fact, we can get away with just one example row. I don't recommend this, though, because you might then forget to use @SUM@ over the rows.)

In any case, SEJ uses *only the first row* as a template for making the _n_ rows later on, at runtime. This will be important later when I show you a more complex spreadsheet.



h2. Hooking It Up

Let's hook up the above spreadsheet with the customer rating application. First of all, we need an interface to the customer data. This interface must let SEJ query the order totals. A simple approach would be to just return an array of order totals. SEJ needs a little more structure than this, though.

When you define a repeating section with SEJ, the section is treated like an embedded sub-sheet within the main sheet. Like a master/detail form really. This sub-sheet works just like the main sheet, so it must have an input interface to get values from. (As you'll see later, one advantage of having a proper interface for section elements is it becomes very straightforward to add new input values like the order date.)

Here's the interface for the orders sub-sheet we are going to use:

	[jc:sej.tutorials.CustomerRatingWithOrders:---- OrderData]

The main customer interface must therefore let SEJ query the set of orders it should process for this customer. The simplest way is to use an array:

	[jc:sej.tutorials.CustomerRatingWithOrders:---- CustomerData; omit -- CustomerDataAlternatives]

You can also use an @Iterable@ or an @Iterator@, or one of their descendants. Like so:

	[jc:sej.tutorials.CustomerRatingWithOrders:-- CustomerDataAlternatives]

We now need to tell SEJ that the order totals range of cells in the spreadsheet should be considered a vertically repeating section, which gets its data from the call shown above. In addition, we must tell SEJ the precise input interface to use for the orders, namely @OrderData@. Here's how to do this (given that the name _OrdersForLastThreeMonths_ is defined in the spreadsheet as @B3:B7@):

	[jc:sej.tutorials.CustomerRatingWithOrders:---- bindOrders; omit -- omit]

As I said above, a repeating section is like a sub-sheet within the main-sheet. Thus, the return value of this method is again a @Section@, just like the original @binder@ for the main sheet. We use it to bind the cells in the first template row of the section to input methods on the order interface. Like so (given that the name _OrderTotal_ is defined in the spreadsheet as @B3@):

	[jc:sej.tutorials.CustomerRatingWithOrders:---- bindOrderValues]

Binding the outputs is straightforward, as we are only binding global values, not values within the repeating section:

	[jc:sej.tutorials.CustomerRatingWithOrders:---- bindRating]

We do, however, have to make our output interface "resettable":caching.htm. This is because SEJ always caches the elements of a repeatable section internally. Here it is, then:

	[jc:sej.tutorials.CustomerRatingWithOrders:---- CustomerRating]

h5. Note

Given the return type @OrderData[]@, SEJ could infer the input interface for the section by itself. Unfortunately, this is not possible when the return type is a @Collection@ or an @Iterator@. Even @Collection<OrderData>@ does not help because the generics annotations are erased at runtime. SEJ therefore generally mandates that you pass it the interface type to use.


h2. Generated Code

SEJ generates a separate engine class for each repeating section:

	[jc:customerRatingWithOrders/sej.gen.$Sect0]
	
Its instances are built in the main engine when the repeating section is first accessed. You can see this in the method @get$Sect0()@ below:

	[jc:customerRatingWithOrders/sej.gen.$Root]



h2. Intermediate Values In A Repeating Section

Let's extend the order totals example a bit. In the sum of the order totals, we want to give less weight to older values. To do this, we add the order date to the order interface:

	[jc:sej.tutorials.CustomerRatingWithOrdersComplex:---- OrderData]

We now want our spreadsheet to compute the age of an order in days, and from that to compute the weight to give to the order's total. To do this, we compute the difference between the current date and the order date, and then linearly reduce the weight of olders orders towards 0 at the age of 90 days. The prototype row 3 shows this:

	[xc:testdata/sej/tutorials/CustomerRatingComplex.xls]

To consider:

	* The order date is an input value. But to provide meaningful sample values for it, I have used a formula that computes them relative to the current date.
	* We now have intermediate values within the repeating section. Columns B and C are inputs, but columns D, E, F are computed within the spreadsheet.
	* The final aggregation in @B10@ now sums the computed section values in @F3:F7@.
	* The computed row value in column D references a cell outside of the repeating section, namely the current date in @B11@.


SEJ handles all of this correctly. You do, however, have to follow a few rules:

	* When referencing within the section, only reference within the same row. You cannot reference a value from a sibling row. In particular, you cannot do running totals.
	* As stated above, SEJ only looks at the *first row* of the section (row 3 here), which it then uses as a template for all others. You must yourself take care that your other example rows (rows 4 through 7 here) have formulas of a similiar structure as the template row.


The only remaining thing is to bind the order date in a fashion similar to the order total (assuming the name _OrderDate_ is defined in the spreadsheet as @C3@):

	[jc:sej.tutorials.CustomerRatingWithOrdersComplex:---- bindOrderValues]

