
h1. Life Before the Abacus Formula Compiler

Let's assume we are doing a typical order processing application. This application needs to compute a rebate for every line item entered. The rebate computation is currently hard-wired as follows:

	[jc:org.formulacompiler.tutorials.Basics:---- computeStatic]

Customers, however, have long been clamoring for a more flexible rebating scheme. Problem is, no two customers want it done the same way. So, in essence, we need to be able to replace the rebate computation with a specific version _for nearly each customer_!

Management decides that it is too expensive to accommodate all customers, but they do want to make an effort for some key accounts.

<%= toc 2, 3 %>


h2. Strategy Pattern

We duly refactor the application to make the rebate computation replaceable by introducing a _rebate computation strategy_:

	[jc:org.formulacompiler.tutorials.Basics:---- Strategy; strip; strip ---- Factory]

With this, the rebate computation on the line item becomes:

	[jc:org.formulacompiler.tutorials.Basics:---- computeStrategy]

To properly decouple the computations from changes to the line item model, we define an interface, @RebateInputs@, through which the computations access the line item:

	[jc:org.formulacompiler.tutorials.Basics:---- RebateInputs]

which is implemented by a simple adaptor class accessing the actual line item in question.

Now we write the specific implementations of @RebateComputation@ for the standard case and our two key accounts and, depending on the program settings, register the appropriate one for use by @newInstance@ above during startup. Here's the standard implementation:

	[jc:org.formulacompiler.tutorials.Basics:---- StandardStrategy]



h2. External Customization

With the decoupling in place, we realize that we could even open up rebate customization to selected distribution partners. Those, in fact, whom we trust to write Java code to our rebate computation interface specs.

Alas, there are hardly any of those. Still, the few there are now can:

	* write their own implementation of the @RebateComputation@ class,
	* compile it, and
	* register the resulting .class file with our application.

All we need to do is add a little magic that makes @newInstance@ load and use the registered .class file.



h2. Not Good Enough!

This, however, still leaves the majority of our customers dissatisfied, with hardly a distributor capable of helping them. And we have opened up a potential security hole in that the system now loads and runs customer-supplied class files.

This kind of problem is where AFC really shines. In the next section, I show you how to make an application customizable using computation defined in spreadsheets - something even savvy users know how to do!

"Next: AFC to the rescue!":basics.htm
