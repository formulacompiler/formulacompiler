
h1. Type Conversions

Engines generated by AFC perform all internal computations using a "single":numeric_type.htm#GlobalSetting, user-defined "numeric type":numeric_type.htm. At the moment, this can be @double@, @BigDecimal@, @long@, or "scaled @long@":numeric_type.htm#long. The engine therefore must

	* convert all "input values":#Inputs obtained from your input methods to its internal type, and
	* convert all "output values":#Outputs from its internal type to the return type of your output methods.

To convert other value types to those AFC can handle, you should "wrap your interfaces":avoid_dependencies.htm to add custom conversion logic. You might also want to do this to keep your interfaces clean of dependencies on AFC specifics (such as the @ScaledLong@ and @Milliseconds@ annotations).


h2. <a name="Inputs">Input Conversions</a>

Here's the set of supported input types (the @@ScaledLong@ annotation works with all supported scales, not just @7@, of course):

	[jc:org.formulacompiler.tutorials.TypeConversion:---- Input]

The rules are:

	* Values are silently truncated or reduced in precision to fit the target type (like Java does).
    * Dates are converted to local time using the time zone as specified in the "factory configuration":locale.htm.
    * Pure times *must not* be passed a @java.util.Date@ - "here's why":datetime.htm.
	* @null@ values are silently converted to zero (unlike Java).

h5. Warning

The latter rule is different from Excel, which converts empty cells situatively. An empty cell is, for instance, ignored by @PRODUCT@ and string concatenation in Excel. As of this version of AFC, a @PRODUCT@ involving an input value which is @null@ returns zero, not the product of all non-null numbers.
<br/>*This may change to be more compatible with Excel in a future release of AFC.*


h2. <a name="Outputs">Output Conversions</a>

The set of supported output types is the same as that for input types (again, the @@ScaledLong@ annotation works with all supported scales, not just @7@):

	[jc:org.formulacompiler.tutorials.TypeConversion:---- Output]

The rules are similar, too:

	* Values are silently truncated or reduced in precision to fit the target type (like Java does).
    * Dates are converted from local time using the time zone as specified in the "factory configuration":locale.htm.
    * Pure times *must not* be returned as @java.util.Date@ - "here's why":datetime.htm.
	* AFC never returns @null@.

h5. Warning

The latter rule implies that, even if you map an output method to an empty spreadsheet cell, or to one that is mapped to an input method returning @null@, AFC will return zero, not @null@.
<br/>*This may change in a future release of AFC.*
