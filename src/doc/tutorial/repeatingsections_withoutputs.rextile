
h1. Outputs in Repeating Sections


Sometimes you need to compute distinct output values for each of the elements of a variable-length data series. This is what we did before, in the "customer rating":repeatingsections.htm example, where the application loops of the customers itself. There are cases, however, where doing the loop yourself severely limits the range of computations your users can formulate. Mainly this is because they then cannot aggregate over the whole series. For this case, AFC supports per-element outputs in repeating sections.

<%= toc 2, 3 %>


h2. Sample Spreadsheet

For example, consider an application that must compute the individual yearly bonus amounts for each employee, given the total bonus amount for the entire company and some base data about each employee's performance. Typically, such a computation will first compute some sort of overall performance indicator for each employee, given his or her base data. It will then sum this indicator across the company, and finally distribute the bonus to each employee proportionally to his or her individual performance.

So: given the total bonus amount, compute the individual bonus amounts for all employees. As (rather simplistic) base performance data, we will pass in the base salary and hours overtime for each employee. The sample spreadsheet shown below computes the total salary, including overtime at a fixed rate, as the employee performance indicator. It then computes each employee's share of the bonus to be proportional to his or her share of the total salary of all employees (which is computed in the spreadsheet):

	[xc:org/formulacompiler/tutorials/BonusPerEmployee.xls]

To consider:

	* The bonus total and fixed overtime rate (salary per hour) are global inputs.
	* The base salary and hours overtime are inputs per employee.
	* The final bonus amount is an _output per employee_.
	* The employee name is not bound. It simply enhances the expressiveness of the example spreadsheet.
	* Cell @D5@ is an intermediate sum over the repeating section.
	* Cells @E2:E4@ use this intermediate sum again, within the section.

Note that in scenarios like this one, where an outer aggregation over a possibly large repeating section is reused within the section, the mandatory "caching of values":caching.htm pays off quickly.



h2. Interfaces

The following exposition assumes that you have read and understood the simpler "customer rating example":repeatingsections.htm.


h3. Inputs

Since we need to tell the computation how many employees there are, and what their base performance data is, our inputs look much like they did for the "customer rating example":repeatingsections.htm. We are going to use a "scaled long":numeric_type.htm#long engine here, however, because this is a financial computation:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- Inputs]


h3. Outputs

The factory, too, is straightforward:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- OutputFactory]

Now, however, we need to get at an output value for each individual employee (the bonus amount), not just a global output as before. The concept is the same as for the individual inputs: we define a global output which defines an accessor for an array of outputs for the individual employees:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- Outputs; omit -- OutputsAlternatives]

This accessor will be implemented by AFC, just like other output methods. Apart from arrays, AFC supports @List@ and its ancestors @Collection@ and @Iterable@, as well as @Iterator@ as the result type of section accessor methods:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:-- OutputsAlternatives]



h2. Binding

Binding the sheet to this structure now becomes straightforward again. The main difference is that when binding the section, we bind both an input and an output method and target type:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindSections; omit -- omit]

The employee inputs are bound just as before:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindEmployeeInputs]

Binding the employee output, the bonus amount, is similar in concept as binding its inputs. We simply use @defineOutputCell@:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindEmployeeOutputs]

Finally, we need to bind the globals:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- bindGlobals]



h2. Using It

The interfaces given above can now be used as follows. First, we set up the input data in mock objects and request a computation for it:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- setupInputs]

Then, we read back individual bonus amounts from the computation:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputs]

Or, using the other supported return types @List@, @Collection@, and @Iterator@:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputsList]

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputsCollection]

	[jc:org.formulacompiler.tutorials.BonusPerEmployee:---- consumeOutputsIterator]

	
h2. Generated Code

As in the simpler "input-only case":repeatingsections.htm, AFC generates a separate engine class for the repeating section. This time, however, it implements our output interface, @EmployeeBonusComputation@:

	[jc:bonusPerEmployee/org.formulacompiler.gen.$Sect0]
	
Its instances are again built in the main engine when the repeating section is first accessed. In particular, this now happens when our section output accessor @employees()@ is called:

	[jc:bonusPerEmployee/org.formulacompiler.gen.$Root]


h2. Linking Outputs To Inputs

Note that in the setup shown above, we have no way of associating an employee output interface with its corresponding input interface other than by its position in the array (or collection, or iterator).

We can change this in much the same way as to get access to the input data to provide "default output implementations":bindcells.htm#Defaults. Namely, by accepting the input data as the sole argument to the output type's constructor. To do this we have to change our employee output interface to an abstract class, of course. We can then expose an accessor for the input data value passed to our constructor:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee_Linked:---- Outputs]

Now we have the desired association:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee_Linked:---- consumeOutputs]



h2. Linking Outputs To Parent Outputs

In your constructor, you can also get the parent section's output object in case you need to access it in your default implementations. Here's how:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee_FullyLinked:---- Outputs]

Note that if you need to get the parent, you must also specify the input object as a constructor parameter. Here's the effect at runtime:

	[jc:org.formulacompiler.tutorials.BonusPerEmployee_FullyLinked:---- consumeOutputs]
