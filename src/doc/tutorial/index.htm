<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <title>SEJ Tutorial - arrenbrecht.ch</title>
    <style type="text/css" media="screen">
        @import "../style.css";
	
    </style>
    <link rel="stylesheet" type="text/css" media="print" href="../printstyle.css" />
</head>
<body>
    <div class="all">
        <div class="nav">
            <p class="nav">
<a href="http://www.arrenbrecht.ch/">arrenbrecht.ch</a> &gt;
<a href="../index.htm">SEJ</a> &gt;
<a href="index.htm">Tutorial</a> &gt;

			</p>
        </div>
        <div class="title">
            <h1>
                SEJ Tutorial</h1>
        </div>
        
        
        <div class="content">
        
<p>This is the tutorial for the Spreadsheet Engine for Java (SEJ). It is organized as a collection of examples and reference topics, which are best read in the order presented here. You might also want to have a look at the <a href="../reference/index.htm">Function Reference</a> and the <a href="../javadoc/index.html">API Reference</a>.</p>

<h5>Note</h5>
<p>To ensure its correctness, all the sample code in this tutorial has been <a href="http://arrenbrecht.ch/jcite/">cited from automated tests</a> that are run with every release build (unless stated otherwise). The tests can be found in <tt>src/test-system/sej/tutorials</tt> in the source distribution of SEJ. The accompanying data is in <tt>src/test-system/testdata/sej/tutorials</tt>.</p>

<h2>Fundamentals</h2><dl><dt><a href="reason.htm">The Reason</a></dt><dd>To demonstrate the raison d'être for SEJ, I introduce a simple example: an order entry application where the line item rebate is made customizable. The shortcomings of this solution are overcome in the topic below, which introduces SEJ.</dd><dt><a href="basics.htm">The Basics</a></dt><dd>Line item pricing revisited: a simple case study that introduces the main concepts of SEJ.</dd><dt><a href="numeric_type.htm">Numeric Type</a></dt><dd>SEJ normally does all numeric calculations using the <tt>double</tt> type. This is often not acceptable for financial applications. This topic shows how to make an engine use one of the precise types <tt>BigDecimal</tt> and scaled <tt>long</tt> for all numeric computations.</dd><dt><a href="type_conversion.htm">Type Conversions</a></dt><dd>Your input and output interfaces should ideally not be tailored to SEJ. SEJ therefore can convert a variety of numeric input and output data types from/to its internal numeric type.</dd><dt><a href="caching.htm">Caching Of Values</a></dt><dd>Many computations can be sped up considerably by caching intermediate results. Here I show how to make an engine cache input values and intermediate cell values internally.</dd></dl>

<h2>Repeating Sections</h2>
<p>Define <em>repeating sections</em> which are like ranges in Excel, but their width or height may vary with each use of the computation.</p><dl><dt><a href="repeatingsections.htm">Variable-length Data Series</a></dt><dd>Sometimes you need to pass a data series of variable length to a computation. For example, the dates and totals of all orders in the last 3 months. This is what SEJ's <em>repeating sections</em> are for.</dd><dt><a href="repeatingsections_withoutputs.htm">Variable Number of Computations</a></dt><dd>To go one step further, sometimes you need SEJ to compute distinct output values for each of the elements of a variable-length data series. For example, the bonus amount for each employee, given the total bonus for the company. Doing the loop over the series yourself can be severely limiting the range of computations your users can formulate because they cannot aggregate over the whole series. SEJ therefore supports per-element outputs in repeating sections.</dd></dl>

<h2>Binding in Detail</h2>
<p>Advanced use cases concerning the binding of the input and output cells of a spreadsheet to the methods of your Java interfaces or classes.</p><dl><dt><a href="bindcells.htm">Binding Cells</a></dt><dd>How to explicitly bind specific input and output cells of a spreadsheet to methods of plain Java interfaces or classes.</dd><dt><a href="bindbyname.htm">Binding Data By Name</a></dt><dd>If you have a generic system where the set of possible input and/or output values cannot be determined at compile-time, you have to resort to some sort of late binding, or binding by name.</dd><dt><a href="bindmultipleinterfaces.htm">Binding To Multiple Interfaces</a></dt><dd>SEJ only allows you to set a single interface to provide inputs to or obtain outputs from a computation. How can you work around this?</dd><dt><a href="bindmultipleinstances.htm">Binding To Multiple Instances</a></dt><dd>What if you need to provide multiple separate instances of source interfaces as input providers, or need SEJ to implement multiple separate instances of output interfaces?</dd></dl>

<h2>Miscellany</h2><dl><dt><a href="buildsheet.htm">Building Your Own Spreadsheet</a></dt><dd>Some applications may wish to use SEJ to compile computation engines, but want users to be able to specify simple computations without having to setup a spreadsheet. These can use a builder to dynamically construct a spreadsheet as input to SEJ.</dd><dt><a href="customclassloader.htm">Using A Custom ClassLoader</a></dt><dd>Some companies use a custom <tt>ClassLoader</tt> to, for example, speed up class loading. If you don't replace Java's default class loader (<tt>ClassLoader.getSystemClassLoader()</tt>), you may have to make sure that the engines generated by SEJ use your custom implementation.</dd><dt><a href="errors.htm">Errors</a></dt><dd>See what happens when something goes wrong, and find hints on what to do.</dd></dl>        </div>
        <div class="footer">
<p>Copyright &copy; 2006 Peter Arrenbrecht. All rights reserved.</p>        </div>
    </div>
</body>
</html>