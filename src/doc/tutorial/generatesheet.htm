<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <title>Generating An Initial Spreadsheet File - arrenbrecht.ch</title>
    <style type="text/css" media="screen">
        @import "../style.css";
	
    </style>
    <link rel="stylesheet" type="text/css" media="print" href="../printstyle.css" />
	<script type="text/javascript" src="../scripts.js"></script>
	
</head>
<body onload="body_loaded();">
    <div class="all">
        <div class="nav">
            <p class="nav">
<a href="http://www.arrenbrecht.ch/">arrenbrecht.ch</a> &gt;
<a href="../index.htm">SEJ</a> &gt;
<a href="index.htm">Tutorial</a> &gt;

			</p>
        </div>
        <div class="title">
            <h1>
                Generating An Initial Spreadsheet File</h1>
        </div>
        
        
        <div class="content">
        
<p>SEJ supports generating initial spreadsheet files that, for instance, already setup cells for the most typically used inputs and outputs. Or, if you are <a href="buildsheet.htm">using SEJ without a spreadsheet file</a> for formulas defined using a custom UI, you can jumpstart the switch to a full-blown spreadsheet file by generating a template for exactly the formula the user had defined so far.</p><div class="toc">
<p id="pagetoc" hfrom="2" hto="3"><i>Table Of Contents missing - need to enable JavaScript?</i></p>
</div>

<h2>Motivation</h2>
<p>SEJ has a set of default <a href="basics.htm#Convention">conventions for the layout of a spreadsheet</a> which, when followed, ensure a certain consistency, and simplify the association of cells to inputs and outputs for your users (they do not have to use cell names). It will be much easier for them to get started with these conventions if you provide them with ready-made templates.</p>
<p>It also greatly helps your users if they can start with a spreadsheet file that implements the computation the system is currently configured to perform. (Of course, this is only possible if this computation can be expressed in terms of a spreadsheet.)</p>
<p>Now, while you could certainly create these initial files by hand in Excel and ship them with your application, SEJ supports generating them at run-time. This has the following advantages:</p>
<ul class="spaced">
<li>The initial file can be generated in any of the spreadsheet file formats supported by SEJ, as desired by the user.</li>
<li>If the current computation is already customizable (see <a href="buildsheet.htm">using SEJ without a spreadsheet file</a>), then generating the initial file for this computation must be done at run-time.</li>
</ul>

<h2>Generating The Internal Model</h2>
<p>SEJ generates initial files from its internal <a href="../javadoc/sej/Spreadsheet.html">spreadsheet model</a>. So in order to generate one, we first need to build its model in memory. This is exactly the same process as is needed when <a href="buildsheet.htm#building">using SEJ without a spreadsheet file</a>. See there for details.</p>

<h2><a name="generate">Generating The File</a></h2>
<p>Once you have the internal model set up, you can tell SEJ to write out a spreadsheet file for it. There are two flavors of this API. The simpler version automatically deduces the the spreadsheet file type by the file name extension (.xls, .xsd, etc.), and always writes to a file:</p>
<p>[jc:sej.tutorials.Basics:---- GenerateFile]</p>
<p>The other version lets you specify the extension explicitly and returns the generated spreadsheet as a stream:</p>
<p>[jc:sej.tutorials.Basics:---- GenerateStream]</p>
<p>As an example, the spreadsheet generated for the model described above (<a href="buildsheet.htm#building">see here</a>) looks like this:</p>
<p>[-xc:build/temp/GeneratedSheet.xls]</p>

<h2><a name="template">Formatting The File</a></h2>
<p>A spreadsheet file generated by SEJ is, by default, rather unappealing visually. You can improve its looks by supplying a template spreadsheet and annotating the internal model with <em>template element names</em>. These names are matched to cell names defined in the template file. If there is a match, SEJ uses a number of formatting attributes of the template cell to format the cell(s) generated for the corresponding internal model element.</p>
<p>More specifically, an annotated <em>row</em> will pick up</p>
<ul compact class="compact">
<li>row height.</li>
</ul>
<p>An annotated <em>cell</em> will pick up</p>
<ul compact class="compact">
<li>column width,</li>
<li>font attributes,</li>
<li>fore- and background color.</li>
</ul>        </div>
        <div class="footer">
<p>Copyright &copy; 2006 Peter Arrenbrecht. All rights reserved.</p>        </div>
    </div>
</body>
</html>