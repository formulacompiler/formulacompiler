<?xml version="1.0" encoding="UTF-8"?>
<project name="org.formulacompiler.compiler" default="build" basedir=".">
	<description>Builds, tests, and packages the AFC core compiler. See ~/doc/hacking/build.htm for details.</description>

	<!--	Conventions used in this build script:
	
		All top-level targets are simple redirects to corresponding internal targets.
		This gives a quick overview and ensures a clean separation between API and implementation.
	
		All targets that do something start with @.
		They have no dependencies except for @init and are thus very reusable.
		They are accessible to users for those who know what they are doing. :)
		
		Dependencies are managed by internal targets starting with -.
		They use the @ targets to do the actual work.
		
		External configuration is initialized by build.default.properties.
		Values in build.properties (if it exists) take precedence. 
	-->


	<!-- global properties -->

	<property file="../../build.properties" />
	<property file="../../build.default.properties" />

	<property name="Name" value="${BaseName} Core" />
	<property name="name" value="${basename}-compiler" />

	<path id="intf.deps.classpath">
		<pathelement location="../runtime/temp/intf/classes" />
	</path>
	
	<path id="impl.deps.classpath">
		<pathelement location="../runtime/build/${basename}-runtime.jar" />
	</path>
	
	<path id="test.deps.classpath" />

	<import file="../build-common.xml" />

	<path id="lib.build.classpath">
		<pathelement location="temp/impl/classes" />
		<path refid="lib.impl.classpath" />
		<fileset dir="${basedir}" includes="lib/build/*.jar" />
	</path>
	<property name="lib.build.classpath" refid="lib.build.classpath" />


	<!-- internal targets -->

	<!-- compile -->

	<target name="-compile-main" depends="@compile-intf, -generate-javacc, -generate-builders, @compile-impl" />
	<target name="-generate-javacc" depends="@check-javacc, @generate-javacc" />
	<target name="-generate-builders" depends="@compile-base, @compile-builders, @generate-builders" />

	<!-- Compilation is a bit involved here.
		We have a parser generated by a JavaCC grammar. This is straightforward.
		Then we need to compile some code generators. These, however, depend on 
		a base set of the main source tree. So we compile the base set first, then the
		generators, then run the generators to generate the missing code, and finally
		compile the full source tree including generated elements again.
	-->

	<property name="src.impl" value="${src.dir}/impl" />
	<property name="temp.impl" value="${temp.dir}/impl" />
	<property name="src.javacc" location="${src.dir}/build/javacc/ExpressionParser.jj" />
	<property name="temp.javacc" value="${temp.impl}/java/org/formulacompiler/compiler/internal/expressions/parser" />

	<target name="@check-javacc" depends="@init">
		<uptodate property="skip.javacc" srcfile="${src.javacc}">
			<mapper type="merge" to="${temp.javacc}/GeneratedExpressionParser.java" />
		</uptodate>
	</target>

	<target name="@generate-javacc" depends="@init" unless="skip.javacc">
		<echo>build: generating parser...</echo>
		<mkdir dir="${temp.javacc}" />
		<javacc javacchome="${lib.dir}/build/javacc-4.0" target="${src.javacc}" outputdirectory="${temp.javacc}" />
		<echo>6 warnings are expected, one for OUTPUT@DIR, one for "+", and 4 for "(".</echo>
	</target>

	<target name="@compile-base" depends="@init">
		<echo>impl: compiling classes (base)...</echo>

		<mkdir dir="${temp.impl}/classes" />
		<javac srcdir="${src.impl}/java:${temp.impl}/java" destdir="${temp.impl}/classes" classpath="${lib.impl.classpath}" debug="${javac.debug}" deprecation="on" source="${javac.source}" target="${javac.target}">
			<!-- The following packages depend on code generated by @generate-builds. -->
			<exclude name="org/formulacompiler/compiler/internal/model/**/*.java" />
			<exclude name="org/formulacompiler/compiler/internal/engine/**/*.java" />
			<exclude name="org/formulacompiler/compiler/internal/bytecode/**/*.java" />
		</javac>

		<antcall target="--copy-comp-res">
			<param name="comp" value="impl" />
		</antcall>
	</target>

	<target name="@compile-builders" depends="@init">
		<antcall target="--compile-comp">
			<param name="comp" value="build" />
			<param name="comp.classpath" value="" />
		</antcall>
	</target>

	<target name="@generate-builders" depends="@init">
		<path id="builders.classpath">
			<pathelement location="${temp.dir}/build/classes" />
			<path refid="lib.build.classpath" />
		</path>
		<property name="builders.classpath" refid="builders.classpath" />

		<echo>build: generating rewrite rules...</echo>
		<java classpath="${builders.classpath}" classname="org.formulacompiler.compiler.internal.build.rewriting.RewriteRulesCompiler" fork="true" />

		<echo>build: generating bytecode compilers...</echo>
		<java classpath="${builders.classpath}" classname="org.formulacompiler.compiler.internal.build.bytecode.PatternCompiler" fork="true">
			<arg line="${builders.verbose}" />
		</java>

	</target>

	<target name="@compile-impl" depends="@init">
		<echo>impl: compiling classes (full)...</echo>
		<mkdir dir="${temp.impl}/classes" />
		<javac srcdir="${src.impl}/java:${temp.impl}/java:${temp.impl}/java-${ant.java.version}" destdir="${temp.impl}/classes" classpath="${lib.impl.classpath}" debug="${javac.debug}" deprecation="on" source="${javac.source}" target="${javac.target}">
		</javac>
	</target>


</project>
