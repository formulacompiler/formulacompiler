/*
 * Copyright (c) 2006 by Abacus Research AG, Switzerland.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are prohibited, unless you have been explicitly granted
 * more rights by Abacus Research AG.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
 /**
  * Rules to rewrite higher-level spreadsheet functions to lower-level functions and operators.
  */
rules {


	// -------- Basic aggregators


	/* The folds are not inlined here so they can be used to rewrite the database aggregators too.
	 */

	rewrite counta( xs* ) = COUNT( xs )
	
	// citation: sum
	def sum = fold/reduce with s = 0 each xi as s = s + xi end
	rewrite sum( xs* ) = apply sum to list xs
	// citation: sum

	def product = fold/reduce with s = 1 each xi as s = s * xi when empty 0 end
	rewrite product( xs* ) = apply product to list xs
	
	def min = fold/reduce with m = _maxvalue each xi as m = m _min_ xi when empty 0 end
	def max = fold/reduce with m = _minvalue each xi as m = m _max_ xi when empty 0 end
	rewrite min( xs* ) = apply min to list xs
	rewrite max( xs* ) = apply max to list xs

	def average = fold/reduce with s = 0 each xi as s = s + xi with count n into s/n when empty 0 end 	
	rewrite average( xs* ) = apply average to list xs

	def varp = fold with s = 0, ss = 0
		each xi as s = s + xi, ss = ss + xi * xi
		with count n into (ss - s*s/n) / n
		when empty 0	
		end
	rewrite varp( xs* ) = apply varp to list xs

	// citation: var
	def var =
		fold with 
			s = 0,
			ss = 0
		each xi as 
			s = s + xi,
			ss = ss + xi * xi
		with count n into 
			(ss - s*s/n) / (n - 1)
		when empty 0
		end	
	rewrite var( xs* ) = apply var to list xs
	// citation: var

	rewrite stdevp( xs* ) = SQRT( VARP( xs ))
	rewrite stdev( xs* ) = SQRT( VAR( xs ))
	

	// -------- Mathematical functions


	// citation: combin
	rewrite combin( n, k ) =
		if OR( n < 0, k < 0, n < k ) then 0
		else if n = k then 1
		else if k = 1 then n
		else 
			FACT(n) / FACT(k) / FACT(n-k)
	// citation: combin
	
	rewrite permut( n, k ) =
		let ni = INT(n)
		let ki = INT(k)
		in
			if ni < 0 then 0
			else if ki < 0 then 0
			else if ni < ki then 0
			else FACT( ni ) / FACT( ni - ki )

	rewrite geomean( xs* ) =
		apply
			fold/reduce with
				p = 1
			each xi as
				p = p * xi
			with count n into
				if p < 0 then 0
				else p^(1 / n)
			when empty 0
			end
		to list xs

	rewrite harmean( xs* ) =
		apply
			fold with
				p = 1,
				r = 0
			each xi as
				p = p * xi,
				r = if xi <> 0 then r + 1 / xi else r
			with count n into
				if p <= 0 then 0
				else n / r
			when empty 0
			end
		to list xs
	

	// -------- Financial functions

	
	// citation: npv
	rewrite npv( rate, vs# ) =
		let rate1 = rate + 1
		in 
			apply
				iterate with
					r = 0
				index i 
				each vi as
					r = r + vi / rate1 ^ i
				end
			to vectors {vs}
	// citation: npv

	rewrite mirr( vs#, frate, rrate ) =
		let n = COUNT( vs )
		let rrate1 = rrate + 1
		let frate1 = frate + 1
		in
			apply
				iterate with r1 = 0, r2 = 0 index i each vi 
				as
					r1 = r1 + (if vi > 0 then vi  * rrate1^(n-i) else 0),
					r2 = r2 + (if vi < 0 then vi  / frate1^(i-1) else 0)
				into
					(-r1 / r2) ^ (1 / (n-1)) - 1
				end
			to vectors {vs}
		
	rewrite sln( cost, salvage, life ) = (cost - salvage) / life
	rewrite syd( cost, salvage, life, per ) = (cost - salvage) * (life - per + 1) * 2 / (life * (life + 1))

	rewrite fv( rate, nper, pmt, pv, type ) =
		if rate = 0 then -pv - pmt*nper
		else
			let p = (rate + 1)^nper
			let k = IF( type > 0, rate + 1, 1 )
			in -pv * p - pmt * (p - 1) * k / rate
			
	rewrite fv( rate, nper, pmt, pv ) = FV( rate, nper, pmt, pv, 0 )
	rewrite fv( rate, nper, pmt ) = FV( rate, nper, pmt, 0, 0 )

	rewrite nper( rate, pmt, pv, fv, type ) =
	if rate = 0 then -(pv + fv) / pmt
	else 
		let a = (if type > 0 then pmt * (1 + rate) else pmt)
		in LOG( -(rate * fv - a) / (rate * pv + a), 1 + rate )

	rewrite nper( rate, pmt, pv, fv ) = NPER( rate, pmt, pv, fv, 0 )
	rewrite nper( rate, pmt, pv ) = NPER( rate, pmt, pv, 0, 0 )

	rewrite pv( rate, nper, pmt, fv, type ) =
		if rate = 0 then -fv - pmt * nper
		else
			let a = 1 + rate
			let b = -fv * ( a ^ -nper )
			in
				if type > 0
				then b + (pmt * (( a ^ ( -nper + 1 )) - 1) / rate) - pmt
				else b + (pmt * (( a ^ -nper ) - 1) / rate)

	rewrite pv( rate, nper, pmt, fv ) = PV (rate, nper, pmt, fv, 0 )
	rewrite pv( rate, nper, pmt ) = PV (rate, nper, pmt, 0, 0 )

	rewrite pmt( rate, nper, pv, fv, type ) =
		if rate = 0 then -(pv + fv) / nper
		else
			let a = (1 + rate) ^ nper
			let b = pv / (1 - 1 / a)
			let c =  fv / (a - 1)
			let d = -(b + c) * rate
			in if type > 0 then d / (1 + rate) else d

	rewrite pmt( rate, nper, pv, fv ) = PMT (rate, nper, pv, fv, 0 )
	rewrite pmt( rate, nper, pv ) = PMT (rate, nper, pv, 0, 0 )

	rewrite vdb( cost, salvage, life, start_period, end_period, factor ) = VDB (cost, salvage, life, start_period, end_period, factor, FALSE )
	rewrite vdb( cost, salvage, life, start_period, end_period ) = VDB( cost, salvage, life, start_period, end_period, 2, FALSE )

	// -------- Probability functions


	rewrite normsdist( a ) =
		let sqrth = 7.07106781186547524401E-1
		let x =  a * sqrth
		let z = ABS( x )
		in
			if z < sqrth
			then 0.5 + 0.5 * ERF( x )
			else 
				let y1 = 0.5 * ERFC( z ) 
				in if x > 0 then 1 - y1 else y1

	rewrite normdist( x, mue, sigma, cumulative ) =
		if sigma <= 0 then 0
		else
			if cumulative
			then NORMSDIST( (x - mue) / sigma )
			else
				let x1 = x - mue
				in EXP( (x1 * x1) / (-2 * sigma * sigma) ) / (SQRT( 2 * PI() ) * sigma)

	rewrite lognormdist( x, mue, sigma ) =
		if x <= 0 then 0
		else if sigma <= 0 then 0
		else NORMSDIST( (LN( x ) - mue) / sigma )

	// Adopted from gaussinv() implementation for OpenOffice.org Calc by Martin Eitzenberger
	rewrite normsinv( x ) =
		if x <= 0 then 0
		else if x >= 1 then 0
		else
			let q = x - 0.5
			in
				if ABS( q ) <= 0.425
				then
					let t = 0.180625 - q * q
					in
						q *
						(
							(
								(
									(
										(
											(
												(t * 2509.0809287301226727 + 33430.575583588128105)
											* t + 67265.770927008700853)
										* t + 45921.953931549871457)
									* t + 13731.693765509461125)
								* t + 1971.5909503065514427)
							* t + 133.14166789178437745)
						* t + 3.387132872796366608)
						/
						(
							(
								(
									(
										(
											(
												(t * 5226.495278852854561 + 28729.085735721942674)
											* t + 39307.89580009271061)
										* t + 21213.794301586595867)
									* t + 5394.1960214247511077)
								* t + 687.1870074920579083)
							* t + 42.313330701600911252)
						* t + 1)
				else
					let tt = SQRT( -LN( IF( q > 0, 1 - x, x ) ) )
					let z =
						(if tt <= 5
						then
							(let t = tt - 1.6 in
								(
									(
										(
											(
												(
													(
														(t * 7.7454501427834140764e-4 + 0.0227238449892691845833)
													* t + 0.24178072517745061177)
												* t + 1.27045825245236838258)
											* t + 3.64784832476320460504)
										* t + 5.7694972214606914055)
									* t + 4.6303378461565452959)
								* t + 1.42343711074968357734)
								/
								(
									(
										(
											(
												(
													(
														(t * 1.05075007164441684324e-9 + 5.475938084995344946e-4)
													* t + 0.0151986665636164571966)
												* t + 0.14810397642748007459)
											* t + 0.68976733498510000455)
										* t + 1.6763848301838038494)
									* t + 2.05319162663775882187)
								* t + 1.0)
							)
						else
							(let t = tt - 5 in
								(
									(
										(
											(
												(
													(
														(t * 2.01033439929228813265e-7 + 2.71155556874348757815e-5)
													* t + 0.0012426609473880784386)
												* t + 0.026532189526576123093)
											* t + 0.29656057182850489123)
										* t + 1.7848265399172913358)
									* t + 5.4637849111641143699)
								* t + 6.6579046435011037772)
								/
								(
									(
										(
											(
												(
													(
														(t * 2.04426310338993978564e-15 + 1.4215117583164458887e-7)
													* t + 1.8463183175100546818e-5)
												* t + 7.868691311456132591e-4)
											* t + 0.0148753612908506148525)
										* t + 0.13692988092273580531)
									* t + 0.59983220655588793769)
								* t + 1.0)
							)
						)
					in if q < 0 then -z else z

	rewrite norminv( x, mue, sigma ) =
		if x <= 0 then 0
		else if x >= 1 then 0
		else if sigma <= 0 then 0
		else NORMSINV( x ) * sigma + mue

	rewrite loginv( x, mue, sigma ) =
		if x <= 0 then 0
		else if x >= 1 then 0
		else if sigma <= 0 then 0
		else EXP( NORMSINV( x ) * sigma + mue )
		
	rewrite confidence( alpha, sigma, n ) =
		if alpha <= 0 then 0
		else if alpha >= 1 then 0
		else if sigma <= 0 then 0
		else if n < 1 then 0
		else NORMSINV( 1 - alpha / 2) * sigma / SQRT( INT( n ) )
	
	rewrite betadist( x, alpha, beta, a, b ) =
		if x < a then 0
		else if x > b then 0
		else if a = b then 0
		else BETADIST( (x - a) / (b - a), alpha, beta )

	rewrite betadist( x, alpha, beta, a ) = BETADIST( x, alpha, beta, a, 1 ) 

	rewrite betainv( x, alpha, beta, a, b ) =
		if x < a then 0
		else if x > b then 0
		else if a = b then 0
		else BETAINV( x, alpha, beta ) * ( b  - a ) + a

	rewrite betainv( x, alpha, beta, a ) = BETAINV( x, alpha, beta, a, 1 )

	rewrite expondist( x, lambda, kum ) =
		if lambda < 0 then 0
		else (if kum = 0
			then (if x >= 0
				then lambda * EXP(-lambda * x)
			else 0)
		else 
			(if x >= 0
				then 1 - EXP(-lambda * x)
			else 0))

	rewrite negbinomdist( x, r, p ) =
		if p <= 0 then 0
		else if p >= 1 then 0
		else if x < 0 then 0
		else if r < 1 then 0
		else
			let ix = INT( x )
			let ir = INT( r )
			in COMBIN( ix + ir - 1, ir - 1 ) * p^ir * (1-p)^ix

	rewrite fdist( x, df1, df2 ) =
		let idf1 = INT( df1 )
		let idf2 = INT( df2 )
		in
			if x < 0 then 0
			else if idf1 < 1 then 0
			else if idf2 < 1 then 0
			else BETADIST( idf2 / (idf2 + idf1 * x), idf2 / 2, idf1 / 2 )

    rewrite fisher( x ) =
        if ABS( x ) >= 1 then 0
        else LN((1 + x) / (1 - x)) / 2

    rewrite fisherinv( x ) =
        (EXP(2 * x) - 1) / (EXP(2 * x) + 1)

    rewrite standardize( x, mue, sigma ) =
        if sigma <= 0 then 0
        else (x - mue) / sigma

	rewrite chitest( xs#, ys#, colsX, rowsX, colsY, rowsY ) =
		if PRODUCT(ys) = 0 then 0       // to check, does not work for BigDecimal
		else
			if OR(colsX <> colsY, rowsX <> rowsY, colsX = 0, colsY = 0, rowsX = 0, rowsY = 0 ) then 0
			else
				apply
					fold with
						chi = 0
					each xi, yi as
						chi = chi + (xi - yi) * (xi - yi) / yi
					with count n into
						if OR(colsX = 1, rowsX = 1) then
							let df = (colsX  * rowsX - 1) in
								if df = 0 then 0
								else
									CHIDIST(chi, df)
						else
							let df = (colsX - 1) * (rowsX - 1) in
								CHIDIST(chi, df)
					end
				to vectors {xs, ys}

	rewrite ftest( xs#, ys# ) =
		let countX = COUNT(xs)
		let countY = COUNT(ys)
		let eps = 0.000001
		in
			if OR(countX < 2, countY < 2) then 0
			else
				let sumX = SUM(xs)
				let sumSqrX = SUMSQ(xs)
				let sumY = SUM(ys)
				let sumSqrY = SUMSQ(ys)
				let sX = (sumSqrX - sumX * sumX / countX) / (countX - 1)
				let sY = (sumSqrY - sumY * sumY / countY) / (countY - 1)
				in
					if OR(ABS(sX) < eps, ABS(sY) < eps) then 0
					else if sX > sY then
						2 * FDIST(sX / sY, countX - 1, countY - 1)
					else
						2 * FDIST(sY / sX, countY - 1, countX - 1)

	rewrite pearson( xs#, ys# ) =
		let countX = COUNT(xs)
		let countY = COUNT(ys)
		in
			if OR(countX = 0, countY <> countX) then 0
			else
				apply
					fold with
						sumX = 0,
						sumY = 0,
						sumSqrX = 0,
						sumSqrY = 0,
						sumXY = 0
					each xi, yi as
						sumX = sumX + xi,
						sumY = sumY + yi,
						sumSqrX = sumSqrX + xi * xi,
						sumSqrY = sumSqrY + yi * yi,
						sumXY = sumXY + xi * yi
					with count n into
						let tmp_val = (n * sumSqrX - sumX * sumX) * (n * sumSqrY - sumY * sumY)
						in
							if OR(n < 2, tmp_val <= 0) then 0
							else
								(n * sumXY - sumX * sumY) / SQRT(tmp_val)
					end
				to vectors {xs, ys}

	rewrite rsq( xs#, ys# ) =
		let countX = COUNT(xs)
		let countY = COUNT(ys)
		in
			if OR(countX = 0, countY <> countX) then 0
			else
				apply
					fold with
						sumX = 0,
						sumY = 0,
						sumSqrX = 0,
						sumSqrY = 0,
						sumXY = 0
					each xi, yi as
						sumX = sumX + xi,
						sumY = sumY + yi,
						sumSqrX = sumSqrX + xi * xi,
						sumSqrY = sumSqrY + yi * yi,
						sumXY = sumXY + xi * yi
					with count n into
						let tmp_val1 = n * sumSqrX - sumX * sumX
						let tmp_val2 = n * sumSqrY - sumY * sumY
						in
							if OR (n < 2, tmp_val1 = 0, tmp_val2 = 0) then 0
							else
								(n * sumXY - sumX * sumY) * (n * sumXY - sumX * sumY) / tmp_val1 / tmp_val2
					end
				to vectors {xs, ys}

	rewrite ttest( xs#, ys#, tails, type ) =
		if AND(tails <> 1, tails <> 2) then 0
		else 
			let countX = COUNT(xs)
			let countY = COUNT(ys)
			let sumX = SUM(xs)
			let sumY = SUM(ys)
			let sumSqrX = SUMSQ(xs)
			let sumSqrY = SUMSQ(ys)
			in
				if type = 1 then
					if OR(countX <> countY, countX < 1) then 0
					else
						apply
							fold with
								sumSqrD = 0
							each xi, yi as
								sumSqrD = sumSqrD + (xi - yi) * (xi - yi)
							into
								let denom = countX * sumSqrD - (sumX - sumY) * (sumX - sumY)
								in
									if denom <= 0 then 0
									else
										let t = SQRT(countX-1) * ABS(sumX - sumY) / SQRT(denom)
										let f = countX - 1
										in TDIST(t, f, tails)
							end
						to vectors {xs, ys}
				else if type = 2 then
				    if OR(countX <= 1, countY <= 1) then 0
				    else
						let sX = (sumSqrX - sumX * sumX / countX) / (countX - 1)
						let sY = (sumSqrY - sumY * sumY / countY) / (countY - 1)
						in
							if sX = sY then 0
							else
								let tmp_val = (countX - 1) * sX + (countY - 1) * sY
								in
									if tmp_val <=0 then 0
									else
										let t = ABS(sumX / countX - sumY / countY) / SQRT(tmp_val) *
											SQRT(countX * countY * (countX + countY - 2) / (countX + countY))
										let f = countX + countY - 2
										in TDIST(t, f, tails)
				else if type = 3 then
				    if OR(countX <= 1, countY <= 1) then 0
				    else
						let sX = (sumSqrX - sumX * sumX / countX) / (countX - 1) / countX
						let sY = (sumSqrY - sumY * sumY / countY) / (countY - 1) / countY
						in
							if (sX + sY) <= 0 then 0
							else
								let t = ABS(sumX / countX - sumY / countY) / SQRT(sX + sY)
								in
									let f = (sX + sY) * (sX + sY) / (sX * sX / (countX - 1) + sY * sY / (countY - 1))
									// TDIST distribution without rounding of 'f' parameter
									in TDIST(t, f, tails, 1)
				else 0



	rewrite ztest( xs#, mue, sigma ) =
		let countXs = COUNT(xs)
		in
			if countXs < 1 then 0
			else if sigma <= 0 then 0
			else
				let medXs = AVERAGE(xs)
				in 1 - NORMSDIST((medXs - mue) / ( sigma / SQRT(countXs)))

	rewrite ztest( xs#, x ) =
		let sigma = STDEV(xs)
    	in ZTEST( xs, x, sigma )

	// -------- Statistical functions


	// citation: covar
	rewrite covar( xs#, ys# ) = 
		apply 
			fold with
				sx = 0, 
				sy = 0,
				sxy = 0
			each xi, yi as
				sx = sx + xi, 
				sy = sy + yi, 
				sxy = sxy + xi * yi
			with count n into 
				(sxy - sx*sy/n) / n
			when empty 0	
			end
		to vectors {xs, ys}
	// citation: covar

	rewrite sumsq( xs* ) = 
		apply fold with s = 0 each xi as s = s + xi * xi end
		to list xs

	rewrite rank( number, xs#, order ) =
		if order = 0
		then
			apply 
				fold with r = 1 
				each xi as r = r + (number < xi)
				end
			to vectors {xs} 
		else
			apply 
				fold with r = 1 
				each xi as r = r + (number > xi)
				end
			to vectors {xs} 
	rewrite rank( number+, ref+ ) = RANK( number, ref, 0 )

	rewrite kurt( xs* ) =
		let n = COUNT(xs)
		let a = n - 1
		let b = (n - 2) * (n - 3)
		let s = STDEV(xs)
		let m = SUM(xs) / n
		in
			(	apply
					fold with r = 0 each xi as
						r = r + 
							(	let ei = (xi - m)/s
								let ei2 = ei * ei
								in ei2 * ei2
							)
					end
				to list xs
			) * n * (n + 1) / (a * b) - 3 * a * a / b
		
	rewrite skew( xs* ) =
		let n = COUNT(xs)
		let s = STDEV(xs)
		let s3 = s*s*s
		let m = SUM(xs) / n
		in
			(	apply
					fold with r = 0 each xi as
						r = r + (let ei = xi - m in ei*ei*ei)
					end
				to list xs
			) / s3 * n / ((n - 1) * (n - 2))
			
	rewrite avedev( xs* ) =
		let n = COUNT(xs)
		let m = SUM(xs) / n
		in
			(	apply
					fold with r = 0 each xi as r = r + ABS( m - xi ) end
				to list xs
			) / n
	
	rewrite devsq( xs* ) =
		let n = COUNT(xs)
		let m = SUM(xs) / n
		in 
			apply fold with r = 0 each xi as r = r + (let ei = xi - m in ei*ei) end 
			to list xs
	
}
