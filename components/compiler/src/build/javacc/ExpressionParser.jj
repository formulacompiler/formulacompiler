/*
 * Copyright (c) 2006-2009 by Abacus Research AG, Switzerland.
 * All rights reserved.
 *
 * This file is part of the Abacus Formula Compiler (AFC).
 *
 * For commercial licensing, please contact sales(at)formulacompiler.com.
 *
 * AFC is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AFC is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AFC.  If not, see <http://www.gnu.org/licenses/>.
 */



// NOTE: One warning about OUTPUT_DIRECTORY can be ignored.


options {
	JDK_VERSION = "1.5";
	STATIC = false;
	UNICODE_INPUT = true;
	USER_CHAR_STREAM = true;
	OUTPUT_DIRECTORY = "../../../temp/impl/java/org/formulacompiler/compiler/internal/expressions/parser";
}

PARSER_BEGIN( GeneratedExpressionParser )
package org.formulacompiler.compiler.internal.expressions.parser;

import java.util.Collection;
import org.formulacompiler.runtime.*;
import org.formulacompiler.compiler.*;
import org.formulacompiler.compiler.internal.expressions.*;

abstract class GeneratedExpressionParser extends ExpressionParserBase
{
}
PARSER_END( GeneratedExpressionParser )

SKIP:
	{	" "
	|	"\r"
	|	"\n"
	|	"\t"
	|	"\f"
	}

MORE :
	{	"//" : IN_SINGLE_LINE_COMMENT
	|	<"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
	|	"/*" : IN_MULTI_LINE_COMMENT
	}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
	{	<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT }

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
	{	<FORMAL_COMMENT: "*/" > : DEFAULT }

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
	{	<MULTI_LINE_COMMENT: "*/" > : DEFAULT }

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
	{	< ~[] > }


TOKEN: /* Helpers */
	{	<#DIGITS: (<DIGIT>)+ >
	|	<#DIGIT: ["0"-"9"] >
	|	<#ALPHAS: (<ALPHA>)+ >
	|	<#ALPHA: ["a"-"z", "A"-"Z"] >
	|	<#LETTER: [
		"A"-"Z",
		"a"-"z",
		"\u00a2"-"\u00a5",
		"\u00aa",
		"\u00b5",
		"\u00ba",
		"\u00c0"-"\u00d6",
		"\u00d8"-"\u00f6",
		"\u00f8"-"\u021f",
		"\u0222"-"\u0233",
		"\u0250"-"\u02ad",
		"\u02b0"-"\u02b8",
		"\u02bb"-"\u02c1",
		"\u02d0"-"\u02d1",
		"\u02e0"-"\u02e4",
		"\u02ee",
		"\u037a",
		"\u0386",
		"\u0388"-"\u038a",
		"\u038c",
		"\u038e"-"\u03a1",
		"\u03a3"-"\u03ce",
		"\u03d0"-"\u03d7",
		"\u03da"-"\u03f3",
		"\u0400"-"\u0481",
		"\u048c"-"\u04c4",
		"\u04c7"-"\u04c8",
		"\u04cb"-"\u04cc",
		"\u04d0"-"\u04f5",
		"\u04f8"-"\u04f9",
		"\u0531"-"\u0556",
		"\u0559",
		"\u0561"-"\u0587",
		"\u05d0"-"\u05ea",
		"\u05f0"-"\u05f2",
		"\u0621"-"\u063a",
		"\u0640"-"\u064a",
		"\u0671"-"\u06d3",
		"\u06d5",
		"\u06e5"-"\u06e6",
		"\u06fa"-"\u06fc",
		"\u0710",
		"\u0712"-"\u072c",
		"\u0780"-"\u07a5",
		"\u0905"-"\u0939",
		"\u093d",
		"\u0950",
		"\u0958"-"\u0961",
		"\u0985"-"\u098c",
		"\u098f"-"\u0990",
		"\u0993"-"\u09a8",
		"\u09aa"-"\u09b0",
		"\u09b2",
		"\u09b6"-"\u09b9",
		"\u09dc"-"\u09dd",
		"\u09df"-"\u09e1",
		"\u09f0"-"\u09f3",
		"\u0a05"-"\u0a0a",
		"\u0a0f"-"\u0a10",
		"\u0a13"-"\u0a28",
		"\u0a2a"-"\u0a30",
		"\u0a32"-"\u0a33",
		"\u0a35"-"\u0a36",
		"\u0a38"-"\u0a39",
		"\u0a59"-"\u0a5c",
		"\u0a5e",
		"\u0a72"-"\u0a74",
		"\u0a85"-"\u0a8b",
		"\u0a8d",
		"\u0a8f"-"\u0a91",
		"\u0a93"-"\u0aa8",
		"\u0aaa"-"\u0ab0",
		"\u0ab2"-"\u0ab3",
		"\u0ab5"-"\u0ab9",
		"\u0abd",
		"\u0ad0",
		"\u0ae0",
		"\u0b05"-"\u0b0c",
		"\u0b0f"-"\u0b10",
		"\u0b13"-"\u0b28",
		"\u0b2a"-"\u0b30",
		"\u0b32"-"\u0b33",
		"\u0b36"-"\u0b39",
		"\u0b3d",
		"\u0b5c"-"\u0b5d",
		"\u0b5f"-"\u0b61",
		"\u0b85"-"\u0b8a",
		"\u0b8e"-"\u0b90",
		"\u0b92"-"\u0b95",
		"\u0b99"-"\u0b9a",
		"\u0b9c",
		"\u0b9e"-"\u0b9f",
		"\u0ba3"-"\u0ba4",
		"\u0ba8"-"\u0baa",
		"\u0bae"-"\u0bb5",
		"\u0bb7"-"\u0bb9",
		"\u0c05"-"\u0c0c",
		"\u0c0e"-"\u0c10",
		"\u0c12"-"\u0c28",
		"\u0c2a"-"\u0c33",
		"\u0c35"-"\u0c39",
		"\u0c60"-"\u0c61",
		"\u0c85"-"\u0c8c",
		"\u0c8e"-"\u0c90",
		"\u0c92"-"\u0ca8",
		"\u0caa"-"\u0cb3",
		"\u0cb5"-"\u0cb9",
		"\u0cde",
		"\u0ce0"-"\u0ce1",
		"\u0d05"-"\u0d0c",
		"\u0d0e"-"\u0d10",
		"\u0d12"-"\u0d28",
		"\u0d2a"-"\u0d39",
		"\u0d60"-"\u0d61",
		"\u0d85"-"\u0d96",
		"\u0d9a"-"\u0db1",
		"\u0db3"-"\u0dbb",
		"\u0dbd",
		"\u0dc0"-"\u0dc6",
		"\u0e01"-"\u0e30",
		"\u0e32"-"\u0e33",
		"\u0e3f"-"\u0e46",
		"\u0e81"-"\u0e82",
		"\u0e84",
		"\u0e87"-"\u0e88",
		"\u0e8a",
		"\u0e8d",
		"\u0e94"-"\u0e97",
		"\u0e99"-"\u0e9f",
		"\u0ea1"-"\u0ea3",
		"\u0ea5",
		"\u0ea7",
		"\u0eaa"-"\u0eab",
		"\u0ead"-"\u0eb0",
		"\u0eb2"-"\u0eb3",
		"\u0ebd",
		"\u0ec0"-"\u0ec4",
		"\u0ec6",
		"\u0edc"-"\u0edd",
		"\u0f00",
		"\u0f40"-"\u0f47",
		"\u0f49"-"\u0f6a",
		"\u0f88"-"\u0f8b",
		"\u1000"-"\u1021",
		"\u1023"-"\u1027",
		"\u1029"-"\u102a",
		"\u1050"-"\u1055",
		"\u10a0"-"\u10c5",
		"\u10d0"-"\u10f6",
		"\u1100"-"\u1159",
		"\u115f"-"\u11a2",
		"\u11a8"-"\u11f9",
		"\u1200"-"\u1206",
		"\u1208"-"\u1246",
		"\u1248",
		"\u124a"-"\u124d",
		"\u1250"-"\u1256",
		"\u1258",
		"\u125a"-"\u125d",
		"\u1260"-"\u1286",
		"\u1288",
		"\u128a"-"\u128d",
		"\u1290"-"\u12ae",
		"\u12b0",
		"\u12b2"-"\u12b5",
		"\u12b8"-"\u12be",
		"\u12c0",
		"\u12c2"-"\u12c5",
		"\u12c8"-"\u12ce",
		"\u12d0"-"\u12d6",
		"\u12d8"-"\u12ee",
		"\u12f0"-"\u130e",
		"\u1310",
		"\u1312"-"\u1315",
		"\u1318"-"\u131e",
		"\u1320"-"\u1346",
		"\u1348"-"\u135a",
		"\u13a0"-"\u13f4",
		"\u1401"-"\u166c",
		"\u166f"-"\u1676",
		"\u1681"-"\u169a",
		"\u16a0"-"\u16ea",
		"\u1780"-"\u17b3",
		"\u17db",
		"\u1820"-"\u1877",
		"\u1880"-"\u18a8",
		"\u1e00"-"\u1e9b",
		"\u1ea0"-"\u1ef9",
		"\u1f00"-"\u1f15",
		"\u1f18"-"\u1f1d",
		"\u1f20"-"\u1f45",
		"\u1f48"-"\u1f4d",
		"\u1f50"-"\u1f57",
		"\u1f59",
		"\u1f5b",
		"\u1f5d",
		"\u1f5f"-"\u1f7d",
		"\u1f80"-"\u1fb4",
		"\u1fb6"-"\u1fbc",
		"\u1fbe",
		"\u1fc2"-"\u1fc4",
		"\u1fc6"-"\u1fcc",
		"\u1fd0"-"\u1fd3",
		"\u1fd6"-"\u1fdb",
		"\u1fe0"-"\u1fec",
		"\u1ff2"-"\u1ff4",
		"\u1ff6"-"\u1ffc",
		"\u203f"-"\u2040",
		"\u207f",
		"\u20a0"-"\u20af",
		"\u2102",
		"\u2107",
		"\u210a"-"\u2113",
		"\u2115",
		"\u2119"-"\u211d",
		"\u2124",
		"\u2126",
		"\u2128",
		"\u212a"-"\u212d",
		"\u212f"-"\u2131",
		"\u2133"-"\u2139",
		"\u2160"-"\u2183",
		"\u3005"-"\u3007",
		"\u3021"-"\u3029",
		"\u3031"-"\u3035",
		"\u3038"-"\u303a",
		"\u3041"-"\u3094",
		"\u309d"-"\u309e",
		"\u30a1"-"\u30fe",
		"\u3105"-"\u312c",
		"\u3131"-"\u318e",
		"\u31a0"-"\u31b7",
		"\u3400"-"\u4db5",
		"\u4e00"-"\u9fa5",
		"\ua000"-"\ua48c",
		"\uac00"-"\ud7a3",
		"\uf900"-"\ufa2d",
		"\ufb00"-"\ufb06",
		"\ufb13"-"\ufb17",
		"\ufb1d",
		"\ufb1f"-"\ufb28",
		"\ufb2a"-"\ufb36",
		"\ufb38"-"\ufb3c",
		"\ufb3e",
		"\ufb40"-"\ufb41",
		"\ufb43"-"\ufb44",
		"\ufb46"-"\ufbb1",
		"\ufbd3"-"\ufd3d",
		"\ufd50"-"\ufd8f",
		"\ufd92"-"\ufdc7",
		"\ufdf0"-"\ufdfb",
		"\ufe33"-"\ufe34",
		"\ufe4d"-"\ufe4f",
		"\ufe69",
		"\ufe70"-"\ufe72",
		"\ufe74",
		"\ufe76"-"\ufefc",
		"\uff04",
		"\uff21"-"\uff3a",
		"\uff3f",
		"\uff41"-"\uff5a",
		"\uff65"-"\uffbe",
		"\uffc2"-"\uffc7",
		"\uffca"-"\uffcf",
		"\uffd2"-"\uffd7",
		"\uffda"-"\uffdc",
		"\uffe0"-"\uffe1",
		"\uffe5"-"\uffe6"]>
	|	<#CAPS: (<CAP>)+ >
	|	<#CAP: ["A"-"Z"] >
	}

TOKEN: /* Numeric constants */
	{	<INT_CONST: <DIGITS> >
	|	<DBL_CONST
			:	<DIGITS> "." (<DIGIT>)* (<EXPONENT>)?
		|	"." <DIGITS> (<EXPONENT>)?
			|	<DIGITS> <EXPONENT>
		>
	|	<#EXPONENT: ["e","E"] (["+","-"])? <DIGITS> >
	}

TOKEN: /* String constants */
	{	<STR_CONST: "\"" (~["\""] | "\"\"")* "\"" >
	}


/* Expression parsing */

void rootExpr(): {}
	{	expr() <EOF>
	}

void expr(): {}
	{
		exprOrRange( false )
	}

void rangeExpr(): {}
	{
		exprOrRange( true )
	}

void exprOrRange( boolean allowRanges ): {}
	{	minMaxTerm()
			{ convertRangesToCells( allowRanges ); }
	}

void minMaxTerm(): {}
	{	comparisonTerm()
		(	"_min_" comparisonTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.INTERNAL_MIN, popNodes( 2 ) )); }
		|	"_max_" comparisonTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.INTERNAL_MAX, popNodes( 2 ) )); }
		)*
	}

void comparisonTerm(): {}
	{	concatTerm()
		(	"=" concatTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.EQUAL, popNodes( 2 ) )); }
		|	"<>" concatTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.NOTEQUAL, popNodes( 2 ) )); }
		|	"<" concatTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.LESS, popNodes( 2 ) )); }
		|	"<=" concatTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.LESSOREQUAL, popNodes( 2 ) )); }
		|	">" concatTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.GREATER, popNodes( 2 ) )); }
		|	">=" concatTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.GREATEROREQUAL, popNodes( 2 ) )); }
		)*
	}

void concatTerm(): {}
	{	addTerm()
		[	"&" addTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.CONCAT, popNodes( 2 ) )); }
			( "&" addTerm()
				{ popNodeAndMergeIntoTopNode(); }
			)*
		]
	}

void addTerm(): {}
	{	mulTerm()
		(	"+" mulTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.PLUS, popNodes( 2 ) )); }
		|	"-" mulTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.MINUS, popNodes( 2 ) )); }
		)*
	}

void mulTerm(): {}
	{	expTerm()
		(	"*" expTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.TIMES, popNodes( 2 ) )); }
		|	"/" expTerm()
				{ pushNode( new ExpressionNodeForOperator( Operator.DIV, popNodes( 2 ) )); }
		)*
	}

void expTerm() : {}
	{	signedTerm() ( "^" signedTerm()
			{ pushNode( new ExpressionNodeForOperator( Operator.EXP, popNodes( 2 ) )); }
		)*
	}

void signedTerm(): {}
	{	"-" signedTerm()
			{ pushNode( new ExpressionNodeForOperator( Operator.MINUS, popNode() )); }
	|	"+" signedTerm()
	|	percentTerm()
	}

void percentTerm() : {}
	{	value() ("%"
			{ pushNode( new ExpressionNodeForOperator( Operator.PERCENT, popNode() )); }
		)*
	}

void value():
	{	Token n; }
	{	intConst()
	|	dblConst()
	|	strConst()
	|	"(" niceExpr() ")"
	|	"_minvalue" { pushNode( new ExpressionNodeForMinValue() ); }
	|	"_maxvalue" { pushNode( new ExpressionNodeForMaxValue() ); }
	|	LOOKAHEAD(2) "@" fun()
	|	"@" n = <NAME> "(" { unsupportedFunction( n ); }
	|	fun()
	|	LOOKAHEAD(2) n = <NAME> "(" { unsupportedFunction( n ); }
	|	rangeIntersection()
	}

void intConst():
	{	Token c; }
	{	c = <INT_CONST>
			{ pushNode( new ExpressionNodeForConstantValue( parseInt( c.image ))); }
	}

void dblConst():
	{	Token c; }
	{	c = <DBL_CONST>
			{ pushNode( new ExpressionNodeForConstantValue( parseDouble( c.image ))); }
	}

void strConst():
	{	Token c; }
	{	c = <STR_CONST>
			{ pushNode( new ExpressionNodeForConstantValue( parseQuotedString( c.image ))); }
	}


/* Function parsing. */

/* Enable this here and in value() to verify that JavaCC can handle all the function names properly.
void lexer_test(): {}
	{	"ACOS" | "AND" | "ASIN" | "ATAN" | "ATAN2" | "AVERAGE" | "CHOOSE" | "COLUMNS" | "COS" | "COUNT" | "COUNTA" | "COUNTBLANK" | "COUNTIF" | "DATE" | "DAVERAGE" | "DAY" | "DCOUNT" | "DCOUNTA" | "DDB" | "DEGREES" | "DGET" | "DMAX" | "DMIN" | "DPRODUCT" | "DSTDEV" | "DSTDEVP" | "DSUM" | "DVAR" | "DVARP" | "EVEN" | "EXACT" | "EXP" | "FACT" | "FALSE" | "FIND" | "FV" | "HLOOKUP" | "HOUR" | "IF" | "INDEX" | "INT" | "IRR" | "ISBLANK" | "ISERR" | "ISERROR" | "ISLOGICAL" | "ISNA" | "ISNONTEXT" | "ISNUMBER" | "ISTEXT" | "LEFT" | "LEN" | "LN" | "LOG" | "LOG10" | "LOWER" | "MATCH" | "MAX" | "MID" | "MIN" | "MINUTE" | "MOD" | "MONTH" | "N" | "NA" | "NOT" | "NOW" | "NPER" | "NPV" | "ODD" | "OR" | "PI" | "PMT" | "POWER" | "PROPER" | "PV" | "RADIANS" | "RATE" | "REPLACE" | "REPT" | "RIGHT" | "ROWS" | "SECOND" | "SIN" | "SLN" | "SQRT" | "STDEV" | "STDEVP" | "SUBSTITUTE" | "SUMIF" | "SYD" | "T" | "TAN" | "TIME" | "TODAY" | "TRIM" | "TRUE" | "TRUNC" | "UPPER" | "VALUE" | "VAR" | "VARP" | "VLOOKUP" | "WEEKDAY" | "YEAR"
	|	"ACCRINT" | "ACCRINTM" | "ACOSH" | "ADDRESS" | "ASINH" | "ATANH" | "AVEDEV" | "BESSELI" | "BESSELJ" | "BESSELK" | "BESSELY" | "BETADIST" | "BETAINV" | "BINOMDIST" | "CEILING" | "CELL" | "CHAR" | "CHIDIST" | "CHIINV" | "CHITEST" | "CLEAN" | "CODE" | "COLUMN" | "COMBIN" | "CONCATENATE" | "CONFIDENCE" | "CONVERT" | "CORREL" | "COSH" | "COUPDAYBS" | "COUPDAYS" | "COUPDAYSNC" | "COUPNCD" | "COUPNUM" | "COUPPCD" | "COVAR" | "CRITBINOM" | "CUMIPMT" | "CUMPRINC" | "DATEDIF" | "DATEVALUE" | "DAYS360" | "DB" | "DEVSQ" | "DISC" | "DOLLAR" | "DOLLARDE" | "DOLLARFR" | "DURATION" | "EOMONTH" | "ERF" | "ERFC" | "EXPONDIST" | "FDIST" | "FINV" | "FISHER" | "FISHERINV" | "FIXED" | "FLOOR" | "FORECAST" | "FTEST" | "GAMMADIST" | "GAMMAINV" | "GAMMALN" | "GCD" | "GEOMEAN" | "HARMEAN" | "HYPGEOMDIST" | "INTERCEPT" | "INTRATE" | "ISEVEN" | "ISODD" | "KURT" | "LARGE" | "LCM" | "LINEST" | "LOGINV" | "LOGNORMDIST" | "LOOKUP" | "MDURATION" | "MEDIAN" | "MINVERSE" | "MIRR" | "MMULT" | "MODE" | "MROUND" | "MULTINOMIAL" | "NEGBINOMDIST" | "NETWORKDAYS" | "NOMINAL" | "NORMDIST" | "NORMINV" | "NORMSDIST" | "NORMSINV" | "ODDFPRICE" | "ODDFYIELD" | "ODDLPRICE" | "ODDLYIELD" | "OFFSET" | "PEARSON" | "PERCENTILE" | "PERCENTRANK" | "PERMUT" | "POISSON" | "PRICE" | "PRICEMAT" | "PROB" | "QUARTILE" | "QUOTIENT" | "RAND" | "RANDBETWEEN" | "RANK" | "RECEIVED" | "ROMAN" | "ROUNDDOWN" | "ROUNDUP" | "ROW" | "RSQ" | "SERIESSUM" | "SIGN" | "SINH" | "SKEW" | "SLOPE" | "SMALL" | "SQRTPI" | "STANDARDIZE" | "STDEVPA" | "STEYX" | "SUBTOTAL" | "SUMPRODUCT" | "SUMSQ" | "SUMX2MY2" | "SUMX2PY2" | "SUMXMY2" | "TANH" | "TBILLEQ" | "TBILLPRICE" | "TBILLYIELD" | "TDIST" | "TIMEVALUE" | "TINV" | "TRANSPOSE" | "TREND" | "TRIMMEAN" | "TTEST" | "TYPE" | "VARA" | "VDB" | "WEEKNUM" | "WEIBULL" | "WORKDAY" | "XIRR" | "XNPV" | "YEARFRAC" | "YIELD" | "YIELDDISC" | "YIELDMAT" | "ZTEST"
	|	"ACOT" | "ACOTH" | "AMORDEGRC" | "AMORLINC" | "ARABIC" | "AREAS" | "ASC" | "AVERAGEA" | "B" | "BAHTTEXT" | "BASE" | "BIN2DEC" | "BIN2HEX" | "BIN2OCT" | "BITAND" | "BITLSHIFT" | "BITOR" | "BITRSHIFT" | "BITXORCEILING" | "COMBINA" | "COMPLEX" | "COT" | "COTH" | "CURRENT" | "DAYS" | "DBSC" | "DDE" | "DEC2BIN" | "DEC2HEX" | "DEC2OCT" | "DECIMAL" | "DELTA" | "EDATE" | "EFFECT" | "EFFECTIVE" | "ERROR.TYPE" | "ERRORTYPE" | "FACTDOUBLE" | "FINDB" | "FORMULA" | "FREQUENCY" | "FVSCHEDULE" | "GAMMA" | "GAUSS" | "GESTEP" | "GETPIVOTDATA" | "GROWTH" | "HEX2BIN" | "HEX2DEC" | "HEX2OCT" | "HYPERLINK" | "HYPGEOMVERT" | "IMABS" | "IMAGINARY" | "IMARGUMENT" | "IMCONJUGATE" | "IMCOS" | "IMDIV" | "IMEXP" | "IMLN" | "IMLOG10" | "IMLOG2" | "IMPOWER" | "IMPRODUCT" | "IMREAL" | "IMSIN" | "IMSQRT" | "IMSUB" | "IMSUM" | "INDIRECT" | "INFO" | "IPMT" | "ISFORMULA" | "ISPMT" | "ISREF" | "LEFTB" | "LENB" | "MAXA" | "MDETERM" | "MUNIT" | "MIDB" | "MINA" | "MNORMSINV" | "NUMBERSTRING" | "OCT2BIN" | "OCT2DEC" | "OCT2HEX" | "PERMUTATIONA" | "PHI" | "PHONETIC" | "PPMT" | "PRICEDISC" | "REPLACEB" | "RIGHTB" | "RRI" | "RTD" | "SEARCH" | "SEARCHB" | "SHEET" | "SHEETS" | "TEXT" | "USDOLLAR" | "VALUEL" | "VARPA" | "XOR"
	|	"LEGACY.CHIDIST" | "LEGACY.CHIINV" | "LEGACY.CHITEST" |	"LEGACY.FDIST" | "LEGACY.FINV" | "LEGACY.NORMSDIST" | "LEGACY.NORMSINV" | "ORG.OPENOFFICE.ERRORTYPE"
	}
*/

// Please keep this list in alphabetical order.
void fun(): {}
	// citation: abs
	{	"ABS"	fun1( Function.ABS )
	// citation: abs
	|	"ACOS" fun1( Function.ACOS )
	|	"ACOSH" fun1( Function.ACOSH )
	|	"ASC" fun1( Function.ASC )
	|	"ASIN" fun1( Function.ASIN )
	|	"ASINH" fun1( Function.ASINH )
	|	"ATAN" fun1( Function.ATAN )
	|	"ATANH" fun1( Function.ATANH )
	|	"ATAN2" fun2( Function.ATAN2 )
	|	"AND" aggN( Function.AND )
	|	"AVEDEV" aggN( Function.AVEDEV )
	|	"AVERAGE" aggN( Function.AVERAGE )
	|	"BETADIST" fun3to5( Function.BETADIST )
	|	"BETAINV" fun3to5( Function.BETAINV )
	|	"BINOMDIST" fun4( Function.BINOMDIST )
	|	"CEILING" fun2( Function.CEILING )
	|	"CHAR" fun1( Function.CHAR )
	|	"CHIDIST" fun2( Function.CHIDIST )
	|	"CHIINV" fun2( Function.CHIINV )
	|	"CHITEST" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.CHITEST )
	|	"CHOOSE" open() expr() commaExprs() closeFun( Function.CHOOSE )
	|	"CLEAN" fun1( Function.CLEAN )
	|	"CODE" fun1( Function.CODE )
	|	"COLUMN" open() [rangeExpr()] closeFun( Function.COLUMN )

	// citation: combin
	|	"COMBIN" fun2( Function.COMBIN )
	// citation: combin

	|	"CONCATENATE" open() expr() commaExprs() closeOp( Operator.CONCAT )
	|	"CONFIDENCE" fun3( Function.CONFIDENCE )
	|	"CORREL" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.CORREL )
	|	"COS" fun1( Function.COS )
	|	"COSH" fun1( Function.COSH )
	|	"COUNT" aggN( Function.COUNT )
	|	"COUNTA" aggN( Function.COUNTA )
	|	"COUNTIF" open() shapedRangeExpr() commaExpr() closeFun( Function.COUNTIF )
	|	"COVAR" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.COVAR )
	|	"CRITBINOM" fun3( Function.CRITBINOM )
	|	"DATE" fun3( Function.DATE )
	|	"DATEVALUE" fun1( Function.DATEVALUE )
	|	"DAVERAGE" dbAggN( Function.DAVERAGE )
	|	"DAY" fun1( Function.DAY )
	|	"DAYS360" fun2to3( Function.DAYS360 )
	|	"DB" fun4to5( Function.DB )
	|	"DCOUNT" dbAggN( Function.DCOUNT )
	|	"DCOUNTA" dbAggN( Function.DCOUNTA )
	|	"DDB" fun4to5( Function.DDB )
	|	"DEGREES" fun1( Function.DEGREES )
	|	"DEVSQ" aggN( Function.DEVSQ )
	|	"DGET" dbAggN( Function.DGET )
	|	"DMAX" dbAggN( Function.DMAX )
	|	"DMIN" dbAggN( Function.DMIN )
	|	"DOLLAR" fun1to2( Function.DOLLAR )
	|	"DPRODUCT" dbAggN( Function.DPRODUCT )
	|	"DSTDEV" dbAggN( Function.DSTDEV )
	|	"DSTDEVP" dbAggN( Function.DSTDEVP )
	|	"DSUM" dbAggN( Function.DSUM )
	|	"DVAR" dbAggN( Function.DVAR )
	|	"DVARP" dbAggN( Function.DVARP )
	|	"ERF" fun1to2( Function.ERF )
	|	"ERFC" fun1( Function.ERFC )
	|	"err" fun1( Function.ERROR ) // Internal to rewrite rules
	|	"ERROR.TYPE" fun1( Function.ERRORTYPE )
	|	"ERRORTYPE" fun1( Function.ERRORTYPE )
	|	"EXACT" fun2( Function.EXACT )
	|	"EXPONDIST" fun3( Function.EXPONDIST )
	|	"EVEN" fun1( Function.EVEN )
	|	"EXP" fun1( Function.EXP )
	|	"FACT" fun1( Function.FACT )
	|	"FALSE" [ "(" ")" ] { pushNode( new ExpressionNodeForConstantValue( false )); }
	|	"false" [ "(" ")" ] { pushNode( new ExpressionNodeForConstantValue( false )); }
	|	"FDIST" fun3( Function.FDIST )
	|	"FINV" fun3( Function.FINV )
	|	"FTEST" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.FTEST )
	|	"FIND" fun2to3( Function.FIND )
	|	"FISHER" fun1( Function.FISHER )
	|	"FISHERINV" fun1( Function.FISHERINV )
	|	"FIXED" fun1to3( Function.FIXED )
	|	"FLOOR" fun2( Function.FLOOR )
	|	"FORECAST" open() expr() <SEP> shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.FORECAST )
	|	"FV" fun3to5( Function.FV )
	|	"GAMMADIST" fun4( Function.GAMMADIST )
	|	"GAMMAINV" fun3( Function.GAMMAINV )
	|	"GAMMALN" fun1( Function.GAMMALN )
	|	"GEOMEAN" aggN( Function.GEOMEAN )
	|	"HARMEAN" aggN( Function.HARMEAN )
	|	"HLOOKUP" hvLookup( Function.HLOOKUP )
	|	"HOUR" fun1( Function.HOUR )
	|	"HYPGEOMDIST" fun4( Function.HYPGEOMDIST )
	|	"IF" fun2to3( Function.IF )
	|	"INDEX" open() shapedRangeExpr() <SEP> exprOrNull() optCommaExpr() closeFun( Function.INDEX )
	|	"INT" fun1( Function.INT )
	|	"INTERCEPT" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.INTERCEPT )
	|	"IRR" open() shapedRangeExpr() optCommaExprOr(0.1) closeFun( Function.IRR )
	|	"ISBLANK" fun1( Function.ISBLANK )
	|	"ISERR" fun1( Function.ISERR )
	|	"ISERROR" fun1( Function.ISERROR )
	|	"ISLOGICAL" fun1( Function.ISLOGICAL )
	|	"ISNA" fun1( Function.ISNA )
	|	"ISNONTEXT" fun1( Function.ISNONTEXT )
	|	"ISNUMBER" fun1( Function.ISNUMBER )
	|	"ISTEXT" fun1( Function.ISTEXT )
	|	"KURT" aggN( Function.KURT )
	|	"LARGE" open() shapedRangeExpr() commaExpr() closeFun( Function.LARGE )
	|	"LEFT" fun1to2( Function.LEFT )
	|	"LEGACY.CHIDIST" fun2( Function.CHIDIST )
	|	"LEGACY.CHIINV" fun2( Function.CHIINV )
	|	"LEGACY.CHITEST" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.CHITEST )
	|	"LEGACY.FDIST" fun3( Function.FDIST )
	|	"LEGACY.FINV" fun3( Function.FINV )
	|	"LEGACY.NORMSDIST" fun1( Function.NORMSDIST )
	|	"LEGACY.NORMSINV" fun1( Function.NORMSINV )
	|	"LEN" fun1( Function.LEN )
	|	"LENB" fun1( Function.LENB )
	|	"LN" fun1( Function.LN )
	|	"LOG" fun1to2( Function.LOG )
	|	"LOG10" fun1( Function.LOG10 )
	|	"LOGINV" fun3( Function.LOGINV )
	|	"LOGNORMDIST" fun3( Function.LOGNORMDIST )
	|	"LOOKUP" open() expr() <SEP> shapedRangeExpr() [ <SEP> shapedRangeExpr() ] closeFun( Function.LOOKUP )
	|	"LOWER" fun1( Function.LOWER )
	|	"MAX" aggN( Function.MAX )
	|	"MATCH" open() expr() <SEP> shapedRangeExpr() optCommaExpr() closeFun( Function.MATCH )
	|	"MDETERM" open() shapedRangeExpr() closeFun( Function.MDETERM )
	|	"MEDIAN" open() shapedRangeExpr() closeFun( Function.MEDIAN )
	|	"MID" fun3( Function.MID )
	|	"MIN" aggN( Function.MIN )
	|	"MINUTE" fun1( Function.MINUTE )
	|	"MIRR" open() shapedRangeExpr() commaExpr() commaExpr() closeFun( Function.MIRR )
	|	"MOD" fun2( Function.MOD )
	|	"MODE" aggN( Function.MODE )
	|	"MONTH" fun1( Function.MONTH )
	|	"MROUND" fun2( Function.MROUND )	
	|	"N" fun1( Function.N )
	|	"NA" fun0( Function.NA )
	|	"NEGBINOMDIST" fun3( Function.NEGBINOMDIST )
	|	"NORMDIST" fun4( Function.NORMDIST )
	|	"NORMINV" fun3( Function.NORMINV )
	|	"NORMSDIST" fun1( Function.NORMSDIST )
	|	"NORMSINV" fun1( Function.NORMSINV )
	|	"NOT" fun1( Function.NOT )
	|	"NOW" fun0( Function.NOW )
	|	"NPER" fun3to5( Function.NPER )
	// citation: npv
	|	"NPV" open() expr() <SEP> shapedRangeExpr() closeFun( Function.NPV )
	// citation: npv
	|	"ODD" fun1( Function.ODD )
	|	"OR" aggN( Function.OR )
	|	"ORG.OPENOFFICE.ERRORTYPE" fun1( Function.ERRORTYPE )
	|	"PEARSON" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.PEARSON )
	|	"PERMUT" fun2( Function.PERMUT )
	|	"PERCENTILE" open() shapedRangeExpr() commaExpr() closeFun( Function.PERCENTILE )
	|	"PERCENTRANK" open() shapedRangeExpr() commaExpr() optCommaExpr() closeFun( Function.PERCENTRANK )
	|	"PI" fun0( Function.PI )
	|	"PMT" fun3to5( Function.PMT )
	|	"POISSON" fun3( Function.POISSON )
	|	"POWER" fun2( Function.POWER )
	|	"PROB" open() shapedRangeExpr() <SEP> shapedRangeExpr() commaExpr() optCommaExpr() closeFun( Function.PROB )
	|	"PRODUCT" aggN( Function.PRODUCT )
	|	"PROPER" fun1( Function.PROPER )
	|	"PV" fun3to5( Function.PV )
	|	"QUARTILE" open() shapedRangeExpr() commaExpr() closeFun( Function.QUARTILE )	
	|	"RADIANS" fun1( Function.RADIANS )
	|	"RAND" fun0( Function.RAND )
	|	"RANK" open() expr() <SEP> shapedRangeExpr() optCommaExpr() closeFun( Function.RANK )
	|	"RATE" fun3to6( Function.RATE )
	|	"REPLACE" fun4( Function.REPLACE )
	|	"REPT" fun2( Function.REPT )
	|	"RIGHT" fun1to2( Function.RIGHT )
	|	"ROMAN" fun1to2( Function.ROMAN )
	// citation: round
	|	"ROUND" fun2( Function.ROUND )
	// citation: round
	|	"ROUNDDOWN" fun2( Function.ROUNDDOWN )
	|	"ROUNDUP" fun2( Function.ROUNDUP )
	|	"ROW" open() [rangeExpr()] closeFun( Function.ROW )
	|	"RSQ" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.RSQ )
	|	"SEARCH" fun2to3( Function.SEARCH )
	|	"SECOND" fun1( Function.SECOND )
	|	"SIGN" fun1( Function.SIGN )
	|	"SIN" fun1( Function.SIN )
	|	"SINH" fun1( Function.SINH )
	|	"SKEW" aggN( Function.SKEW )
	|	"SLN" fun3( Function.SLN )
	|	"SLOPE" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.SLOPE )
	|	"SMALL" open() shapedRangeExpr() commaExpr() closeFun( Function.SMALL )	
	|	"SQRT" fun1( Function.SQRT )
	|	"STANDARDIZE" fun3( Function.STANDARDIZE )
	|	"STDEV" aggN( Function.STDEV )
	|	"STDEVP" aggN( Function.STDEVP )
	|	"STDEVPA" aggN( Function.STDEVPA )
	|	"STEYX" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.STEYX )
	|	"SUBSTITUTE" fun3to4( Function.SUBSTITUTE )
	|	"SUM" aggN( Function.SUM )
	|	"SUMIF" open() shapedRangeExpr() commaExpr() [ <SEP> shapedRangeExpr() ] closeFun( Function.SUMIF )
	|	"SUMSQ" aggN( Function.SUMSQ )
	|	"SUMX2MY2" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.SUMX2MY2 )
	|	"SUMX2PY2" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.SUMX2PY2 )
	|	"SUMXMY2" open() shapedRangeExpr() <SEP> shapedRangeExpr() closeFun( Function.SUMXMY2 )
	|	"SYD" fun4( Function.SYD )
	|	"T" fun1( Function.T )
	|	"TAN" fun1( Function.TAN )
	|	"TANH" fun1( Function.TANH )
	|	"TDIST" fun3to4( Function.TDIST )
	|	"TINV" fun2( Function.TINV )
	|	"TTEST" open() shapedRangeExpr() <SEP> shapedRangeExpr() commaExpr() commaExpr() closeFun( Function.TTEST )
	|	"TEXT" fun2( Function.TEXT )
	|	"TIME" fun3( Function.TIME )
	|	"TIMEVALUE" fun1( Function.TIMEVALUE )
	|	"TODAY" fun0( Function.TODAY )
	|	"TRIM" fun1( Function.TRIM )
	|	"TRIMMEAN" open() shapedRangeExpr() commaExpr() closeFun( Function.TRIMMEAN )	
	|	"TRUE" [ "(" ")" ] { pushNode( new ExpressionNodeForConstantValue( true )); }
	|	"true" [ "(" ")" ] { pushNode( new ExpressionNodeForConstantValue( true )); }
	|	"TRUNC" fun1to2( Function.TRUNC )
	|	"UPPER" fun1( Function.UPPER )
	|	"VALUE" fun1( Function.VALUE )
	// citation: var
	|	"VAR" aggN( Function.VAR )
	// citation: var
	|	"VARA" aggN( Function.VARA )
	|	"VARP" aggN( Function.VARP )
	|	"VDB" fun5to7( Function.VDB )
	|	"VLOOKUP" hvLookup( Function.VLOOKUP )
	|	"WEEKDAY" fun1to2( Function.WEEKDAY )
	|	"WEIBULL" fun4( Function.WEIBULL )
	|	"YEAR" fun1( Function.YEAR )
	|	"ZTEST" open() shapedRangeExpr() commaExpr() optCommaExpr() closeFun( Function.ZTEST )
	}

void open(): {}
	{	"("
			{ mark(); }
	}

void commaExpr(): {}
	{	<SEP> expr()
	}

void commaExprOrNull():
	{	boolean needDefault = true; }
	{	<SEP> [expr()
			{ needDefault = false; }
		]
			{ if(needDefault) pushNode( null ); }
	}

void optCommaExpr(): {}
	{	[<SEP> [expr()]]
	}

void optCommaExprOr(Object v):
	{	boolean needDefault = true; }
	{	[<SEP> [expr()
			{ needDefault = false; }
		]]
			{ if(needDefault) pushNode( new ExpressionNodeForConstantValue( v )); }
	}

void exprOrNull():
	{	boolean needDefault = true; }
	{	[expr()
			{ needDefault = false; }
		]
			{ if(needDefault) pushNode( null ); }
	}

void commaExprs(): {}
	{	( <SEP> expr() )*
	}

void closeFun(Function f): {}
	{	")"
			{ pushNode( new ExpressionNodeForFunction( f, popMarkedNodes() )); }
	}

void closeOp(Operator o): {}
	{	")"
			{ pushNode( new ExpressionNodeForOperator( o, popMarkedNodes() )); }
	}

void fun0(Function f): {}
	{	"(" ")"
			{ pushNode( new ExpressionNodeForFunction( f )); }
	}

void fun1(Function f): {}
	{	"(" expr() ")"
			{ pushNode( new ExpressionNodeForFunction( f, popNode() )); }
	}

void fun2(Function f): {}
	{	"(" expr() commaExpr() ")"
			{ pushNode( new ExpressionNodeForFunction( f, popNodes( 2 ) )); }
	}

void fun3(Function f): {}
	{	"(" expr() commaExpr() commaExpr() ")"
			{ pushNode( new ExpressionNodeForFunction( f, popNodes( 3 ) )); }
	}

void fun4(Function f): {}
	{	"(" expr() commaExpr() commaExpr() commaExpr() ")"
			{ pushNode( new ExpressionNodeForFunction( f, popNodes( 4 ) )); }
	}

void fun1to2(Function f): {}
	{	open() expr() optCommaExpr() closeFun( f )
	}

void fun1to3(Function f): {}
	{	open() expr() [commaExprOrNull() optCommaExpr()] closeFun( f )
	}

void fun2to3(Function f): {}
	{	open() expr() commaExpr() optCommaExpr() closeFun( f )
	}

void fun3to4(Function f): {}
	{	open() expr() commaExpr() commaExpr() optCommaExpr() closeFun( f )
	}

void fun4to5(Function f): {}
	{	open() expr() commaExpr() commaExpr() commaExpr() optCommaExpr() closeFun( f )
	}

void fun3to5(Function f): {}
	{	open() expr() commaExpr() commaExpr() [commaExprOrNull() optCommaExpr()] closeFun( f )
	}

void fun3to6(Function f): {}
	{	open() expr() commaExpr() commaExpr() [commaExprOrNull() [commaExprOrNull() optCommaExpr()]] closeFun( f )
	}

void fun5to7(Function f): {}
	{	open() expr() commaExpr() commaExpr() commaExpr() commaExpr() [commaExprOrNull() optCommaExpr()] closeFun( f )
	}

void hvLookup(Function f): {}
	{	open() expr() <SEP> shapedRangeExpr() commaExpr() optCommaExpr() closeFun( f )
	}

/*	LATER This is what we really want.
	But the current compiler only handles multiple arguments to the aggregator directly.
void aggN(Function f): {}
	{	"(" rangeUnion() ")"
			 { pushNode( new ExpressionNodeForFunction( f, popNode() )); }
	}
*/

void aggN(Function f): {}
	{	open() rangeExpr() ( <SEP> rangeExpr() )* closeFun( f )
	}

void dbAggN(Function f): {}
	{	"(" shapedRangeExpr() <SEP> expr() <SEP> shapedRangeExpr() ")"
			 { pushNode( new ExpressionNodeForFunction( f, popNodes( 3 ) )); }
	}


/* Range parsing. */

void rangeUnion(): {}
	{	rangeIntersection()
		[	<SEP> rangeIntersection()
				{ pushNode( makeRangeUnion( popNodes( 2 ) )); }
			( <SEP> rangeIntersection()
				{ popNodeAndMergeIntoTopNode(); }
			)*
		]
	}

void rangeIntersection(): {}
	{	range()
		[	["!"] range()
				{ pushNode( makeRangeIntersection( popNodes( 2 ) )); }
			(	["!"] range()
				{ popNodeAndMergeIntoTopNode(); }
			)*
		]
	}

void range():
	{	Object r; }
	{	LOOKAHEAD( { isRangeName( getToken( 1 ) ) } )
		namedRangeRef()
	|	r = rangeOrCellRef()
			{ pushNode( makeNodeForReference( r ) ); }
	}

void shapedRangeExpr(): {}
	{	rangeExpr()
			{ pushNode( makeShapedRange( popNode() ) ); }
	}

Object rangeOrCellRef():
	{	Object r; }
	{
		(	LOOKAHEAD( { getCellRefFormat() == CellRefFormat.R1C1 } )
			r = rangeOrCellRefR1C1()
 		|	LOOKAHEAD( { getCellRefFormat() == CellRefFormat.A1 || getCellRefFormat() == CellRefFormat.A1_OOXML } )
			r = rangeOrCellRefA1()
		|	LOOKAHEAD( { getCellRefFormat() == CellRefFormat.A1_ODF } )
			<LEFT_BRACKET> r = rangeOrCellRefODF() <RIGHT_BRACKET>
		)
			{ return r; }
	}

Object rangeOrCellRefR1C1():
	{	Object from, to; }
	{
		from = cellRefR1C1( null ) (
			<RANGE_SEPARATOR> to = cellRefR1C1( from )
				{ return makeCellRange( from, to ); }
		)?
			{ return from; }
	}

Object cellRefR1C1(Object baseCell):
	{	Token c; }
	{	c = <CELLR1C1>
			{ return makeCell( c, baseCell ); }
	}

Object rangeOrCellRefODF():
	{	Object from, to; }
	{
		from = cellRefA1ODF( null ) (
			<RANGE_SEPARATOR_ODF> to = cellRefA1ODF( from )
				{ return makeCellRange( from, to ); }
		)?
			{ return from; }
	}

Object cellRefA1ODF(Object baseCell):
	{	Token c; }
	{	c = <CELLA1_ODF>
			{ return makeCell( c, baseCell ); }
	}

Object rangeOrCellRefA1():
	{	Token c; }
	{	(	c = <CELLA1>
		|	c = <CELLR1C1>
		|	c = <RANGEA1>
		|	c = <RANGEA1_OOXML>
		)
			{ return makeCellRange( c ); }
	}

void namedRangeRef():
	{	Token n; }
	{	n = <NAME>
			{ pushNode( makeNamedRangeRef( n )); }
	}


/* Rewrite rules. */

void parseRules(): {}
	{	"rules" "{" (rewrite() | def())* "}"
	}

void rewrite():
	{ Token n; }
	{	"rewrite" n=<NAME>
			{	makeNewRuleDef( n ); }
		"(" [ param() (<SEP> param())* ] ")"
			{	letParams(); }
		"=" body()
			{	unletParams();
				finalizeLastRuleDef(); }
	}

void def():
	{ Token n; }
	{	"def" n=<NAME>
			{	makeNewFoldDef( n ); }
		[ "(" [ param() (<SEP> param())* ] ")" ]
			{	letParams(); }
		"=" body()
			{	unletParams();
				finalizeLastFoldDef();	}
	}

void param():
	{ Token n; char type = 0; }
	{	n=<NAME>
		[ "#"	{	type = '#'; }
		| "*" 	{	type = '*'; }
		| "+" 	{	type = '+'; }
		]
			{	makeNewParam( n, type ); }
	}

void body(): {}
	{	niceExpr()
			{	makeBody(); }
	}

/* Rewrite functions. */

void nice(): {}
	{	"let" niceLet()
	|	"if" niceIf()
	|	"fold" niceFold(false)
	|	"fold/reduce" niceFold( true )
	|	"iterate" niceIterate()
	|	"apply" niceApply()
	}

void niceLet():
	{	Token name;
		ExpressionNode in, val;
	}
	{	name=<NAME> "=" expr()
			{	let( name ); }
		("let" niceLet() | "in" niceExpr())
			{	unlet( name );
				in = popNode();
				val = popNode();
				pushNode( new ExpressionNodeForLet( name.image, val, in ));
			}
	}

void niceIf(): {}
	{	expr() "then" niceExpr() "else" niceExpr()
			{ pushNode( new ExpressionNodeForFunction( Function.IF, popNodes( 3 ) )); }
	}

void niceFold( boolean _mayReduce ): {}
	{
			{	initFold(); }
		[ "with" foldAccuInit() (<SEP> foldAccuInit())* ]
			{	letFoldAccus(); }
		foldBody()
			{	pushFold( true, _mayReduce ); }
	}

void niceIterate(): {}
	{
			{	initFold(); }
		[ "with" foldAccuInit() (<SEP> foldAccuInit())* ]
			{	letFoldAccus(); }
		[ "index" foldIdxName() ]
		foldBody()
			{	pushFold( false, false ); }
	}

void foldBody(): {}
	{	"each" foldEltName() (<SEP> foldEltName())*
			{	letFoldElts(); }
		[ "as" foldAccuStep() (<SEP> foldAccuStep())* ]
			{	unletFoldElts(); }
		[[ "with" "count" foldCountName() ]
			{	letFoldCount(); }
		"into" foldInto()
			{	unletFoldCount(); }
		 ]
			{	unletFoldAccus(); }
		[ "when" "empty" foldWhenEmpty() ]
		"end"
	}

void foldAccuInit():
	{	Token n; }
	{	n=<NAME> "=" expr()
			{	addFoldAccuInit( n, popNode() ); }
	}

void foldIdxName():
	{	Token n; }
	{	n=<NAME>
			{	setFoldIdxName( n ); }
	}

void foldEltName():
	{	Token n; }
	{	n=<NAME>
			{	addFoldEltName( n ); }
	}

void foldAccuStep():
	{	Token n; }
	{	n=<NAME> "=" niceExpr()
			{	addFoldStep( n, popNode() ); }
	}

void foldCountName():
	{	Token n; }
	{	n=<NAME>
			{	setFoldCountName( n ); }
	}

void foldInto(): {}
	{	niceExpr()
			{	setFoldInto( popNode() ); }
	}

void foldWhenEmpty(): {}
	{	niceExpr()
			{	setFoldWhenEmpty( popNode() ); }
	}

void niceApply():
	{	Token def = null, vec;
		Collection<Token> vecs;
	}
	{	(	"fold" niceFold(false)
		|	"fold/reduce" niceFold( true )
		|	"iterate" niceIterate()
		|	def=<NAME>
		)
		"to"
		(	"list" vec=<NAME>
				{	pushApplyList( def, vec ); }
		|	"vectors" "{"
					{	vecs = New.collection(); }
				vec=<NAME>
					{	vecs.add( vec ); }
				(<SEP> vec=<NAME>
					{	vecs.add( vec ); }
				)* "}"
					{	pushApplyVectors( def, vecs ); }
		)
	}

void niceExpr():
	{	Token type = null; }
	{	nice()
	|	expr() [ type=<TYPE> {	setExprType( type ); } ]
	}


/* It is crucial that the <NAME> and <CELL..> tokens be defined after all of the function and aggregator names. */
/* Otherwise they would all get lexed as <NAME>. */

TOKEN: /* Common cell reference elements */
	{	<#SHEET: (<NAME> | "'" ("''"|~["'"])* "'") >
	|	<#ABS: ("$")? >
	|	<#BROKEN_REF: "#REF!">
	}

TOKEN: /* R1C1-style cell references */
	{	<CELLR1C1: (<SHEET> "!")? <ROW> <COL> >
	|	<#ROW: "R" (<IDX>)? >
	|	<#COL: "C" (<IDX>)? >
	|	<#IDX: "[" ("-")? <DIGITS> "]" | <DIGITS> >
	}

TOKEN: /* A1-style cell references */
	{	<#LOCAL_CELLA1: <ABS> <CAPS> <ABS> <DIGITS> | <BROKEN_REF> >
	|	<CELLA1: (<SHEET> "!" | <BROKEN_REF>)? <LOCAL_CELLA1> >
	|	<RANGEA1: <CELLA1> <RANGE_SEPARATOR> <CELLA1> >
	|	<#LOCAL_ROW_RANGEA1_OOXML: <ABS> <DIGITS> <RANGE_SEPARATOR> <ABS> <DIGITS> >
	|	<#LOCAL_COL_RANGEA1_OOXML: <ABS> <CAPS> <RANGE_SEPARATOR> <ABS> <CAPS> >
	|	<#LOCAL_CELL_OR_RANGEA1_OOXML: (<LOCAL_CELLA1> (<RANGE_SEPARATOR> <LOCAL_CELLA1>)?) | <LOCAL_ROW_RANGEA1_OOXML> | <LOCAL_COL_RANGEA1_OOXML> >
	|	<RANGEA1_OOXML: (<SHEET> (<RANGE_SEPARATOR> <SHEET>)? "!" | <BROKEN_REF>)? <LOCAL_CELL_OR_RANGEA1_OOXML> >
	|	<RANGE_SEPARATOR: ":" >
	}

/* OpenOffice.org-style cell references */

TOKEN:
	{	<LEFT_BRACKET: "["> : IN_ODF_CELL_REF
	}

<IN_ODF_CELL_REF> TOKEN:
	{	<CELLA1_ODF: (<ABS> <SHEET_ODF>)? "." <ABS> (<CAPS> | <BROKEN_REF>) <ABS> (<DIGITS> | <BROKEN_REF>) >
	|	<RANGE_SEPARATOR_ODF: ":" >
	|	<#SHEET_ODF: <SHEET_NAME_ODF> | "'" ("''"|~["'"])* "'" | <BROKEN_REF> >
	|	<#SHEET_NAME_ODF: (<LETTER> | "_") (<LETTER> | "_" | ["0"-"9"])* >
	|	<RIGHT_BRACKET: "]"> : DEFAULT
	}


TOKEN: /* Names */
	{	<NAME: (<ALPHA> | "_") (<ALPHA> | "_" | "." | ["0"-"9"])* >
	}

TOKEN: /* Separators */
	{	<SEP: "," | ";" >
	}

TOKEN: /* TYPES */
	{	<TYPE: "::" ("NUMERIC" | "STRING") >
	}
