/*
 * Copyright (c) 2006 by Abacus Research AG, Switzerland.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are prohibited, unless you have been explicitly granted
 * more rights by Abacus Research AG.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.formulacompiler.compiler.internal.model.interpreter;

import java.text.ParseException;
import java.util.Date;

import org.formulacompiler.compiler.internal.AbstractLongType;
import org.formulacompiler.runtime.internal.RuntimeLong_v2;


abstract class InterpretedScaledLongType_Base extends InterpretedNumericType
{
	private final AbstractLongType num;
	private final RuntimeLong_v2.Context runtimeCx;


	public InterpretedScaledLongType_Base( AbstractLongType _type )
	{
		super( _type );
		this.num = _type;
		this.runtimeCx = new RuntimeLong_v2.Context( _type.scale() );
	}


	protected final RuntimeLong_v2.Context getContext()
	{
		return this.runtimeCx;
	}

	private final int getScale()
	{
		return this.num.scale();
	}

	private final long getScalingFactor()
	{
		return this.num.one();
	}

	private final long zeroL()
	{
		return this.num.zero();
	}


	@Override
	public Number fromString( String _s ) throws ParseException
	{
		return this.num.valueOf( _s );
	}


	@Override
	public final Object adjustConstantValue( Object _value )
	{
		if (_value instanceof Number) {
			return this.num.valueOf( (Number) _value );
		}
		return _value;

	}


	@Override
	public Number toNumeric( Number _value )
	{
		return valueToScaledLongOrZero( _value );
	}


	private final long valueToScaledLongOrZero( Object _value )
	{
		if (null == _value) return zeroL();
		if (_value instanceof Long) return (Long) _value;

		// LATER This is kludgy and fragile. What if the parser/rewriter need to have longs too?
		/*
		 * The following two are generated by the expression parser and the rewriter. They must be
		 * treated as non-scaled values.
		 */
		if (_value instanceof Integer) return ((Integer) _value).longValue() * this.num.one();
		if (_value instanceof Double) return Math.round( ((Double) _value) * this.num.one() );

		if (_value instanceof String) {
			throw new IllegalArgumentException( "Cannot interpret java.lang.String." );
		}
		if (_value instanceof Date) {
			throw new IllegalArgumentException( "Cannot interpret java.util.Date - it is runtime time-zone specific." );
		}
		return zeroL();
	}


	final double scaledLongToDouble( long _value )
	{
		if (getScale() == 0) return _value;
		final double unscaled = _value;
		final double divisor = getScalingFactor();
		return unscaled / divisor;
	}


	@Override
	protected final int compareNumerically( Object _a, Object _b )
	{
		long a = valueToScaledLongOrZero( _a );
		long b = valueToScaledLongOrZero( _b );
		return (a == b)? 0 : (a < b)? -1 : 1;
	}


	@Override
	protected final int valueToInt( Object _value, int _ifNull )
	{
		if (_value instanceof Long) {
			long value = (Long) _value;
			return (int) (value / this.num.one());
		}
		return super.valueToInt( _value, _ifNull );
	}


	// Conversions for generated code:

	protected final boolean isScaled()
	{
		return getScale() != 0;
	}

	protected final long to_long( Object _o )
	{
		return valueToScaledLongOrZero( _o );
	}

	protected final long[] to_array( Object _value )
	{
		final Object[] consts = asArrayOfConsts( _value );
		final long[] r = new long[ consts.length ];
		int i = 0;
		for (Object cst : consts) {
			r[ i++ ] = to_long( cst );
		}
		return r;
	}


}